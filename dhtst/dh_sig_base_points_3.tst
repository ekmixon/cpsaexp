(herald "Signed group DH exchange 3" (algebra diffie-hellman)
  (limit 200) (bound 25))

(comment "CPSA 4.3.0")
(comment "All input read from dhtst/dh_sig_base_points_3.scm")
(comment "Step count limited to 200")
(comment "Strand count bounded at 25")

(defprotocol dh_sig2 diffie-hellman
  (defrole group-init
    (vars (alpha rndx) (k-magic skey) (group text))
    (trace (send (enc "Group id" group (exp (gen) alpha) k-magic)))
    (uniq-gen alpha))
  (defrole init
    (vars (x rndx) (y expt) (g base) (k-magic skey) (n group text)
      (a b name))
    (trace (recv (enc "Group id" group g k-magic))
      (send (enc a b group (exp g x) (privk a)))
      (recv (enc a b group (exp g y) (exp g x) (privk b)))
      (send (enc n (exp g (mul x y)))) (recv n))
    (non-orig k-magic)
    (uniq-gen n x))
  (defrole resp
    (vars (y rndx) (x expt) (g base) (k-magic skey) (n group text)
      (a b name))
    (trace (recv (enc "Group id" group g k-magic))
      (recv (enc a b group (exp g x) (privk a)))
      (send (enc a b group (exp g y) (exp g x) (privk b)))
      (recv (enc n (exp g (mul y x)))) (send n))
    (non-orig k-magic)
    (uniq-gen y)
    (absent (y x)))
  (defgenrule neqRl_indx
    (forall ((x indx)) (implies (fact neq x x) (false))))
  (defgenrule neqRl_strd
    (forall ((x strd)) (implies (fact neq x x) (false))))
  (defgenrule neqRl_mesg
    (forall ((x mesg)) (implies (fact neq x x) (false))))
  (defgenrule no-interruption
    (forall ((z0 z1 z2 strd) (i0 i1 i2 indx))
      (implies
        (and (leads-to z0 i0 z2 i2) (trans z1 i1)
          (same-locn z0 i0 z1 i1) (prec z0 i0 z1 i1) (prec z1 i1 z2 i2))
        (false))))
  (defgenrule cakeRule
    (forall ((z0 z1 z2 strd) (i0 i1 i2 indx))
      (implies
        (and (trans z0 i0) (trans z1 i1) (leads-to z0 i0 z1 i1)
          (leads-to z0 i0 z2 i2) (prec z1 i1 z2 i2)) (false))))
  (defgenrule scissorsRule
    (forall ((z0 z1 z2 strd) (i0 i1 i2 indx))
      (implies
        (and (trans z0 i0) (trans z1 i1) (trans z2 i2)
          (leads-to z0 i0 z1 i1) (leads-to z0 i0 z2 i2))
        (and (= z1 z2) (= i1 i2)))))
  (defgenrule invShearsRule
    (forall ((z0 z1 z2 strd) (i0 i1 i2 indx))
      (implies
        (and (trans z0 i0) (trans z1 i1) (same-locn z0 i0 z1 i1)
          (leads-to z1 i1 z2 i2) (prec z0 i0 z2 i2))
        (or (and (= z0 z1) (= i0 i1)) (prec z0 i0 z1 i1)))))
  (defgenrule shearsRule
    (forall ((z0 z1 z2 strd) (i0 i1 i2 indx))
      (implies
        (and (trans z0 i0) (trans z1 i1) (trans z2 i2)
          (leads-to z0 i0 z1 i1) (same-locn z0 i0 z2 i2)
          (prec z0 i0 z2 i2))
        (or (and (= z1 z2) (= i1 i2)) (prec z1 i1 z2 i2))))))

(defskeleton dh_sig2
  (vars (k-magic skey) (n group text) (a b name) (g base) (x rndx)
    (y expt))
  (defstrand init 5 (k-magic k-magic) (n n) (group group) (a a) (b b)
    (g g) (x x) (y y))
  (non-orig k-magic (privk a) (privk b))
  (uniq-gen n x)
  (traces
    ((recv (enc "Group id" group g k-magic))
      (send (enc a b group (exp g x) (privk a)))
      (recv (enc a b group (exp g y) (exp g x) (privk b)))
      (send (enc n (exp g (mul x y)))) (recv n)))
  (label 0)
  (unrealized (0 0) (0 2))
  (origs)
  (comment "1 in cohort - 1 not yet seen"))

(defskeleton dh_sig2
  (vars (k-magic skey) (n group text) (a b name) (x rndx) (y expt)
    (alpha rndx))
  (defstrand init 5 (k-magic k-magic) (n n) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (x x) (y y))
  (defstrand group-init 1 (k-magic k-magic) (group group) (alpha alpha))
  (precedes ((1 0) (0 0)))
  (non-orig k-magic (privk a) (privk b))
  (uniq-gen n x alpha)
  (operation encryption-test (added-strand group-init 1)
    (enc "Group id" group (exp (gen) alpha) k-magic) (0 0))
  (traces
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (send (enc a b group (exp (gen) (mul x alpha)) (privk a)))
      (recv
        (enc a b group (exp (gen) (mul y alpha))
          (exp (gen) (mul x alpha)) (privk b)))
      (send (enc n (exp (gen) (mul x y alpha)))) (recv n))
    ((send (enc "Group id" group (exp (gen) alpha) k-magic))))
  (label 1)
  (parent 0)
  (unrealized (0 2))
  (comment "1 in cohort - 1 not yet seen"))

(defskeleton dh_sig2
  (vars (k-magic k-magic-0 skey) (n group text) (a b name)
    (alpha x y rndx) (x-0 expt))
  (defstrand init 5 (k-magic k-magic) (n n) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (x x) (y (mul x y (rec x-0))))
  (defstrand group-init 1 (k-magic k-magic) (group group) (alpha alpha))
  (defstrand resp 3 (k-magic k-magic-0) (group group) (a a) (b b)
    (g (exp (gen) (mul alpha x (rec x-0)))) (y y) (x x-0))
  (precedes ((0 1) (2 0)) ((1 0) (0 0)) ((2 2) (0 2)))
  (non-orig k-magic k-magic-0 (privk a) (privk b))
  (uniq-gen n alpha x y)
  (absent (y x-0))
  (operation encryption-test (added-strand resp 3)
    (enc a b group (exp (gen) (mul alpha x y (rec x-0)))
      (exp (gen) (mul alpha x)) (privk b)) (0 2))
  (traces
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (send (enc a b group (exp (gen) (mul alpha x)) (privk a)))
      (recv
        (enc a b group (exp (gen) (mul alpha x y (rec x-0)))
          (exp (gen) (mul alpha x)) (privk b)))
      (send (enc n (exp (gen) (mul alpha x x y (rec x-0))))) (recv n))
    ((send (enc "Group id" group (exp (gen) alpha) k-magic)))
    ((recv
       (enc "Group id" group (exp (gen) (mul alpha x (rec x-0)))
         k-magic-0))
      (recv (enc a b group (exp (gen) (mul alpha x)) (privk a)))
      (send
        (enc a b group (exp (gen) (mul alpha x y (rec x-0)))
          (exp (gen) (mul alpha x)) (privk b)))))
  (label 2)
  (parent 1)
  (unrealized (0 4) (2 0))
  (comment "2 in cohort - 2 not yet seen"))

(defskeleton dh_sig2
  (vars (k-magic skey) (n group text) (a b name) (y x alpha rndx))
  (defstrand init 5 (k-magic k-magic) (n n) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (x x) (y y))
  (defstrand group-init 1 (k-magic k-magic) (group group) (alpha alpha))
  (defstrand resp 3 (k-magic k-magic) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (y y) (x x))
  (precedes ((0 1) (2 0)) ((1 0) (0 0)) ((2 2) (0 2)))
  (non-orig k-magic (privk a) (privk b))
  (uniq-gen n y x alpha)
  (absent (y x))
  (operation encryption-test (displaced 3 1 group-init 1)
    (enc "Group id" group (exp (gen) alpha-0) k-magic-0) (2 0))
  (traces
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (send (enc a b group (exp (gen) (mul x alpha)) (privk a)))
      (recv
        (enc a b group (exp (gen) (mul y alpha))
          (exp (gen) (mul x alpha)) (privk b)))
      (send (enc n (exp (gen) (mul y x alpha)))) (recv n))
    ((send (enc "Group id" group (exp (gen) alpha) k-magic)))
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (recv (enc a b group (exp (gen) (mul x alpha)) (privk a)))
      (send
        (enc a b group (exp (gen) (mul y alpha))
          (exp (gen) (mul x alpha)) (privk b)))))
  (label 3)
  (parent 2)
  (unrealized (0 4))
  (comment "3 in cohort - 3 not yet seen"))

(defskeleton dh_sig2
  (vars (k-magic k-magic-0 skey) (n group text) (a b name)
    (y alpha x alpha-0 rndx))
  (defstrand init 5 (k-magic k-magic) (n n) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (x x) (y (mul y (rec alpha) alpha-0)))
  (defstrand group-init 1 (k-magic k-magic) (group group) (alpha alpha))
  (defstrand resp 3 (k-magic k-magic-0) (group group) (a a) (b b)
    (g (exp (gen) alpha-0)) (y y) (x (mul alpha x (rec alpha-0))))
  (defstrand group-init 1 (k-magic k-magic-0) (group group)
    (alpha alpha-0))
  (precedes ((0 1) (2 0)) ((1 0) (0 0)) ((2 2) (0 2)) ((3 0) (2 0)))
  (non-orig k-magic k-magic-0 (privk a) (privk b))
  (uniq-gen n y alpha x alpha-0)
  (absent (y (mul alpha x (rec alpha-0))))
  (operation encryption-test (added-strand group-init 1)
    (enc "Group id" group (exp (gen) alpha-0) k-magic-0) (2 0))
  (traces
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (send (enc a b group (exp (gen) (mul alpha x)) (privk a)))
      (recv
        (enc a b group (exp (gen) (mul y alpha-0))
          (exp (gen) (mul alpha x)) (privk b)))
      (send (enc n (exp (gen) (mul y x alpha-0)))) (recv n))
    ((send (enc "Group id" group (exp (gen) alpha) k-magic)))
    ((recv (enc "Group id" group (exp (gen) alpha-0) k-magic-0))
      (recv (enc a b group (exp (gen) (mul alpha x)) (privk a)))
      (send
        (enc a b group (exp (gen) (mul y alpha-0))
          (exp (gen) (mul alpha x)) (privk b))))
    ((send (enc "Group id" group (exp (gen) alpha-0) k-magic-0))))
  (label 4)
  (parent 2)
  (unrealized (0 4))
  (comment "2 in cohort - 2 not yet seen"))

(defskeleton dh_sig2
  (vars (k-magic skey) (n group text) (a b name) (alpha x y rndx))
  (defstrand init 5 (k-magic k-magic) (n n) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (x x) (y y))
  (defstrand group-init 1 (k-magic k-magic) (group group) (alpha alpha))
  (defstrand resp 5 (k-magic k-magic) (n n) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (y y) (x x))
  (precedes ((0 1) (2 0)) ((0 3) (2 3)) ((1 0) (0 0)) ((2 2) (0 2))
    ((2 4) (0 4)))
  (non-orig k-magic (privk a) (privk b))
  (uniq-gen n alpha x y)
  (absent (y x))
  (operation nonce-test (displaced 2 3 resp 5) n (0 4)
    (enc n (exp (gen) (mul y-0 x-0 alpha))))
  (traces
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (send (enc a b group (exp (gen) (mul alpha x)) (privk a)))
      (recv
        (enc a b group (exp (gen) (mul alpha y))
          (exp (gen) (mul alpha x)) (privk b)))
      (send (enc n (exp (gen) (mul alpha x y)))) (recv n))
    ((send (enc "Group id" group (exp (gen) alpha) k-magic)))
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (recv (enc a b group (exp (gen) (mul alpha x)) (privk a)))
      (send
        (enc a b group (exp (gen) (mul alpha y))
          (exp (gen) (mul alpha x)) (privk b)))
      (recv (enc n (exp (gen) (mul alpha x y)))) (send n)))
  (label 5)
  (parent 3)
  (unrealized)
  (comment "1 in cohort - 1 not yet seen"))

(defskeleton dh_sig2
  (vars (k-magic k-magic-0 skey) (n group group-0 text)
    (a b a-0 b-0 name) (y x alpha y-0 rndx) (x-0 expt))
  (defstrand init 5 (k-magic k-magic) (n n) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (x x) (y y))
  (defstrand group-init 1 (k-magic k-magic) (group group) (alpha alpha))
  (defstrand resp 3 (k-magic k-magic) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (y y) (x x))
  (defstrand resp 5 (k-magic k-magic-0) (n n) (group group-0) (a a-0)
    (b b-0) (g (exp (gen) (mul y x alpha (rec y-0) (rec x-0)))) (y y-0)
    (x x-0))
  (precedes ((0 1) (2 0)) ((0 3) (3 3)) ((1 0) (0 0)) ((2 2) (0 2))
    ((2 2) (3 0)) ((3 4) (0 4)))
  (non-orig k-magic k-magic-0 (privk a) (privk b))
  (uniq-gen n y x alpha y-0)
  (absent (y x) (y-0 x-0))
  (operation nonce-test (added-strand resp 5) n (0 4)
    (enc n (exp (gen) (mul y x alpha))))
  (traces
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (send (enc a b group (exp (gen) (mul x alpha)) (privk a)))
      (recv
        (enc a b group (exp (gen) (mul y alpha))
          (exp (gen) (mul x alpha)) (privk b)))
      (send (enc n (exp (gen) (mul y x alpha)))) (recv n))
    ((send (enc "Group id" group (exp (gen) alpha) k-magic)))
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (recv (enc a b group (exp (gen) (mul x alpha)) (privk a)))
      (send
        (enc a b group (exp (gen) (mul y alpha))
          (exp (gen) (mul x alpha)) (privk b))))
    ((recv
       (enc "Group id" group-0
         (exp (gen) (mul y x alpha (rec y-0) (rec x-0))) k-magic-0))
      (recv
        (enc a-0 b-0 group-0 (exp (gen) (mul y x alpha (rec y-0)))
          (privk a-0)))
      (send
        (enc a-0 b-0 group-0 (exp (gen) (mul y x alpha (rec x-0)))
          (exp (gen) (mul y x alpha (rec y-0))) (privk b-0)))
      (recv (enc n (exp (gen) (mul y x alpha)))) (send n)))
  (label 6)
  (parent 3)
  (unrealized (3 0) (3 1))
  (dead)
  (comment "empty cohort"))

(defskeleton dh_sig2
  (vars (k-magic skey) (n group text) (a b name) (y x alpha rndx))
  (defstrand init 5 (k-magic k-magic) (n n) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (x x) (y y))
  (defstrand group-init 1 (k-magic k-magic) (group group) (alpha alpha))
  (defstrand resp 3 (k-magic k-magic) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (y y) (x x))
  (deflistener (exp (gen) (mul y x alpha)))
  (precedes ((0 1) (2 0)) ((1 0) (0 0)) ((2 2) (0 2)) ((2 2) (3 0))
    ((3 1) (0 4)))
  (non-orig k-magic (privk a) (privk b))
  (uniq-gen n y x alpha)
  (absent (y x))
  (operation nonce-test (added-listener (exp (gen) (mul y x alpha))) n
    (0 4) (enc n (exp (gen) (mul y x alpha))))
  (traces
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (send (enc a b group (exp (gen) (mul x alpha)) (privk a)))
      (recv
        (enc a b group (exp (gen) (mul y alpha))
          (exp (gen) (mul x alpha)) (privk b)))
      (send (enc n (exp (gen) (mul y x alpha)))) (recv n))
    ((send (enc "Group id" group (exp (gen) alpha) k-magic)))
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (recv (enc a b group (exp (gen) (mul x alpha)) (privk a)))
      (send
        (enc a b group (exp (gen) (mul y alpha))
          (exp (gen) (mul x alpha)) (privk b))))
    ((recv (exp (gen) (mul y x alpha)))
      (send (exp (gen) (mul y x alpha)))))
  (label 7)
  (parent 3)
  (unrealized (3 0))
  (comment "5 in cohort - 5 not yet seen"))

(defskeleton dh_sig2
  (vars (k-magic k-magic-0 k-magic-1 skey) (n group group-0 text)
    (a b a-0 b-0 name) (y alpha x alpha-0 y-0 rndx) (x-0 expt))
  (defstrand init 5 (k-magic k-magic) (n n) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (x x) (y (mul y (rec alpha) alpha-0)))
  (defstrand group-init 1 (k-magic k-magic) (group group) (alpha alpha))
  (defstrand resp 3 (k-magic k-magic-0) (group group) (a a) (b b)
    (g (exp (gen) alpha-0)) (y y) (x (mul alpha x (rec alpha-0))))
  (defstrand group-init 1 (k-magic k-magic-0) (group group)
    (alpha alpha-0))
  (defstrand resp 5 (k-magic k-magic-1) (n n) (group group-0) (a a-0)
    (b b-0) (g (exp (gen) (mul y x alpha-0 (rec y-0) (rec x-0))))
    (y y-0) (x x-0))
  (precedes ((0 1) (2 0)) ((0 3) (4 3)) ((1 0) (0 0)) ((2 2) (0 2))
    ((2 2) (4 0)) ((3 0) (2 0)) ((4 4) (0 4)))
  (non-orig k-magic k-magic-0 k-magic-1 (privk a) (privk b))
  (uniq-gen n y alpha x alpha-0 y-0)
  (absent (y (mul alpha x (rec alpha-0))) (y-0 x-0))
  (operation nonce-test (added-strand resp 5) n (0 4)
    (enc n (exp (gen) (mul y x alpha-0))))
  (traces
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (send (enc a b group (exp (gen) (mul alpha x)) (privk a)))
      (recv
        (enc a b group (exp (gen) (mul y alpha-0))
          (exp (gen) (mul alpha x)) (privk b)))
      (send (enc n (exp (gen) (mul y x alpha-0)))) (recv n))
    ((send (enc "Group id" group (exp (gen) alpha) k-magic)))
    ((recv (enc "Group id" group (exp (gen) alpha-0) k-magic-0))
      (recv (enc a b group (exp (gen) (mul alpha x)) (privk a)))
      (send
        (enc a b group (exp (gen) (mul y alpha-0))
          (exp (gen) (mul alpha x)) (privk b))))
    ((send (enc "Group id" group (exp (gen) alpha-0) k-magic-0)))
    ((recv
       (enc "Group id" group-0
         (exp (gen) (mul y x alpha-0 (rec y-0) (rec x-0))) k-magic-1))
      (recv
        (enc a-0 b-0 group-0 (exp (gen) (mul y x alpha-0 (rec y-0)))
          (privk a-0)))
      (send
        (enc a-0 b-0 group-0 (exp (gen) (mul y x alpha-0 (rec x-0)))
          (exp (gen) (mul y x alpha-0 (rec y-0))) (privk b-0)))
      (recv (enc n (exp (gen) (mul y x alpha-0)))) (send n)))
  (label 8)
  (parent 4)
  (unrealized (4 0) (4 1))
  (dead)
  (comment "empty cohort"))

(defskeleton dh_sig2
  (vars (k-magic k-magic-0 skey) (n group text) (a b name)
    (y alpha x alpha-0 rndx))
  (defstrand init 5 (k-magic k-magic) (n n) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (x x) (y (mul y (rec alpha) alpha-0)))
  (defstrand group-init 1 (k-magic k-magic) (group group) (alpha alpha))
  (defstrand resp 3 (k-magic k-magic-0) (group group) (a a) (b b)
    (g (exp (gen) alpha-0)) (y y) (x (mul alpha x (rec alpha-0))))
  (defstrand group-init 1 (k-magic k-magic-0) (group group)
    (alpha alpha-0))
  (deflistener (exp (gen) (mul y x alpha-0)))
  (precedes ((0 1) (2 0)) ((1 0) (0 0)) ((2 2) (0 2)) ((2 2) (4 0))
    ((3 0) (2 0)) ((4 1) (0 4)))
  (non-orig k-magic k-magic-0 (privk a) (privk b))
  (uniq-gen n y alpha x alpha-0)
  (absent (y (mul alpha x (rec alpha-0))))
  (operation nonce-test (added-listener (exp (gen) (mul y x alpha-0))) n
    (0 4) (enc n (exp (gen) (mul y x alpha-0))))
  (traces
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (send (enc a b group (exp (gen) (mul alpha x)) (privk a)))
      (recv
        (enc a b group (exp (gen) (mul y alpha-0))
          (exp (gen) (mul alpha x)) (privk b)))
      (send (enc n (exp (gen) (mul y x alpha-0)))) (recv n))
    ((send (enc "Group id" group (exp (gen) alpha) k-magic)))
    ((recv (enc "Group id" group (exp (gen) alpha-0) k-magic-0))
      (recv (enc a b group (exp (gen) (mul alpha x)) (privk a)))
      (send
        (enc a b group (exp (gen) (mul y alpha-0))
          (exp (gen) (mul alpha x)) (privk b))))
    ((send (enc "Group id" group (exp (gen) alpha-0) k-magic-0)))
    ((recv (exp (gen) (mul y x alpha-0)))
      (send (exp (gen) (mul y x alpha-0)))))
  (label 9)
  (parent 4)
  (unrealized (4 0))
  (comment "5 in cohort - 5 not yet seen"))

(defskeleton dh_sig2
  (vars (k-magic skey) (n group text) (a b name) (alpha x y rndx))
  (defstrand init 5 (k-magic k-magic) (n n) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (x x) (y y))
  (defstrand group-init 1 (k-magic k-magic) (group group) (alpha alpha))
  (defstrand resp 5 (k-magic k-magic) (n n) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (y y) (x x))
  (precedes ((0 1) (2 1)) ((0 3) (2 3)) ((1 0) (0 0)) ((1 0) (2 0))
    ((2 2) (0 2)) ((2 4) (0 4)))
  (non-orig k-magic (privk a) (privk b))
  (uniq-gen n alpha x y)
  (absent (y x))
  (operation generalization weakened ((0 1) (2 0)))
  (traces
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (send (enc a b group (exp (gen) (mul alpha x)) (privk a)))
      (recv
        (enc a b group (exp (gen) (mul alpha y))
          (exp (gen) (mul alpha x)) (privk b)))
      (send (enc n (exp (gen) (mul alpha x y)))) (recv n))
    ((send (enc "Group id" group (exp (gen) alpha) k-magic)))
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (recv (enc a b group (exp (gen) (mul alpha x)) (privk a)))
      (send
        (enc a b group (exp (gen) (mul alpha y))
          (exp (gen) (mul alpha x)) (privk b)))
      (recv (enc n (exp (gen) (mul alpha x y)))) (send n)))
  (label 10)
  (parent 5)
  (unrealized)
  (shape)
  (maps
    ((0)
      ((a a) (b b) (x x) (y y) (g (exp (gen) alpha)) (k-magic k-magic)
        (n n) (group group))))
  (origs))

(defskeleton dh_sig2
  (vars (k-magic k-magic-0 skey) (n group group-0 text)
    (a b a-0 b-0 name) (y x alpha y-0 rndx) (x-0 expt))
  (defstrand init 5 (k-magic k-magic) (n n) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (x x) (y y))
  (defstrand group-init 1 (k-magic k-magic) (group group) (alpha alpha))
  (defstrand resp 3 (k-magic k-magic) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (y y) (x x))
  (deflistener (exp (gen) (mul y x alpha)))
  (defstrand resp 3 (k-magic k-magic-0) (group group-0) (a a-0) (b b-0)
    (g (exp (gen) (mul y x alpha (rec y-0)))) (y y-0) (x x-0))
  (precedes ((0 1) (2 0)) ((1 0) (0 0)) ((2 2) (0 2)) ((2 2) (4 0))
    ((3 1) (0 4)) ((4 2) (3 0)))
  (non-orig k-magic k-magic-0 (privk a) (privk b))
  (uniq-gen n y x alpha y-0)
  (absent (y x) (y-0 x-0))
  (operation nonce-test (added-strand resp 3)
    (exp (gen) (mul y x alpha)) (3 0))
  (traces
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (send (enc a b group (exp (gen) (mul x alpha)) (privk a)))
      (recv
        (enc a b group (exp (gen) (mul y alpha))
          (exp (gen) (mul x alpha)) (privk b)))
      (send (enc n (exp (gen) (mul y x alpha)))) (recv n))
    ((send (enc "Group id" group (exp (gen) alpha) k-magic)))
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (recv (enc a b group (exp (gen) (mul x alpha)) (privk a)))
      (send
        (enc a b group (exp (gen) (mul y alpha))
          (exp (gen) (mul x alpha)) (privk b))))
    ((recv (exp (gen) (mul y x alpha)))
      (send (exp (gen) (mul y x alpha))))
    ((recv
       (enc "Group id" group-0 (exp (gen) (mul y x alpha (rec y-0)))
         k-magic-0))
      (recv
        (enc a-0 b-0 group-0 (exp (gen) (mul y x alpha (rec y-0) x-0))
          (privk a-0)))
      (send
        (enc a-0 b-0 group-0 (exp (gen) (mul y x alpha))
          (exp (gen) (mul y x alpha (rec y-0) x-0)) (privk b-0)))))
  (label 11)
  (parent 7)
  (unrealized (4 0) (4 1))
  (dead)
  (comment "empty cohort"))

(defskeleton dh_sig2
  (vars (k-magic k-magic-0 skey) (n group group-0 text)
    (a b a-0 b-0 name) (y x alpha x-0 rndx))
  (defstrand init 5 (k-magic k-magic) (n n) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (x x) (y y))
  (defstrand group-init 1 (k-magic k-magic) (group group) (alpha alpha))
  (defstrand resp 3 (k-magic k-magic) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (y y) (x x))
  (deflistener (exp (gen) (mul y x alpha)))
  (defstrand init 2 (k-magic k-magic-0) (group group-0) (a a-0) (b b-0)
    (g (exp (gen) (mul y x alpha (rec x-0)))) (x x-0))
  (precedes ((0 1) (2 0)) ((1 0) (0 0)) ((2 2) (0 2)) ((2 2) (4 0))
    ((3 1) (0 4)) ((4 1) (3 0)))
  (non-orig k-magic k-magic-0 (privk a) (privk b))
  (uniq-gen n y x alpha x-0)
  (absent (y x))
  (operation nonce-test (added-strand init 2)
    (exp (gen) (mul y x alpha)) (3 0))
  (traces
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (send (enc a b group (exp (gen) (mul x alpha)) (privk a)))
      (recv
        (enc a b group (exp (gen) (mul y alpha))
          (exp (gen) (mul x alpha)) (privk b)))
      (send (enc n (exp (gen) (mul y x alpha)))) (recv n))
    ((send (enc "Group id" group (exp (gen) alpha) k-magic)))
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (recv (enc a b group (exp (gen) (mul x alpha)) (privk a)))
      (send
        (enc a b group (exp (gen) (mul y alpha))
          (exp (gen) (mul x alpha)) (privk b))))
    ((recv (exp (gen) (mul y x alpha)))
      (send (exp (gen) (mul y x alpha))))
    ((recv
       (enc "Group id" group-0 (exp (gen) (mul y x alpha (rec x-0)))
         k-magic-0))
      (send
        (enc a-0 b-0 group-0 (exp (gen) (mul y x alpha)) (privk a-0)))))
  (label 12)
  (parent 7)
  (unrealized (4 0))
  (dead)
  (comment "empty cohort"))

(defskeleton dh_sig2
  (vars (k-magic skey) (n group text) (a b name) (y x alpha rndx))
  (defstrand init 5 (k-magic k-magic) (n n) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (x x) (y y))
  (defstrand group-init 1 (k-magic k-magic) (group group) (alpha alpha))
  (defstrand resp 3 (k-magic k-magic) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (y y) (x x))
  (deflistener (exp (gen) (mul y x alpha)))
  (deflistener (cat (exp (gen) (mul y x)) alpha))
  (precedes ((0 1) (2 0)) ((1 0) (0 0)) ((2 2) (0 2)) ((2 2) (4 0))
    ((3 1) (0 4)) ((4 1) (3 0)))
  (non-orig k-magic (privk a) (privk b))
  (uniq-gen n y x alpha)
  (absent (y x))
  (operation nonce-test
    (added-listener (cat (exp (gen) (mul y x)) alpha))
    (exp (gen) (mul y x alpha)) (3 0))
  (traces
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (send (enc a b group (exp (gen) (mul x alpha)) (privk a)))
      (recv
        (enc a b group (exp (gen) (mul y alpha))
          (exp (gen) (mul x alpha)) (privk b)))
      (send (enc n (exp (gen) (mul y x alpha)))) (recv n))
    ((send (enc "Group id" group (exp (gen) alpha) k-magic)))
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (recv (enc a b group (exp (gen) (mul x alpha)) (privk a)))
      (send
        (enc a b group (exp (gen) (mul y alpha))
          (exp (gen) (mul x alpha)) (privk b))))
    ((recv (exp (gen) (mul y x alpha)))
      (send (exp (gen) (mul y x alpha))))
    ((recv (cat (exp (gen) (mul y x)) alpha))
      (send (cat (exp (gen) (mul y x)) alpha))))
  (label 13)
  (parent 7)
  (unrealized (4 0))
  (dead)
  (comment "empty cohort"))

(defskeleton dh_sig2
  (vars (k-magic skey) (n group text) (a b name) (y x alpha rndx))
  (defstrand init 5 (k-magic k-magic) (n n) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (x x) (y y))
  (defstrand group-init 1 (k-magic k-magic) (group group) (alpha alpha))
  (defstrand resp 3 (k-magic k-magic) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (y y) (x x))
  (deflistener (exp (gen) (mul y x alpha)))
  (deflistener (cat (exp (gen) (mul y alpha)) x))
  (precedes ((0 1) (2 0)) ((1 0) (0 0)) ((2 2) (0 2)) ((2 2) (4 0))
    ((3 1) (0 4)) ((4 1) (3 0)))
  (non-orig k-magic (privk a) (privk b))
  (uniq-gen n y x alpha)
  (absent (y x))
  (operation nonce-test
    (added-listener (cat (exp (gen) (mul y alpha)) x))
    (exp (gen) (mul y x alpha)) (3 0))
  (traces
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (send (enc a b group (exp (gen) (mul x alpha)) (privk a)))
      (recv
        (enc a b group (exp (gen) (mul y alpha))
          (exp (gen) (mul x alpha)) (privk b)))
      (send (enc n (exp (gen) (mul y x alpha)))) (recv n))
    ((send (enc "Group id" group (exp (gen) alpha) k-magic)))
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (recv (enc a b group (exp (gen) (mul x alpha)) (privk a)))
      (send
        (enc a b group (exp (gen) (mul y alpha))
          (exp (gen) (mul x alpha)) (privk b))))
    ((recv (exp (gen) (mul y x alpha)))
      (send (exp (gen) (mul y x alpha))))
    ((recv (cat (exp (gen) (mul y alpha)) x))
      (send (cat (exp (gen) (mul y alpha)) x))))
  (label 14)
  (parent 7)
  (unrealized (4 0))
  (dead)
  (comment "empty cohort"))

(defskeleton dh_sig2
  (vars (k-magic skey) (n group text) (a b name) (y x alpha rndx))
  (defstrand init 5 (k-magic k-magic) (n n) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (x x) (y y))
  (defstrand group-init 1 (k-magic k-magic) (group group) (alpha alpha))
  (defstrand resp 3 (k-magic k-magic) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (y y) (x x))
  (deflistener (exp (gen) (mul y x alpha)))
  (deflistener (cat (exp (gen) (mul x alpha)) y))
  (precedes ((0 1) (2 0)) ((1 0) (0 0)) ((2 2) (0 2)) ((2 2) (4 0))
    ((3 1) (0 4)) ((4 1) (3 0)))
  (non-orig k-magic (privk a) (privk b))
  (uniq-gen n y x alpha)
  (absent (y x))
  (operation nonce-test
    (added-listener (cat (exp (gen) (mul x alpha)) y))
    (exp (gen) (mul y x alpha)) (3 0))
  (traces
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (send (enc a b group (exp (gen) (mul x alpha)) (privk a)))
      (recv
        (enc a b group (exp (gen) (mul y alpha))
          (exp (gen) (mul x alpha)) (privk b)))
      (send (enc n (exp (gen) (mul y x alpha)))) (recv n))
    ((send (enc "Group id" group (exp (gen) alpha) k-magic)))
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (recv (enc a b group (exp (gen) (mul x alpha)) (privk a)))
      (send
        (enc a b group (exp (gen) (mul y alpha))
          (exp (gen) (mul x alpha)) (privk b))))
    ((recv (exp (gen) (mul y x alpha)))
      (send (exp (gen) (mul y x alpha))))
    ((recv (cat (exp (gen) (mul x alpha)) y))
      (send (cat (exp (gen) (mul x alpha)) y))))
  (label 15)
  (parent 7)
  (unrealized (4 0))
  (dead)
  (comment "empty cohort"))

(defskeleton dh_sig2
  (vars (k-magic k-magic-0 k-magic-1 skey) (n group group-0 text)
    (a b a-0 b-0 name) (y alpha x alpha-0 y-0 rndx) (x-0 expt))
  (defstrand init 5 (k-magic k-magic) (n n) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (x x) (y (mul y (rec alpha) alpha-0)))
  (defstrand group-init 1 (k-magic k-magic) (group group) (alpha alpha))
  (defstrand resp 3 (k-magic k-magic-0) (group group) (a a) (b b)
    (g (exp (gen) alpha-0)) (y y) (x (mul alpha x (rec alpha-0))))
  (defstrand group-init 1 (k-magic k-magic-0) (group group)
    (alpha alpha-0))
  (deflistener (exp (gen) (mul y x alpha-0)))
  (defstrand resp 3 (k-magic k-magic-1) (group group-0) (a a-0) (b b-0)
    (g (exp (gen) (mul y x alpha-0 (rec y-0)))) (y y-0) (x x-0))
  (precedes ((0 1) (2 0)) ((1 0) (0 0)) ((2 2) (0 2)) ((2 2) (5 0))
    ((3 0) (2 0)) ((4 1) (0 4)) ((5 2) (4 0)))
  (non-orig k-magic k-magic-0 k-magic-1 (privk a) (privk b))
  (uniq-gen n y alpha x alpha-0 y-0)
  (absent (y (mul alpha x (rec alpha-0))) (y-0 x-0))
  (operation nonce-test (added-strand resp 3)
    (exp (gen) (mul y x alpha-0)) (4 0))
  (traces
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (send (enc a b group (exp (gen) (mul alpha x)) (privk a)))
      (recv
        (enc a b group (exp (gen) (mul y alpha-0))
          (exp (gen) (mul alpha x)) (privk b)))
      (send (enc n (exp (gen) (mul y x alpha-0)))) (recv n))
    ((send (enc "Group id" group (exp (gen) alpha) k-magic)))
    ((recv (enc "Group id" group (exp (gen) alpha-0) k-magic-0))
      (recv (enc a b group (exp (gen) (mul alpha x)) (privk a)))
      (send
        (enc a b group (exp (gen) (mul y alpha-0))
          (exp (gen) (mul alpha x)) (privk b))))
    ((send (enc "Group id" group (exp (gen) alpha-0) k-magic-0)))
    ((recv (exp (gen) (mul y x alpha-0)))
      (send (exp (gen) (mul y x alpha-0))))
    ((recv
       (enc "Group id" group-0 (exp (gen) (mul y x alpha-0 (rec y-0)))
         k-magic-1))
      (recv
        (enc a-0 b-0 group-0 (exp (gen) (mul y x alpha-0 (rec y-0) x-0))
          (privk a-0)))
      (send
        (enc a-0 b-0 group-0 (exp (gen) (mul y x alpha-0))
          (exp (gen) (mul y x alpha-0 (rec y-0) x-0)) (privk b-0)))))
  (label 16)
  (parent 9)
  (unrealized (5 0) (5 1))
  (dead)
  (comment "empty cohort"))

(defskeleton dh_sig2
  (vars (k-magic k-magic-0 k-magic-1 skey) (n group group-0 text)
    (a b a-0 b-0 name) (y alpha x alpha-0 x-0 rndx))
  (defstrand init 5 (k-magic k-magic) (n n) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (x x) (y (mul y (rec alpha) alpha-0)))
  (defstrand group-init 1 (k-magic k-magic) (group group) (alpha alpha))
  (defstrand resp 3 (k-magic k-magic-0) (group group) (a a) (b b)
    (g (exp (gen) alpha-0)) (y y) (x (mul alpha x (rec alpha-0))))
  (defstrand group-init 1 (k-magic k-magic-0) (group group)
    (alpha alpha-0))
  (deflistener (exp (gen) (mul y x alpha-0)))
  (defstrand init 2 (k-magic k-magic-1) (group group-0) (a a-0) (b b-0)
    (g (exp (gen) (mul y x alpha-0 (rec x-0)))) (x x-0))
  (precedes ((0 1) (2 0)) ((1 0) (0 0)) ((2 2) (0 2)) ((2 2) (5 0))
    ((3 0) (2 0)) ((4 1) (0 4)) ((5 1) (4 0)))
  (non-orig k-magic k-magic-0 k-magic-1 (privk a) (privk b))
  (uniq-gen n y alpha x alpha-0 x-0)
  (absent (y (mul alpha x (rec alpha-0))))
  (operation nonce-test (added-strand init 2)
    (exp (gen) (mul y x alpha-0)) (4 0))
  (traces
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (send (enc a b group (exp (gen) (mul alpha x)) (privk a)))
      (recv
        (enc a b group (exp (gen) (mul y alpha-0))
          (exp (gen) (mul alpha x)) (privk b)))
      (send (enc n (exp (gen) (mul y x alpha-0)))) (recv n))
    ((send (enc "Group id" group (exp (gen) alpha) k-magic)))
    ((recv (enc "Group id" group (exp (gen) alpha-0) k-magic-0))
      (recv (enc a b group (exp (gen) (mul alpha x)) (privk a)))
      (send
        (enc a b group (exp (gen) (mul y alpha-0))
          (exp (gen) (mul alpha x)) (privk b))))
    ((send (enc "Group id" group (exp (gen) alpha-0) k-magic-0)))
    ((recv (exp (gen) (mul y x alpha-0)))
      (send (exp (gen) (mul y x alpha-0))))
    ((recv
       (enc "Group id" group-0 (exp (gen) (mul y x alpha-0 (rec x-0)))
         k-magic-1))
      (send
        (enc a-0 b-0 group-0 (exp (gen) (mul y x alpha-0))
          (privk a-0)))))
  (label 17)
  (parent 9)
  (unrealized (5 0))
  (dead)
  (comment "empty cohort"))

(defskeleton dh_sig2
  (vars (k-magic k-magic-0 skey) (n group text) (a b name)
    (y alpha x alpha-0 rndx))
  (defstrand init 5 (k-magic k-magic) (n n) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (x x) (y (mul y (rec alpha) alpha-0)))
  (defstrand group-init 1 (k-magic k-magic) (group group) (alpha alpha))
  (defstrand resp 3 (k-magic k-magic-0) (group group) (a a) (b b)
    (g (exp (gen) alpha-0)) (y y) (x (mul alpha x (rec alpha-0))))
  (defstrand group-init 1 (k-magic k-magic-0) (group group)
    (alpha alpha-0))
  (deflistener (exp (gen) (mul y x alpha-0)))
  (deflistener (cat (exp (gen) (mul y x)) alpha-0))
  (precedes ((0 1) (2 0)) ((1 0) (0 0)) ((2 2) (0 2)) ((2 2) (5 0))
    ((3 0) (2 0)) ((4 1) (0 4)) ((5 1) (4 0)))
  (non-orig k-magic k-magic-0 (privk a) (privk b))
  (uniq-gen n y alpha x alpha-0)
  (absent (y (mul alpha x (rec alpha-0))))
  (operation nonce-test
    (added-listener (cat (exp (gen) (mul y x)) alpha-0))
    (exp (gen) (mul y x alpha-0)) (4 0))
  (traces
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (send (enc a b group (exp (gen) (mul alpha x)) (privk a)))
      (recv
        (enc a b group (exp (gen) (mul y alpha-0))
          (exp (gen) (mul alpha x)) (privk b)))
      (send (enc n (exp (gen) (mul y x alpha-0)))) (recv n))
    ((send (enc "Group id" group (exp (gen) alpha) k-magic)))
    ((recv (enc "Group id" group (exp (gen) alpha-0) k-magic-0))
      (recv (enc a b group (exp (gen) (mul alpha x)) (privk a)))
      (send
        (enc a b group (exp (gen) (mul y alpha-0))
          (exp (gen) (mul alpha x)) (privk b))))
    ((send (enc "Group id" group (exp (gen) alpha-0) k-magic-0)))
    ((recv (exp (gen) (mul y x alpha-0)))
      (send (exp (gen) (mul y x alpha-0))))
    ((recv (cat (exp (gen) (mul y x)) alpha-0))
      (send (cat (exp (gen) (mul y x)) alpha-0))))
  (label 18)
  (parent 9)
  (unrealized (5 0))
  (dead)
  (comment "empty cohort"))

(defskeleton dh_sig2
  (vars (k-magic k-magic-0 skey) (n group text) (a b name)
    (y alpha x alpha-0 rndx))
  (defstrand init 5 (k-magic k-magic) (n n) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (x x) (y (mul y (rec alpha) alpha-0)))
  (defstrand group-init 1 (k-magic k-magic) (group group) (alpha alpha))
  (defstrand resp 3 (k-magic k-magic-0) (group group) (a a) (b b)
    (g (exp (gen) alpha-0)) (y y) (x (mul alpha x (rec alpha-0))))
  (defstrand group-init 1 (k-magic k-magic-0) (group group)
    (alpha alpha-0))
  (deflistener (exp (gen) (mul y x alpha-0)))
  (deflistener (cat (exp (gen) (mul y alpha-0)) x))
  (precedes ((0 1) (2 0)) ((1 0) (0 0)) ((2 2) (0 2)) ((2 2) (5 0))
    ((3 0) (2 0)) ((4 1) (0 4)) ((5 1) (4 0)))
  (non-orig k-magic k-magic-0 (privk a) (privk b))
  (uniq-gen n y alpha x alpha-0)
  (absent (y (mul alpha x (rec alpha-0))))
  (operation nonce-test
    (added-listener (cat (exp (gen) (mul y alpha-0)) x))
    (exp (gen) (mul y x alpha-0)) (4 0))
  (traces
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (send (enc a b group (exp (gen) (mul alpha x)) (privk a)))
      (recv
        (enc a b group (exp (gen) (mul y alpha-0))
          (exp (gen) (mul alpha x)) (privk b)))
      (send (enc n (exp (gen) (mul y x alpha-0)))) (recv n))
    ((send (enc "Group id" group (exp (gen) alpha) k-magic)))
    ((recv (enc "Group id" group (exp (gen) alpha-0) k-magic-0))
      (recv (enc a b group (exp (gen) (mul alpha x)) (privk a)))
      (send
        (enc a b group (exp (gen) (mul y alpha-0))
          (exp (gen) (mul alpha x)) (privk b))))
    ((send (enc "Group id" group (exp (gen) alpha-0) k-magic-0)))
    ((recv (exp (gen) (mul y x alpha-0)))
      (send (exp (gen) (mul y x alpha-0))))
    ((recv (cat (exp (gen) (mul y alpha-0)) x))
      (send (cat (exp (gen) (mul y alpha-0)) x))))
  (label 19)
  (parent 9)
  (unrealized (5 0))
  (dead)
  (comment "empty cohort"))

(defskeleton dh_sig2
  (vars (k-magic k-magic-0 skey) (n group text) (a b name)
    (y alpha x alpha-0 rndx))
  (defstrand init 5 (k-magic k-magic) (n n) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (x x) (y (mul y (rec alpha) alpha-0)))
  (defstrand group-init 1 (k-magic k-magic) (group group) (alpha alpha))
  (defstrand resp 3 (k-magic k-magic-0) (group group) (a a) (b b)
    (g (exp (gen) alpha-0)) (y y) (x (mul alpha x (rec alpha-0))))
  (defstrand group-init 1 (k-magic k-magic-0) (group group)
    (alpha alpha-0))
  (deflistener (exp (gen) (mul y x alpha-0)))
  (deflistener (cat (exp (gen) (mul x alpha-0)) y))
  (precedes ((0 1) (2 0)) ((1 0) (0 0)) ((2 2) (0 2)) ((2 2) (5 0))
    ((3 0) (2 0)) ((4 1) (0 4)) ((5 1) (4 0)))
  (non-orig k-magic k-magic-0 (privk a) (privk b))
  (uniq-gen n y alpha x alpha-0)
  (absent (y (mul alpha x (rec alpha-0))))
  (operation nonce-test
    (added-listener (cat (exp (gen) (mul x alpha-0)) y))
    (exp (gen) (mul y x alpha-0)) (4 0))
  (traces
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (send (enc a b group (exp (gen) (mul alpha x)) (privk a)))
      (recv
        (enc a b group (exp (gen) (mul y alpha-0))
          (exp (gen) (mul alpha x)) (privk b)))
      (send (enc n (exp (gen) (mul y x alpha-0)))) (recv n))
    ((send (enc "Group id" group (exp (gen) alpha) k-magic)))
    ((recv (enc "Group id" group (exp (gen) alpha-0) k-magic-0))
      (recv (enc a b group (exp (gen) (mul alpha x)) (privk a)))
      (send
        (enc a b group (exp (gen) (mul y alpha-0))
          (exp (gen) (mul alpha x)) (privk b))))
    ((send (enc "Group id" group (exp (gen) alpha-0) k-magic-0)))
    ((recv (exp (gen) (mul y x alpha-0)))
      (send (exp (gen) (mul y x alpha-0))))
    ((recv (cat (exp (gen) (mul x alpha-0)) y))
      (send (cat (exp (gen) (mul x alpha-0)) y))))
  (label 20)
  (parent 9)
  (unrealized (5 0))
  (dead)
  (comment "empty cohort"))

(comment "Nothing left to do")

(defprotocol dh_sig2 diffie-hellman
  (defrole group-init
    (vars (alpha rndx) (k-magic skey) (group text))
    (trace (send (enc "Group id" group (exp (gen) alpha) k-magic)))
    (uniq-gen alpha))
  (defrole init
    (vars (x rndx) (y expt) (g base) (k-magic skey) (n group text)
      (a b name))
    (trace (recv (enc "Group id" group g k-magic))
      (send (enc a b group (exp g x) (privk a)))
      (recv (enc a b group (exp g y) (exp g x) (privk b)))
      (send (enc n (exp g (mul x y)))) (recv n))
    (non-orig k-magic)
    (uniq-gen n x))
  (defrole resp
    (vars (y rndx) (x expt) (g base) (k-magic skey) (n group text)
      (a b name))
    (trace (recv (enc "Group id" group g k-magic))
      (recv (enc a b group (exp g x) (privk a)))
      (send (enc a b group (exp g y) (exp g x) (privk b)))
      (recv (enc n (exp g (mul y x)))) (send n))
    (non-orig k-magic)
    (uniq-gen y)
    (absent (y x)))
  (defgenrule neqRl_indx
    (forall ((x indx)) (implies (fact neq x x) (false))))
  (defgenrule neqRl_strd
    (forall ((x strd)) (implies (fact neq x x) (false))))
  (defgenrule neqRl_mesg
    (forall ((x mesg)) (implies (fact neq x x) (false))))
  (defgenrule no-interruption
    (forall ((z0 z1 z2 strd) (i0 i1 i2 indx))
      (implies
        (and (leads-to z0 i0 z2 i2) (trans z1 i1)
          (same-locn z0 i0 z1 i1) (prec z0 i0 z1 i1) (prec z1 i1 z2 i2))
        (false))))
  (defgenrule cakeRule
    (forall ((z0 z1 z2 strd) (i0 i1 i2 indx))
      (implies
        (and (trans z0 i0) (trans z1 i1) (leads-to z0 i0 z1 i1)
          (leads-to z0 i0 z2 i2) (prec z1 i1 z2 i2)) (false))))
  (defgenrule scissorsRule
    (forall ((z0 z1 z2 strd) (i0 i1 i2 indx))
      (implies
        (and (trans z0 i0) (trans z1 i1) (trans z2 i2)
          (leads-to z0 i0 z1 i1) (leads-to z0 i0 z2 i2))
        (and (= z1 z2) (= i1 i2)))))
  (defgenrule invShearsRule
    (forall ((z0 z1 z2 strd) (i0 i1 i2 indx))
      (implies
        (and (trans z0 i0) (trans z1 i1) (same-locn z0 i0 z1 i1)
          (leads-to z1 i1 z2 i2) (prec z0 i0 z2 i2))
        (or (and (= z0 z1) (= i0 i1)) (prec z0 i0 z1 i1)))))
  (defgenrule shearsRule
    (forall ((z0 z1 z2 strd) (i0 i1 i2 indx))
      (implies
        (and (trans z0 i0) (trans z1 i1) (trans z2 i2)
          (leads-to z0 i0 z1 i1) (same-locn z0 i0 z2 i2)
          (prec z0 i0 z2 i2))
        (or (and (= z1 z2) (= i1 i2)) (prec z1 i1 z2 i2))))))

(defskeleton dh_sig2
  (vars (k-magic skey) (n group text) (a b name) (g base) (y rndx)
    (x expt))
  (defstrand resp 5 (k-magic k-magic) (n n) (group group) (a a) (b b)
    (g g) (y y) (x x))
  (non-orig k-magic (privk a) (privk b))
  (uniq-gen y)
  (absent (y x))
  (traces
    ((recv (enc "Group id" group g k-magic))
      (recv (enc a b group (exp g x) (privk a)))
      (send (enc a b group (exp g y) (exp g x) (privk b)))
      (recv (enc n (exp g (mul y x)))) (send n)))
  (label 21)
  (unrealized (0 0) (0 1))
  (origs)
  (comment "1 in cohort - 1 not yet seen"))

(defskeleton dh_sig2
  (vars (k-magic skey) (n group text) (a b name) (y rndx) (x expt)
    (alpha rndx))
  (defstrand resp 5 (k-magic k-magic) (n n) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (y y) (x x))
  (defstrand group-init 1 (k-magic k-magic) (group group) (alpha alpha))
  (precedes ((1 0) (0 0)))
  (non-orig k-magic (privk a) (privk b))
  (uniq-gen y alpha)
  (absent (y x))
  (operation encryption-test (added-strand group-init 1)
    (enc "Group id" group (exp (gen) alpha) k-magic) (0 0))
  (traces
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (recv (enc a b group (exp (gen) (mul x alpha)) (privk a)))
      (send
        (enc a b group (exp (gen) (mul y alpha))
          (exp (gen) (mul x alpha)) (privk b)))
      (recv (enc n (exp (gen) (mul y x alpha)))) (send n))
    ((send (enc "Group id" group (exp (gen) alpha) k-magic))))
  (label 22)
  (parent 21)
  (unrealized (0 1))
  (comment "1 in cohort - 1 not yet seen"))

(defskeleton dh_sig2
  (vars (k-magic k-magic-0 skey) (n group text) (a b name) (y rndx)
    (x expt) (alpha x-0 rndx))
  (defstrand resp 5 (k-magic k-magic) (n n) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (y y) (x x))
  (defstrand group-init 1 (k-magic k-magic) (group group) (alpha alpha))
  (defstrand init 2 (k-magic k-magic-0) (group group) (a a) (b b)
    (g (exp (gen) (mul x alpha (rec x-0)))) (x x-0))
  (precedes ((1 0) (0 0)) ((1 0) (2 0)) ((2 1) (0 1)))
  (non-orig k-magic k-magic-0 (privk a) (privk b))
  (uniq-gen y alpha x-0)
  (absent (y x))
  (operation encryption-test (added-strand init 2)
    (enc a b group (exp (gen) (mul x alpha)) (privk a)) (0 1))
  (traces
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (recv (enc a b group (exp (gen) (mul x alpha)) (privk a)))
      (send
        (enc a b group (exp (gen) (mul y alpha))
          (exp (gen) (mul x alpha)) (privk b)))
      (recv (enc n (exp (gen) (mul y x alpha)))) (send n))
    ((send (enc "Group id" group (exp (gen) alpha) k-magic)))
    ((recv
       (enc "Group id" group (exp (gen) (mul x alpha (rec x-0)))
         k-magic-0))
      (send (enc a b group (exp (gen) (mul x alpha)) (privk a)))))
  (label 23)
  (parent 22)
  (unrealized (2 0))
  (comment "2 in cohort - 2 not yet seen"))

(defskeleton dh_sig2
  (vars (k-magic skey) (n group text) (a b name) (y x alpha rndx))
  (defstrand resp 5 (k-magic k-magic) (n n) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (y y) (x x))
  (defstrand group-init 1 (k-magic k-magic) (group group) (alpha alpha))
  (defstrand init 2 (k-magic k-magic) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (x x))
  (precedes ((1 0) (0 0)) ((1 0) (2 0)) ((2 1) (0 1)))
  (non-orig k-magic (privk a) (privk b))
  (uniq-gen y x alpha)
  (absent (y x))
  (operation encryption-test (displaced 3 1 group-init 1)
    (enc "Group id" group (exp (gen) alpha-0) k-magic-0) (2 0))
  (traces
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (recv (enc a b group (exp (gen) (mul x alpha)) (privk a)))
      (send
        (enc a b group (exp (gen) (mul y alpha))
          (exp (gen) (mul x alpha)) (privk b)))
      (recv (enc n (exp (gen) (mul y x alpha)))) (send n))
    ((send (enc "Group id" group (exp (gen) alpha) k-magic)))
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (send (enc a b group (exp (gen) (mul x alpha)) (privk a)))))
  (label 24)
  (parent 23)
  (unrealized (0 3))
  (comment "3 in cohort - 3 not yet seen"))

(defskeleton dh_sig2
  (vars (k-magic k-magic-0 skey) (n group text) (a b name)
    (y alpha x alpha-0 rndx))
  (defstrand resp 5 (k-magic k-magic) (n n) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (y y) (x (mul (rec alpha) x alpha-0)))
  (defstrand group-init 1 (k-magic k-magic) (group group) (alpha alpha))
  (defstrand init 2 (k-magic k-magic-0) (group group) (a a) (b b)
    (g (exp (gen) alpha-0)) (x x))
  (defstrand group-init 1 (k-magic k-magic-0) (group group)
    (alpha alpha-0))
  (precedes ((1 0) (0 0)) ((1 0) (2 0)) ((2 1) (0 1)) ((3 0) (2 0)))
  (non-orig k-magic k-magic-0 (privk a) (privk b))
  (uniq-gen y alpha x alpha-0)
  (absent (y (mul (rec alpha) x alpha-0)))
  (operation encryption-test (added-strand group-init 1)
    (enc "Group id" group (exp (gen) alpha-0) k-magic-0) (2 0))
  (traces
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (recv (enc a b group (exp (gen) (mul x alpha-0)) (privk a)))
      (send
        (enc a b group (exp (gen) (mul y alpha))
          (exp (gen) (mul x alpha-0)) (privk b)))
      (recv (enc n (exp (gen) (mul y x alpha-0)))) (send n))
    ((send (enc "Group id" group (exp (gen) alpha) k-magic)))
    ((recv (enc "Group id" group (exp (gen) alpha-0) k-magic-0))
      (send (enc a b group (exp (gen) (mul x alpha-0)) (privk a))))
    ((send (enc "Group id" group (exp (gen) alpha-0) k-magic-0))))
  (label 25)
  (parent 23)
  (unrealized (0 3))
  (comment "3 in cohort - 3 not yet seen"))

(defskeleton dh_sig2
  (vars (k-magic skey) (n group text) (a b name) (alpha y x rndx))
  (defstrand resp 5 (k-magic k-magic) (n n) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (y y) (x x))
  (defstrand group-init 1 (k-magic k-magic) (group group) (alpha alpha))
  (defstrand init 4 (k-magic k-magic) (n n) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (x x) (y y))
  (precedes ((0 2) (2 2)) ((1 0) (0 0)) ((1 0) (2 0)) ((2 1) (0 1))
    ((2 3) (0 3)))
  (non-orig k-magic (privk a) (privk b))
  (uniq-gen n alpha y x)
  (absent (y x))
  (operation encryption-test (displaced 2 3 init 4)
    (enc n (exp (gen) (mul y-0 x-0 alpha))) (0 3))
  (traces
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (recv (enc a b group (exp (gen) (mul alpha x)) (privk a)))
      (send
        (enc a b group (exp (gen) (mul alpha y))
          (exp (gen) (mul alpha x)) (privk b)))
      (recv (enc n (exp (gen) (mul alpha y x)))) (send n))
    ((send (enc "Group id" group (exp (gen) alpha) k-magic)))
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (send (enc a b group (exp (gen) (mul alpha x)) (privk a)))
      (recv
        (enc a b group (exp (gen) (mul alpha y))
          (exp (gen) (mul alpha x)) (privk b)))
      (send (enc n (exp (gen) (mul alpha y x))))))
  (label 26)
  (parent 24)
  (unrealized)
  (shape)
  (maps
    ((0)
      ((a a) (b b) (y y) (x x) (g (exp (gen) alpha)) (k-magic k-magic)
        (n n) (group group))))
  (origs))

(defskeleton dh_sig2
  (vars (k-magic k-magic-0 skey) (n group group-0 text)
    (a b a-0 b-0 name) (y x alpha x-0 rndx) (y-0 expt))
  (defstrand resp 5 (k-magic k-magic) (n n) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (y y) (x x))
  (defstrand group-init 1 (k-magic k-magic) (group group) (alpha alpha))
  (defstrand init 2 (k-magic k-magic) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (x x))
  (defstrand init 4 (k-magic k-magic-0) (n n) (group group-0) (a a-0)
    (b b-0) (g (exp (gen) (mul y x alpha (rec x-0) (rec y-0)))) (x x-0)
    (y y-0))
  (precedes ((0 2) (3 0)) ((1 0) (0 0)) ((1 0) (2 0)) ((2 1) (0 1))
    ((3 3) (0 3)))
  (non-orig k-magic k-magic-0 (privk a) (privk b))
  (uniq-gen n y x alpha x-0)
  (absent (y x))
  (operation encryption-test (added-strand init 4)
    (enc n (exp (gen) (mul y x alpha))) (0 3))
  (traces
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (recv (enc a b group (exp (gen) (mul x alpha)) (privk a)))
      (send
        (enc a b group (exp (gen) (mul y alpha))
          (exp (gen) (mul x alpha)) (privk b)))
      (recv (enc n (exp (gen) (mul y x alpha)))) (send n))
    ((send (enc "Group id" group (exp (gen) alpha) k-magic)))
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (send (enc a b group (exp (gen) (mul x alpha)) (privk a))))
    ((recv
       (enc "Group id" group-0
         (exp (gen) (mul y x alpha (rec x-0) (rec y-0))) k-magic-0))
      (send
        (enc a-0 b-0 group-0 (exp (gen) (mul y x alpha (rec y-0)))
          (privk a-0)))
      (recv
        (enc a-0 b-0 group-0 (exp (gen) (mul y x alpha (rec x-0)))
          (exp (gen) (mul y x alpha (rec y-0))) (privk b-0)))
      (send (enc n (exp (gen) (mul y x alpha))))))
  (label 27)
  (parent 24)
  (unrealized (3 0))
  (comment "2 in cohort - 2 not yet seen"))

(defskeleton dh_sig2
  (vars (k-magic skey) (n group text) (a b name) (y x alpha rndx))
  (defstrand resp 5 (k-magic k-magic) (n n) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (y y) (x x))
  (defstrand group-init 1 (k-magic k-magic) (group group) (alpha alpha))
  (defstrand init 2 (k-magic k-magic) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (x x))
  (deflistener (exp (gen) (mul y x alpha)))
  (precedes ((0 2) (3 0)) ((1 0) (0 0)) ((1 0) (2 0)) ((2 1) (0 1))
    ((3 1) (0 3)))
  (non-orig k-magic (privk a) (privk b))
  (uniq-gen y x alpha)
  (absent (y x))
  (operation encryption-test
    (added-listener (exp (gen) (mul y x alpha)))
    (enc n (exp (gen) (mul y x alpha))) (0 3))
  (traces
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (recv (enc a b group (exp (gen) (mul x alpha)) (privk a)))
      (send
        (enc a b group (exp (gen) (mul y alpha))
          (exp (gen) (mul x alpha)) (privk b)))
      (recv (enc n (exp (gen) (mul y x alpha)))) (send n))
    ((send (enc "Group id" group (exp (gen) alpha) k-magic)))
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (send (enc a b group (exp (gen) (mul x alpha)) (privk a))))
    ((recv (exp (gen) (mul y x alpha)))
      (send (exp (gen) (mul y x alpha)))))
  (label 28)
  (parent 24)
  (unrealized (3 0))
  (comment "5 in cohort - 5 not yet seen"))

(defskeleton dh_sig2
  (vars (k-magic k-magic-0 skey) (n group text) (a b name)
    (alpha alpha-0 y x rndx))
  (defstrand resp 5 (k-magic k-magic) (n n) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (y y) (x (mul (rec alpha) alpha-0 x)))
  (defstrand group-init 1 (k-magic k-magic) (group group) (alpha alpha))
  (defstrand group-init 1 (k-magic k-magic-0) (group group)
    (alpha alpha-0))
  (defstrand init 4 (k-magic k-magic-0) (n n) (group group) (a a) (b b)
    (g (exp (gen) alpha-0)) (x x) (y y))
  (precedes ((0 2) (3 2)) ((1 0) (0 0)) ((1 0) (3 0)) ((2 0) (3 0))
    ((3 1) (0 1)) ((3 3) (0 3)))
  (non-orig k-magic k-magic-0 (privk a) (privk b))
  (uniq-gen n alpha alpha-0 y x)
  (absent (y (mul (rec alpha) alpha-0 x)))
  (operation encryption-test (displaced 2 4 init 4)
    (enc n (exp (gen) (mul y-0 x-0 alpha-0))) (0 3))
  (traces
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (recv (enc a b group (exp (gen) (mul alpha-0 x)) (privk a)))
      (send
        (enc a b group (exp (gen) (mul alpha y))
          (exp (gen) (mul alpha-0 x)) (privk b)))
      (recv (enc n (exp (gen) (mul alpha-0 y x)))) (send n))
    ((send (enc "Group id" group (exp (gen) alpha) k-magic)))
    ((send (enc "Group id" group (exp (gen) alpha-0) k-magic-0)))
    ((recv (enc "Group id" group (exp (gen) alpha-0) k-magic-0))
      (send (enc a b group (exp (gen) (mul alpha-0 x)) (privk a)))
      (recv
        (enc a b group (exp (gen) (mul alpha-0 y))
          (exp (gen) (mul alpha-0 x)) (privk b)))
      (send (enc n (exp (gen) (mul alpha-0 y x))))))
  (label 29)
  (parent 25)
  (unrealized (3 2))
  (dead)
  (comment "empty cohort"))

(defskeleton dh_sig2
  (vars (k-magic k-magic-0 k-magic-1 skey) (n group group-0 text)
    (a b a-0 b-0 name) (y alpha x alpha-0 x-0 rndx) (y-0 expt))
  (defstrand resp 5 (k-magic k-magic) (n n) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (y y) (x (mul (rec alpha) x alpha-0)))
  (defstrand group-init 1 (k-magic k-magic) (group group) (alpha alpha))
  (defstrand init 2 (k-magic k-magic-0) (group group) (a a) (b b)
    (g (exp (gen) alpha-0)) (x x))
  (defstrand group-init 1 (k-magic k-magic-0) (group group)
    (alpha alpha-0))
  (defstrand init 4 (k-magic k-magic-1) (n n) (group group-0) (a a-0)
    (b b-0) (g (exp (gen) (mul y x alpha-0 (rec x-0) (rec y-0))))
    (x x-0) (y y-0))
  (precedes ((0 2) (4 0)) ((1 0) (0 0)) ((1 0) (2 0)) ((2 1) (0 1))
    ((3 0) (2 0)) ((4 3) (0 3)))
  (non-orig k-magic k-magic-0 k-magic-1 (privk a) (privk b))
  (uniq-gen n y alpha x alpha-0 x-0)
  (absent (y (mul (rec alpha) x alpha-0)))
  (operation encryption-test (added-strand init 4)
    (enc n (exp (gen) (mul y x alpha-0))) (0 3))
  (traces
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (recv (enc a b group (exp (gen) (mul x alpha-0)) (privk a)))
      (send
        (enc a b group (exp (gen) (mul y alpha))
          (exp (gen) (mul x alpha-0)) (privk b)))
      (recv (enc n (exp (gen) (mul y x alpha-0)))) (send n))
    ((send (enc "Group id" group (exp (gen) alpha) k-magic)))
    ((recv (enc "Group id" group (exp (gen) alpha-0) k-magic-0))
      (send (enc a b group (exp (gen) (mul x alpha-0)) (privk a))))
    ((send (enc "Group id" group (exp (gen) alpha-0) k-magic-0)))
    ((recv
       (enc "Group id" group-0
         (exp (gen) (mul y x alpha-0 (rec x-0) (rec y-0))) k-magic-1))
      (send
        (enc a-0 b-0 group-0 (exp (gen) (mul y x alpha-0 (rec y-0)))
          (privk a-0)))
      (recv
        (enc a-0 b-0 group-0 (exp (gen) (mul y x alpha-0 (rec x-0)))
          (exp (gen) (mul y x alpha-0 (rec y-0))) (privk b-0)))
      (send (enc n (exp (gen) (mul y x alpha-0))))))
  (label 30)
  (parent 25)
  (unrealized (4 0))
  (comment "3 in cohort - 3 not yet seen"))

(defskeleton dh_sig2
  (vars (k-magic k-magic-0 skey) (n group text) (a b name)
    (y alpha x alpha-0 rndx))
  (defstrand resp 5 (k-magic k-magic) (n n) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (y y) (x (mul (rec alpha) x alpha-0)))
  (defstrand group-init 1 (k-magic k-magic) (group group) (alpha alpha))
  (defstrand init 2 (k-magic k-magic-0) (group group) (a a) (b b)
    (g (exp (gen) alpha-0)) (x x))
  (defstrand group-init 1 (k-magic k-magic-0) (group group)
    (alpha alpha-0))
  (deflistener (exp (gen) (mul y x alpha-0)))
  (precedes ((0 2) (4 0)) ((1 0) (0 0)) ((1 0) (2 0)) ((2 1) (0 1))
    ((3 0) (2 0)) ((4 1) (0 3)))
  (non-orig k-magic k-magic-0 (privk a) (privk b))
  (uniq-gen y alpha x alpha-0)
  (absent (y (mul (rec alpha) x alpha-0)))
  (operation encryption-test
    (added-listener (exp (gen) (mul y x alpha-0)))
    (enc n (exp (gen) (mul y x alpha-0))) (0 3))
  (traces
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (recv (enc a b group (exp (gen) (mul x alpha-0)) (privk a)))
      (send
        (enc a b group (exp (gen) (mul y alpha))
          (exp (gen) (mul x alpha-0)) (privk b)))
      (recv (enc n (exp (gen) (mul y x alpha-0)))) (send n))
    ((send (enc "Group id" group (exp (gen) alpha) k-magic)))
    ((recv (enc "Group id" group (exp (gen) alpha-0) k-magic-0))
      (send (enc a b group (exp (gen) (mul x alpha-0)) (privk a))))
    ((send (enc "Group id" group (exp (gen) alpha-0) k-magic-0)))
    ((recv (exp (gen) (mul y x alpha-0)))
      (send (exp (gen) (mul y x alpha-0)))))
  (label 31)
  (parent 25)
  (unrealized (4 0))
  (comment "5 in cohort - 5 not yet seen"))

(defskeleton dh_sig2
  (vars (k-magic skey) (n group text) (a b a-0 b-0 name)
    (y x x-0 alpha rndx))
  (defstrand resp 5 (k-magic k-magic) (n n) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (y y) (x x))
  (defstrand group-init 1 (k-magic k-magic) (group group) (alpha alpha))
  (defstrand init 2 (k-magic k-magic) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (x x))
  (defstrand init 4 (k-magic k-magic) (n n) (group group) (a a-0)
    (b b-0) (g (exp (gen) alpha)) (x x-0) (y (mul y x (rec x-0))))
  (precedes ((0 2) (3 0)) ((1 0) (0 0)) ((1 0) (2 0)) ((2 1) (0 1))
    ((3 3) (0 3)))
  (non-orig k-magic (privk a) (privk b))
  (uniq-gen n y x x-0 alpha)
  (absent (y x))
  (operation encryption-test (displaced 4 1 group-init 1)
    (enc "Group id" group-0 (exp (gen) alpha-0) k-magic-0) (3 0))
  (traces
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (recv (enc a b group (exp (gen) (mul x alpha)) (privk a)))
      (send
        (enc a b group (exp (gen) (mul y alpha))
          (exp (gen) (mul x alpha)) (privk b)))
      (recv (enc n (exp (gen) (mul y x alpha)))) (send n))
    ((send (enc "Group id" group (exp (gen) alpha) k-magic)))
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (send (enc a b group (exp (gen) (mul x alpha)) (privk a))))
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (send (enc a-0 b-0 group (exp (gen) (mul x-0 alpha)) (privk a-0)))
      (recv
        (enc a-0 b-0 group (exp (gen) (mul y x (rec x-0) alpha))
          (exp (gen) (mul x-0 alpha)) (privk b-0)))
      (send (enc n (exp (gen) (mul y x alpha))))))
  (label 32)
  (parent 27)
  (unrealized (3 2))
  (comment "6 in cohort - 6 not yet seen"))

(defskeleton dh_sig2
  (vars (k-magic k-magic-0 skey) (n group group-0 text)
    (a b a-0 b-0 name) (y x alpha x-0 alpha-0 rndx))
  (defstrand resp 5 (k-magic k-magic) (n n) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (y y) (x x))
  (defstrand group-init 1 (k-magic k-magic) (group group) (alpha alpha))
  (defstrand init 2 (k-magic k-magic) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (x x))
  (defstrand init 4 (k-magic k-magic-0) (n n) (group group-0) (a a-0)
    (b b-0) (g (exp (gen) alpha-0)) (x x-0)
    (y (mul y x alpha (rec x-0) (rec alpha-0))))
  (defstrand group-init 1 (k-magic k-magic-0) (group group-0)
    (alpha alpha-0))
  (precedes ((0 2) (3 0)) ((1 0) (0 0)) ((1 0) (2 0)) ((2 1) (0 1))
    ((3 3) (0 3)) ((4 0) (3 0)))
  (non-orig k-magic k-magic-0 (privk a) (privk b))
  (uniq-gen n y x alpha x-0 alpha-0)
  (absent (y x))
  (operation encryption-test (added-strand group-init 1)
    (enc "Group id" group-0 (exp (gen) alpha-0) k-magic-0) (3 0))
  (traces
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (recv (enc a b group (exp (gen) (mul x alpha)) (privk a)))
      (send
        (enc a b group (exp (gen) (mul y alpha))
          (exp (gen) (mul x alpha)) (privk b)))
      (recv (enc n (exp (gen) (mul y x alpha)))) (send n))
    ((send (enc "Group id" group (exp (gen) alpha) k-magic)))
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (send (enc a b group (exp (gen) (mul x alpha)) (privk a))))
    ((recv (enc "Group id" group-0 (exp (gen) alpha-0) k-magic-0))
      (send
        (enc a-0 b-0 group-0 (exp (gen) (mul x-0 alpha-0)) (privk a-0)))
      (recv
        (enc a-0 b-0 group-0 (exp (gen) (mul y x alpha (rec x-0)))
          (exp (gen) (mul x-0 alpha-0)) (privk b-0)))
      (send (enc n (exp (gen) (mul y x alpha)))))
    ((send (enc "Group id" group-0 (exp (gen) alpha-0) k-magic-0))))
  (label 33)
  (parent 27)
  (unrealized (3 2))
  (comment "6 in cohort - 6 not yet seen"))

(defskeleton dh_sig2
  (vars (k-magic k-magic-0 skey) (n group group-0 text)
    (a b a-0 b-0 name) (y x alpha y-0 rndx) (x-0 expt))
  (defstrand resp 5 (k-magic k-magic) (n n) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (y y) (x x))
  (defstrand group-init 1 (k-magic k-magic) (group group) (alpha alpha))
  (defstrand init 2 (k-magic k-magic) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (x x))
  (deflistener (exp (gen) (mul y x alpha)))
  (defstrand resp 3 (k-magic k-magic-0) (group group-0) (a a-0) (b b-0)
    (g (exp (gen) (mul y x alpha (rec y-0)))) (y y-0) (x x-0))
  (precedes ((0 2) (4 0)) ((1 0) (0 0)) ((1 0) (2 0)) ((2 1) (0 1))
    ((3 1) (0 3)) ((4 2) (3 0)))
  (non-orig k-magic k-magic-0 (privk a) (privk b))
  (uniq-gen y x alpha y-0)
  (absent (y x) (y-0 x-0))
  (operation nonce-test (added-strand resp 3)
    (exp (gen) (mul y x alpha)) (3 0))
  (traces
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (recv (enc a b group (exp (gen) (mul x alpha)) (privk a)))
      (send
        (enc a b group (exp (gen) (mul y alpha))
          (exp (gen) (mul x alpha)) (privk b)))
      (recv (enc n (exp (gen) (mul y x alpha)))) (send n))
    ((send (enc "Group id" group (exp (gen) alpha) k-magic)))
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (send (enc a b group (exp (gen) (mul x alpha)) (privk a))))
    ((recv (exp (gen) (mul y x alpha)))
      (send (exp (gen) (mul y x alpha))))
    ((recv
       (enc "Group id" group-0 (exp (gen) (mul y x alpha (rec y-0)))
         k-magic-0))
      (recv
        (enc a-0 b-0 group-0 (exp (gen) (mul y x alpha (rec y-0) x-0))
          (privk a-0)))
      (send
        (enc a-0 b-0 group-0 (exp (gen) (mul y x alpha))
          (exp (gen) (mul y x alpha (rec y-0) x-0)) (privk b-0)))))
  (label 34)
  (parent 28)
  (unrealized (4 0) (4 1))
  (dead)
  (comment "empty cohort"))

(defskeleton dh_sig2
  (vars (k-magic k-magic-0 skey) (n group group-0 text)
    (a b a-0 b-0 name) (y x alpha x-0 rndx))
  (defstrand resp 5 (k-magic k-magic) (n n) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (y y) (x x))
  (defstrand group-init 1 (k-magic k-magic) (group group) (alpha alpha))
  (defstrand init 2 (k-magic k-magic) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (x x))
  (deflistener (exp (gen) (mul y x alpha)))
  (defstrand init 2 (k-magic k-magic-0) (group group-0) (a a-0) (b b-0)
    (g (exp (gen) (mul y x alpha (rec x-0)))) (x x-0))
  (precedes ((0 2) (4 0)) ((1 0) (0 0)) ((1 0) (2 0)) ((2 1) (0 1))
    ((3 1) (0 3)) ((4 1) (3 0)))
  (non-orig k-magic k-magic-0 (privk a) (privk b))
  (uniq-gen y x alpha x-0)
  (absent (y x))
  (operation nonce-test (added-strand init 2)
    (exp (gen) (mul y x alpha)) (3 0))
  (traces
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (recv (enc a b group (exp (gen) (mul x alpha)) (privk a)))
      (send
        (enc a b group (exp (gen) (mul y alpha))
          (exp (gen) (mul x alpha)) (privk b)))
      (recv (enc n (exp (gen) (mul y x alpha)))) (send n))
    ((send (enc "Group id" group (exp (gen) alpha) k-magic)))
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (send (enc a b group (exp (gen) (mul x alpha)) (privk a))))
    ((recv (exp (gen) (mul y x alpha)))
      (send (exp (gen) (mul y x alpha))))
    ((recv
       (enc "Group id" group-0 (exp (gen) (mul y x alpha (rec x-0)))
         k-magic-0))
      (send
        (enc a-0 b-0 group-0 (exp (gen) (mul y x alpha)) (privk a-0)))))
  (label 35)
  (parent 28)
  (unrealized (4 0))
  (dead)
  (comment "empty cohort"))

(defskeleton dh_sig2
  (vars (k-magic skey) (n group text) (a b name) (y x alpha rndx))
  (defstrand resp 5 (k-magic k-magic) (n n) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (y y) (x x))
  (defstrand group-init 1 (k-magic k-magic) (group group) (alpha alpha))
  (defstrand init 2 (k-magic k-magic) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (x x))
  (deflistener (exp (gen) (mul y x alpha)))
  (deflistener (cat (exp (gen) (mul y x)) alpha))
  (precedes ((0 2) (4 0)) ((1 0) (0 0)) ((1 0) (2 0)) ((2 1) (0 1))
    ((3 1) (0 3)) ((4 1) (3 0)))
  (non-orig k-magic (privk a) (privk b))
  (uniq-gen y x alpha)
  (absent (y x))
  (operation nonce-test
    (added-listener (cat (exp (gen) (mul y x)) alpha))
    (exp (gen) (mul y x alpha)) (3 0))
  (traces
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (recv (enc a b group (exp (gen) (mul x alpha)) (privk a)))
      (send
        (enc a b group (exp (gen) (mul y alpha))
          (exp (gen) (mul x alpha)) (privk b)))
      (recv (enc n (exp (gen) (mul y x alpha)))) (send n))
    ((send (enc "Group id" group (exp (gen) alpha) k-magic)))
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (send (enc a b group (exp (gen) (mul x alpha)) (privk a))))
    ((recv (exp (gen) (mul y x alpha)))
      (send (exp (gen) (mul y x alpha))))
    ((recv (cat (exp (gen) (mul y x)) alpha))
      (send (cat (exp (gen) (mul y x)) alpha))))
  (label 36)
  (parent 28)
  (unrealized (4 0))
  (dead)
  (comment "empty cohort"))

(defskeleton dh_sig2
  (vars (k-magic skey) (n group text) (a b name) (y x alpha rndx))
  (defstrand resp 5 (k-magic k-magic) (n n) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (y y) (x x))
  (defstrand group-init 1 (k-magic k-magic) (group group) (alpha alpha))
  (defstrand init 2 (k-magic k-magic) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (x x))
  (deflistener (exp (gen) (mul y x alpha)))
  (deflistener (cat (exp (gen) (mul y alpha)) x))
  (precedes ((0 2) (4 0)) ((1 0) (0 0)) ((1 0) (2 0)) ((2 1) (0 1))
    ((3 1) (0 3)) ((4 1) (3 0)))
  (non-orig k-magic (privk a) (privk b))
  (uniq-gen y x alpha)
  (absent (y x))
  (operation nonce-test
    (added-listener (cat (exp (gen) (mul y alpha)) x))
    (exp (gen) (mul y x alpha)) (3 0))
  (traces
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (recv (enc a b group (exp (gen) (mul x alpha)) (privk a)))
      (send
        (enc a b group (exp (gen) (mul y alpha))
          (exp (gen) (mul x alpha)) (privk b)))
      (recv (enc n (exp (gen) (mul y x alpha)))) (send n))
    ((send (enc "Group id" group (exp (gen) alpha) k-magic)))
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (send (enc a b group (exp (gen) (mul x alpha)) (privk a))))
    ((recv (exp (gen) (mul y x alpha)))
      (send (exp (gen) (mul y x alpha))))
    ((recv (cat (exp (gen) (mul y alpha)) x))
      (send (cat (exp (gen) (mul y alpha)) x))))
  (label 37)
  (parent 28)
  (unrealized (4 0))
  (dead)
  (comment "empty cohort"))

(defskeleton dh_sig2
  (vars (k-magic skey) (n group text) (a b name) (y x alpha rndx))
  (defstrand resp 5 (k-magic k-magic) (n n) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (y y) (x x))
  (defstrand group-init 1 (k-magic k-magic) (group group) (alpha alpha))
  (defstrand init 2 (k-magic k-magic) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (x x))
  (deflistener (exp (gen) (mul y x alpha)))
  (deflistener (cat (exp (gen) (mul x alpha)) y))
  (precedes ((0 2) (4 0)) ((1 0) (0 0)) ((1 0) (2 0)) ((2 1) (0 1))
    ((3 1) (0 3)) ((4 1) (3 0)))
  (non-orig k-magic (privk a) (privk b))
  (uniq-gen y x alpha)
  (absent (y x))
  (operation nonce-test
    (added-listener (cat (exp (gen) (mul x alpha)) y))
    (exp (gen) (mul y x alpha)) (3 0))
  (traces
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (recv (enc a b group (exp (gen) (mul x alpha)) (privk a)))
      (send
        (enc a b group (exp (gen) (mul y alpha))
          (exp (gen) (mul x alpha)) (privk b)))
      (recv (enc n (exp (gen) (mul y x alpha)))) (send n))
    ((send (enc "Group id" group (exp (gen) alpha) k-magic)))
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (send (enc a b group (exp (gen) (mul x alpha)) (privk a))))
    ((recv (exp (gen) (mul y x alpha)))
      (send (exp (gen) (mul y x alpha))))
    ((recv (cat (exp (gen) (mul x alpha)) y))
      (send (cat (exp (gen) (mul x alpha)) y))))
  (label 38)
  (parent 28)
  (unrealized (4 0))
  (dead)
  (comment "empty cohort"))

(defskeleton dh_sig2
  (vars (k-magic k-magic-0 skey) (n group text) (a b a-0 b-0 name)
    (y x alpha x-0 alpha-0 rndx))
  (defstrand resp 5 (k-magic k-magic) (n n) (group group) (a a) (b b)
    (g (exp (gen) alpha-0)) (y y) (x (mul x alpha (rec alpha-0))))
  (defstrand group-init 1 (k-magic k-magic) (group group)
    (alpha alpha-0))
  (defstrand init 2 (k-magic k-magic-0) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (x x))
  (defstrand group-init 1 (k-magic k-magic-0) (group group)
    (alpha alpha))
  (defstrand init 4 (k-magic k-magic) (n n) (group group) (a a-0)
    (b b-0) (g (exp (gen) alpha-0)) (x x-0)
    (y (mul y x alpha (rec x-0) (rec alpha-0))))
  (precedes ((0 2) (4 0)) ((1 0) (0 0)) ((1 0) (2 0)) ((2 1) (0 1))
    ((3 0) (2 0)) ((4 3) (0 3)))
  (non-orig k-magic k-magic-0 (privk a) (privk b))
  (uniq-gen n y x alpha x-0 alpha-0)
  (absent (y (mul x alpha (rec alpha-0))))
  (operation encryption-test (displaced 5 1 group-init 1)
    (enc "Group id" group-0 (exp (gen) alpha-1) k-magic-1) (4 0))
  (traces
    ((recv (enc "Group id" group (exp (gen) alpha-0) k-magic))
      (recv (enc a b group (exp (gen) (mul x alpha)) (privk a)))
      (send
        (enc a b group (exp (gen) (mul y alpha-0))
          (exp (gen) (mul x alpha)) (privk b)))
      (recv (enc n (exp (gen) (mul y x alpha)))) (send n))
    ((send (enc "Group id" group (exp (gen) alpha-0) k-magic)))
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic-0))
      (send (enc a b group (exp (gen) (mul x alpha)) (privk a))))
    ((send (enc "Group id" group (exp (gen) alpha) k-magic-0)))
    ((recv (enc "Group id" group (exp (gen) alpha-0) k-magic))
      (send
        (enc a-0 b-0 group (exp (gen) (mul x-0 alpha-0)) (privk a-0)))
      (recv
        (enc a-0 b-0 group (exp (gen) (mul y x alpha (rec x-0)))
          (exp (gen) (mul x-0 alpha-0)) (privk b-0)))
      (send (enc n (exp (gen) (mul y x alpha))))))
  (label 39)
  (parent 30)
  (unrealized (4 2))
  (comment "6 in cohort - 6 not yet seen"))

(defskeleton dh_sig2
  (vars (k-magic k-magic-0 skey) (n group text) (a b a-0 b-0 name)
    (alpha y x x-0 alpha-0 rndx))
  (defstrand resp 5 (k-magic k-magic) (n n) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (y y) (x (mul (rec alpha) x alpha-0)))
  (defstrand group-init 1 (k-magic k-magic) (group group) (alpha alpha))
  (defstrand init 2 (k-magic k-magic-0) (group group) (a a) (b b)
    (g (exp (gen) alpha-0)) (x x))
  (defstrand group-init 1 (k-magic k-magic-0) (group group)
    (alpha alpha-0))
  (defstrand init 4 (k-magic k-magic-0) (n n) (group group) (a a-0)
    (b b-0) (g (exp (gen) alpha-0)) (x x-0) (y (mul y x (rec x-0))))
  (precedes ((0 2) (4 0)) ((1 0) (0 0)) ((1 0) (2 0)) ((2 1) (0 1))
    ((3 0) (2 0)) ((4 3) (0 3)))
  (non-orig k-magic k-magic-0 (privk a) (privk b))
  (uniq-gen n alpha y x x-0 alpha-0)
  (absent (y (mul (rec alpha) x alpha-0)))
  (operation encryption-test (displaced 5 3 group-init 1)
    (enc "Group id" group-0 (exp (gen) alpha-1) k-magic-1) (4 0))
  (traces
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (recv (enc a b group (exp (gen) (mul x alpha-0)) (privk a)))
      (send
        (enc a b group (exp (gen) (mul alpha y))
          (exp (gen) (mul x alpha-0)) (privk b)))
      (recv (enc n (exp (gen) (mul y x alpha-0)))) (send n))
    ((send (enc "Group id" group (exp (gen) alpha) k-magic)))
    ((recv (enc "Group id" group (exp (gen) alpha-0) k-magic-0))
      (send (enc a b group (exp (gen) (mul x alpha-0)) (privk a))))
    ((send (enc "Group id" group (exp (gen) alpha-0) k-magic-0)))
    ((recv (enc "Group id" group (exp (gen) alpha-0) k-magic-0))
      (send
        (enc a-0 b-0 group (exp (gen) (mul x-0 alpha-0)) (privk a-0)))
      (recv
        (enc a-0 b-0 group (exp (gen) (mul y x (rec x-0) alpha-0))
          (exp (gen) (mul x-0 alpha-0)) (privk b-0)))
      (send (enc n (exp (gen) (mul y x alpha-0))))))
  (label 40)
  (parent 30)
  (unrealized (4 2))
  (comment "6 in cohort - 6 not yet seen"))

(defskeleton dh_sig2
  (vars (k-magic k-magic-0 k-magic-1 skey) (n group group-0 text)
    (a b a-0 b-0 name) (alpha y x alpha-0 x-0 alpha-1 rndx))
  (defstrand resp 5 (k-magic k-magic) (n n) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (y y) (x (mul (rec alpha) x alpha-0)))
  (defstrand group-init 1 (k-magic k-magic) (group group) (alpha alpha))
  (defstrand init 2 (k-magic k-magic-0) (group group) (a a) (b b)
    (g (exp (gen) alpha-0)) (x x))
  (defstrand group-init 1 (k-magic k-magic-0) (group group)
    (alpha alpha-0))
  (defstrand init 4 (k-magic k-magic-1) (n n) (group group-0) (a a-0)
    (b b-0) (g (exp (gen) alpha-1)) (x x-0)
    (y (mul y x alpha-0 (rec x-0) (rec alpha-1))))
  (defstrand group-init 1 (k-magic k-magic-1) (group group-0)
    (alpha alpha-1))
  (precedes ((0 2) (4 0)) ((1 0) (0 0)) ((1 0) (2 0)) ((2 1) (0 1))
    ((3 0) (2 0)) ((4 3) (0 3)) ((5 0) (4 0)))
  (non-orig k-magic k-magic-0 k-magic-1 (privk a) (privk b))
  (uniq-gen n alpha y x alpha-0 x-0 alpha-1)
  (absent (y (mul (rec alpha) x alpha-0)))
  (operation encryption-test (added-strand group-init 1)
    (enc "Group id" group-0 (exp (gen) alpha-1) k-magic-1) (4 0))
  (traces
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (recv (enc a b group (exp (gen) (mul x alpha-0)) (privk a)))
      (send
        (enc a b group (exp (gen) (mul alpha y))
          (exp (gen) (mul x alpha-0)) (privk b)))
      (recv (enc n (exp (gen) (mul y x alpha-0)))) (send n))
    ((send (enc "Group id" group (exp (gen) alpha) k-magic)))
    ((recv (enc "Group id" group (exp (gen) alpha-0) k-magic-0))
      (send (enc a b group (exp (gen) (mul x alpha-0)) (privk a))))
    ((send (enc "Group id" group (exp (gen) alpha-0) k-magic-0)))
    ((recv (enc "Group id" group-0 (exp (gen) alpha-1) k-magic-1))
      (send
        (enc a-0 b-0 group-0 (exp (gen) (mul x-0 alpha-1)) (privk a-0)))
      (recv
        (enc a-0 b-0 group-0 (exp (gen) (mul y x alpha-0 (rec x-0)))
          (exp (gen) (mul x-0 alpha-1)) (privk b-0)))
      (send (enc n (exp (gen) (mul y x alpha-0)))))
    ((send (enc "Group id" group-0 (exp (gen) alpha-1) k-magic-1))))
  (label 41)
  (parent 30)
  (unrealized (4 2))
  (comment "6 in cohort - 6 not yet seen"))

(defskeleton dh_sig2
  (vars (k-magic k-magic-0 k-magic-1 skey) (n group group-0 text)
    (a b a-0 b-0 name) (y alpha x alpha-0 y-0 rndx) (x-0 expt))
  (defstrand resp 5 (k-magic k-magic) (n n) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (y y) (x (mul (rec alpha) x alpha-0)))
  (defstrand group-init 1 (k-magic k-magic) (group group) (alpha alpha))
  (defstrand init 2 (k-magic k-magic-0) (group group) (a a) (b b)
    (g (exp (gen) alpha-0)) (x x))
  (defstrand group-init 1 (k-magic k-magic-0) (group group)
    (alpha alpha-0))
  (deflistener (exp (gen) (mul y x alpha-0)))
  (defstrand resp 3 (k-magic k-magic-1) (group group-0) (a a-0) (b b-0)
    (g (exp (gen) (mul y x alpha-0 (rec y-0)))) (y y-0) (x x-0))
  (precedes ((0 2) (5 0)) ((1 0) (0 0)) ((1 0) (2 0)) ((2 1) (0 1))
    ((3 0) (2 0)) ((4 1) (0 3)) ((5 2) (4 0)))
  (non-orig k-magic k-magic-0 k-magic-1 (privk a) (privk b))
  (uniq-gen y alpha x alpha-0 y-0)
  (absent (y (mul (rec alpha) x alpha-0)) (y-0 x-0))
  (operation nonce-test (added-strand resp 3)
    (exp (gen) (mul y x alpha-0)) (4 0))
  (traces
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (recv (enc a b group (exp (gen) (mul x alpha-0)) (privk a)))
      (send
        (enc a b group (exp (gen) (mul y alpha))
          (exp (gen) (mul x alpha-0)) (privk b)))
      (recv (enc n (exp (gen) (mul y x alpha-0)))) (send n))
    ((send (enc "Group id" group (exp (gen) alpha) k-magic)))
    ((recv (enc "Group id" group (exp (gen) alpha-0) k-magic-0))
      (send (enc a b group (exp (gen) (mul x alpha-0)) (privk a))))
    ((send (enc "Group id" group (exp (gen) alpha-0) k-magic-0)))
    ((recv (exp (gen) (mul y x alpha-0)))
      (send (exp (gen) (mul y x alpha-0))))
    ((recv
       (enc "Group id" group-0 (exp (gen) (mul y x alpha-0 (rec y-0)))
         k-magic-1))
      (recv
        (enc a-0 b-0 group-0 (exp (gen) (mul y x alpha-0 (rec y-0) x-0))
          (privk a-0)))
      (send
        (enc a-0 b-0 group-0 (exp (gen) (mul y x alpha-0))
          (exp (gen) (mul y x alpha-0 (rec y-0) x-0)) (privk b-0)))))
  (label 42)
  (parent 31)
  (unrealized (5 0) (5 1))
  (dead)
  (comment "empty cohort"))

(defskeleton dh_sig2
  (vars (k-magic k-magic-0 k-magic-1 skey) (n group group-0 text)
    (a b a-0 b-0 name) (y alpha x alpha-0 x-0 rndx))
  (defstrand resp 5 (k-magic k-magic) (n n) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (y y) (x (mul (rec alpha) x alpha-0)))
  (defstrand group-init 1 (k-magic k-magic) (group group) (alpha alpha))
  (defstrand init 2 (k-magic k-magic-0) (group group) (a a) (b b)
    (g (exp (gen) alpha-0)) (x x))
  (defstrand group-init 1 (k-magic k-magic-0) (group group)
    (alpha alpha-0))
  (deflistener (exp (gen) (mul y x alpha-0)))
  (defstrand init 2 (k-magic k-magic-1) (group group-0) (a a-0) (b b-0)
    (g (exp (gen) (mul y x alpha-0 (rec x-0)))) (x x-0))
  (precedes ((0 2) (5 0)) ((1 0) (0 0)) ((1 0) (2 0)) ((2 1) (0 1))
    ((3 0) (2 0)) ((4 1) (0 3)) ((5 1) (4 0)))
  (non-orig k-magic k-magic-0 k-magic-1 (privk a) (privk b))
  (uniq-gen y alpha x alpha-0 x-0)
  (absent (y (mul (rec alpha) x alpha-0)))
  (operation nonce-test (added-strand init 2)
    (exp (gen) (mul y x alpha-0)) (4 0))
  (traces
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (recv (enc a b group (exp (gen) (mul x alpha-0)) (privk a)))
      (send
        (enc a b group (exp (gen) (mul y alpha))
          (exp (gen) (mul x alpha-0)) (privk b)))
      (recv (enc n (exp (gen) (mul y x alpha-0)))) (send n))
    ((send (enc "Group id" group (exp (gen) alpha) k-magic)))
    ((recv (enc "Group id" group (exp (gen) alpha-0) k-magic-0))
      (send (enc a b group (exp (gen) (mul x alpha-0)) (privk a))))
    ((send (enc "Group id" group (exp (gen) alpha-0) k-magic-0)))
    ((recv (exp (gen) (mul y x alpha-0)))
      (send (exp (gen) (mul y x alpha-0))))
    ((recv
       (enc "Group id" group-0 (exp (gen) (mul y x alpha-0 (rec x-0)))
         k-magic-1))
      (send
        (enc a-0 b-0 group-0 (exp (gen) (mul y x alpha-0))
          (privk a-0)))))
  (label 43)
  (parent 31)
  (unrealized (5 0))
  (dead)
  (comment "empty cohort"))

(defskeleton dh_sig2
  (vars (k-magic k-magic-0 skey) (n group text) (a b name)
    (y alpha x alpha-0 rndx))
  (defstrand resp 5 (k-magic k-magic) (n n) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (y y) (x (mul (rec alpha) x alpha-0)))
  (defstrand group-init 1 (k-magic k-magic) (group group) (alpha alpha))
  (defstrand init 2 (k-magic k-magic-0) (group group) (a a) (b b)
    (g (exp (gen) alpha-0)) (x x))
  (defstrand group-init 1 (k-magic k-magic-0) (group group)
    (alpha alpha-0))
  (deflistener (exp (gen) (mul y x alpha-0)))
  (deflistener (cat (exp (gen) (mul y x)) alpha-0))
  (precedes ((0 2) (5 0)) ((1 0) (0 0)) ((1 0) (2 0)) ((2 1) (0 1))
    ((3 0) (2 0)) ((4 1) (0 3)) ((5 1) (4 0)))
  (non-orig k-magic k-magic-0 (privk a) (privk b))
  (uniq-gen y alpha x alpha-0)
  (absent (y (mul (rec alpha) x alpha-0)))
  (operation nonce-test
    (added-listener (cat (exp (gen) (mul y x)) alpha-0))
    (exp (gen) (mul y x alpha-0)) (4 0))
  (traces
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (recv (enc a b group (exp (gen) (mul x alpha-0)) (privk a)))
      (send
        (enc a b group (exp (gen) (mul y alpha))
          (exp (gen) (mul x alpha-0)) (privk b)))
      (recv (enc n (exp (gen) (mul y x alpha-0)))) (send n))
    ((send (enc "Group id" group (exp (gen) alpha) k-magic)))
    ((recv (enc "Group id" group (exp (gen) alpha-0) k-magic-0))
      (send (enc a b group (exp (gen) (mul x alpha-0)) (privk a))))
    ((send (enc "Group id" group (exp (gen) alpha-0) k-magic-0)))
    ((recv (exp (gen) (mul y x alpha-0)))
      (send (exp (gen) (mul y x alpha-0))))
    ((recv (cat (exp (gen) (mul y x)) alpha-0))
      (send (cat (exp (gen) (mul y x)) alpha-0))))
  (label 44)
  (parent 31)
  (unrealized (5 0))
  (dead)
  (comment "empty cohort"))

(defskeleton dh_sig2
  (vars (k-magic k-magic-0 skey) (n group text) (a b name)
    (y alpha x alpha-0 rndx))
  (defstrand resp 5 (k-magic k-magic) (n n) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (y y) (x (mul (rec alpha) x alpha-0)))
  (defstrand group-init 1 (k-magic k-magic) (group group) (alpha alpha))
  (defstrand init 2 (k-magic k-magic-0) (group group) (a a) (b b)
    (g (exp (gen) alpha-0)) (x x))
  (defstrand group-init 1 (k-magic k-magic-0) (group group)
    (alpha alpha-0))
  (deflistener (exp (gen) (mul y x alpha-0)))
  (deflistener (cat (exp (gen) (mul y alpha-0)) x))
  (precedes ((0 2) (5 0)) ((1 0) (0 0)) ((1 0) (2 0)) ((2 1) (0 1))
    ((3 0) (2 0)) ((4 1) (0 3)) ((5 1) (4 0)))
  (non-orig k-magic k-magic-0 (privk a) (privk b))
  (uniq-gen y alpha x alpha-0)
  (absent (y (mul (rec alpha) x alpha-0)))
  (operation nonce-test
    (added-listener (cat (exp (gen) (mul y alpha-0)) x))
    (exp (gen) (mul y x alpha-0)) (4 0))
  (traces
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (recv (enc a b group (exp (gen) (mul x alpha-0)) (privk a)))
      (send
        (enc a b group (exp (gen) (mul y alpha))
          (exp (gen) (mul x alpha-0)) (privk b)))
      (recv (enc n (exp (gen) (mul y x alpha-0)))) (send n))
    ((send (enc "Group id" group (exp (gen) alpha) k-magic)))
    ((recv (enc "Group id" group (exp (gen) alpha-0) k-magic-0))
      (send (enc a b group (exp (gen) (mul x alpha-0)) (privk a))))
    ((send (enc "Group id" group (exp (gen) alpha-0) k-magic-0)))
    ((recv (exp (gen) (mul y x alpha-0)))
      (send (exp (gen) (mul y x alpha-0))))
    ((recv (cat (exp (gen) (mul y alpha-0)) x))
      (send (cat (exp (gen) (mul y alpha-0)) x))))
  (label 45)
  (parent 31)
  (unrealized (5 0))
  (dead)
  (comment "empty cohort"))

(defskeleton dh_sig2
  (vars (k-magic k-magic-0 skey) (n group text) (a b name)
    (y alpha x alpha-0 rndx))
  (defstrand resp 5 (k-magic k-magic) (n n) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (y y) (x (mul (rec alpha) x alpha-0)))
  (defstrand group-init 1 (k-magic k-magic) (group group) (alpha alpha))
  (defstrand init 2 (k-magic k-magic-0) (group group) (a a) (b b)
    (g (exp (gen) alpha-0)) (x x))
  (defstrand group-init 1 (k-magic k-magic-0) (group group)
    (alpha alpha-0))
  (deflistener (exp (gen) (mul y x alpha-0)))
  (deflistener (cat (exp (gen) (mul x alpha-0)) y))
  (precedes ((0 2) (5 0)) ((1 0) (0 0)) ((1 0) (2 0)) ((2 1) (0 1))
    ((3 0) (2 0)) ((4 1) (0 3)) ((5 1) (4 0)))
  (non-orig k-magic k-magic-0 (privk a) (privk b))
  (uniq-gen y alpha x alpha-0)
  (absent (y (mul (rec alpha) x alpha-0)))
  (operation nonce-test
    (added-listener (cat (exp (gen) (mul x alpha-0)) y))
    (exp (gen) (mul y x alpha-0)) (4 0))
  (traces
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (recv (enc a b group (exp (gen) (mul x alpha-0)) (privk a)))
      (send
        (enc a b group (exp (gen) (mul y alpha))
          (exp (gen) (mul x alpha-0)) (privk b)))
      (recv (enc n (exp (gen) (mul y x alpha-0)))) (send n))
    ((send (enc "Group id" group (exp (gen) alpha) k-magic)))
    ((recv (enc "Group id" group (exp (gen) alpha-0) k-magic-0))
      (send (enc a b group (exp (gen) (mul x alpha-0)) (privk a))))
    ((send (enc "Group id" group (exp (gen) alpha-0) k-magic-0)))
    ((recv (exp (gen) (mul y x alpha-0)))
      (send (exp (gen) (mul y x alpha-0))))
    ((recv (cat (exp (gen) (mul x alpha-0)) y))
      (send (cat (exp (gen) (mul x alpha-0)) y))))
  (label 46)
  (parent 31)
  (unrealized (5 0))
  (dead)
  (comment "empty cohort"))

(defskeleton dh_sig2
  (vars (k-magic skey) (n group text) (a b a-0 b-0 name)
    (y x x-0 alpha rndx))
  (defstrand resp 5 (k-magic k-magic) (n n) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (y y) (x x))
  (defstrand group-init 1 (k-magic k-magic) (group group) (alpha alpha))
  (defstrand init 2 (k-magic k-magic) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (x x))
  (defstrand init 4 (k-magic k-magic) (n n) (group group) (a a-0)
    (b b-0) (g (exp (gen) alpha)) (x x-0) (y (mul y x (rec x-0))))
  (deflistener (cat (exp (gen) (mul y x (rec x-0))) alpha))
  (precedes ((0 2) (3 0)) ((1 0) (0 0)) ((1 0) (2 0)) ((2 1) (0 1))
    ((3 1) (4 0)) ((3 3) (0 3)) ((4 1) (3 2)))
  (non-orig k-magic (privk a) (privk b))
  (uniq-gen n y x x-0 alpha)
  (absent (y x))
  (operation nonce-test
    (added-listener (cat (exp (gen) (mul y x (rec x-0))) alpha))
    (exp (gen) (mul y x (rec x-0) alpha)) (3 2))
  (traces
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (recv (enc a b group (exp (gen) (mul x alpha)) (privk a)))
      (send
        (enc a b group (exp (gen) (mul y alpha))
          (exp (gen) (mul x alpha)) (privk b)))
      (recv (enc n (exp (gen) (mul y x alpha)))) (send n))
    ((send (enc "Group id" group (exp (gen) alpha) k-magic)))
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (send (enc a b group (exp (gen) (mul x alpha)) (privk a))))
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (send (enc a-0 b-0 group (exp (gen) (mul x-0 alpha)) (privk a-0)))
      (recv
        (enc a-0 b-0 group (exp (gen) (mul y x (rec x-0) alpha))
          (exp (gen) (mul x-0 alpha)) (privk b-0)))
      (send (enc n (exp (gen) (mul y x alpha)))))
    ((recv (cat (exp (gen) (mul y x (rec x-0))) alpha))
      (send (cat (exp (gen) (mul y x (rec x-0))) alpha))))
  (label 47)
  (parent 32)
  (unrealized (4 0))
  (dead)
  (comment "empty cohort"))

(defskeleton dh_sig2
  (vars (k-magic k-magic-0 skey) (n group group-0 text)
    (a b a-0 b-0 a-1 b-1 name) (y x x-0 alpha y-0 rndx) (x-1 expt))
  (defstrand resp 5 (k-magic k-magic) (n n) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (y y) (x x))
  (defstrand group-init 1 (k-magic k-magic) (group group) (alpha alpha))
  (defstrand init 2 (k-magic k-magic) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (x x))
  (defstrand init 4 (k-magic k-magic) (n n) (group group) (a a-0)
    (b b-0) (g (exp (gen) alpha)) (x x-0) (y (mul y x (rec x-0))))
  (defstrand resp 3 (k-magic k-magic-0) (group group-0) (a a-1) (b b-1)
    (g (exp (gen) (mul y x (rec x-0) alpha (rec y-0)))) (y y-0) (x x-1))
  (precedes ((0 2) (3 0)) ((1 0) (0 0)) ((1 0) (2 0)) ((2 1) (0 1))
    ((3 1) (4 0)) ((3 3) (0 3)) ((4 2) (3 2)))
  (non-orig k-magic k-magic-0 (privk a) (privk b))
  (uniq-gen n y x x-0 alpha y-0)
  (absent (y x) (y-0 x-1))
  (operation nonce-test (added-strand resp 3)
    (exp (gen) (mul y x (rec x-0) alpha)) (3 2))
  (traces
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (recv (enc a b group (exp (gen) (mul x alpha)) (privk a)))
      (send
        (enc a b group (exp (gen) (mul y alpha))
          (exp (gen) (mul x alpha)) (privk b)))
      (recv (enc n (exp (gen) (mul y x alpha)))) (send n))
    ((send (enc "Group id" group (exp (gen) alpha) k-magic)))
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (send (enc a b group (exp (gen) (mul x alpha)) (privk a))))
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (send (enc a-0 b-0 group (exp (gen) (mul x-0 alpha)) (privk a-0)))
      (recv
        (enc a-0 b-0 group (exp (gen) (mul y x (rec x-0) alpha))
          (exp (gen) (mul x-0 alpha)) (privk b-0)))
      (send (enc n (exp (gen) (mul y x alpha)))))
    ((recv
       (enc "Group id" group-0
         (exp (gen) (mul y x (rec x-0) alpha (rec y-0))) k-magic-0))
      (recv
        (enc a-1 b-1 group-0
          (exp (gen) (mul y x (rec x-0) alpha (rec y-0) x-1))
          (privk a-1)))
      (send
        (enc a-1 b-1 group-0 (exp (gen) (mul y x (rec x-0) alpha))
          (exp (gen) (mul y x (rec x-0) alpha (rec y-0) x-1))
          (privk b-1)))))
  (label 48)
  (parent 32)
  (unrealized (4 0) (4 1))
  (dead)
  (comment "empty cohort"))

(defskeleton dh_sig2
  (vars (k-magic k-magic-0 skey) (n group group-0 text)
    (a b a-0 b-0 a-1 b-1 name) (y x x-0 alpha x-1 rndx))
  (defstrand resp 5 (k-magic k-magic) (n n) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (y y) (x x))
  (defstrand group-init 1 (k-magic k-magic) (group group) (alpha alpha))
  (defstrand init 2 (k-magic k-magic) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (x x))
  (defstrand init 4 (k-magic k-magic) (n n) (group group) (a a-0)
    (b b-0) (g (exp (gen) alpha)) (x x-0) (y (mul y x (rec x-0))))
  (defstrand init 2 (k-magic k-magic-0) (group group-0) (a a-1) (b b-1)
    (g (exp (gen) (mul y x (rec x-0) alpha (rec x-1)))) (x x-1))
  (precedes ((0 2) (3 0)) ((1 0) (0 0)) ((1 0) (2 0)) ((2 1) (0 1))
    ((3 1) (4 0)) ((3 3) (0 3)) ((4 1) (3 2)))
  (non-orig k-magic k-magic-0 (privk a) (privk b))
  (uniq-gen n y x x-0 alpha x-1)
  (absent (y x))
  (operation nonce-test (added-strand init 2)
    (exp (gen) (mul y x (rec x-0) alpha)) (3 2))
  (traces
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (recv (enc a b group (exp (gen) (mul x alpha)) (privk a)))
      (send
        (enc a b group (exp (gen) (mul y alpha))
          (exp (gen) (mul x alpha)) (privk b)))
      (recv (enc n (exp (gen) (mul y x alpha)))) (send n))
    ((send (enc "Group id" group (exp (gen) alpha) k-magic)))
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (send (enc a b group (exp (gen) (mul x alpha)) (privk a))))
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (send (enc a-0 b-0 group (exp (gen) (mul x-0 alpha)) (privk a-0)))
      (recv
        (enc a-0 b-0 group (exp (gen) (mul y x (rec x-0) alpha))
          (exp (gen) (mul x-0 alpha)) (privk b-0)))
      (send (enc n (exp (gen) (mul y x alpha)))))
    ((recv
       (enc "Group id" group-0
         (exp (gen) (mul y x (rec x-0) alpha (rec x-1))) k-magic-0))
      (send
        (enc a-1 b-1 group-0 (exp (gen) (mul y x (rec x-0) alpha))
          (privk a-1)))))
  (label 49)
  (parent 32)
  (unrealized (4 0))
  (dead)
  (comment "empty cohort"))

(defskeleton dh_sig2
  (vars (k-magic skey) (n group text) (a b a-0 b-0 name)
    (y x x-0 alpha rndx))
  (defstrand resp 5 (k-magic k-magic) (n n) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (y y) (x x))
  (defstrand group-init 1 (k-magic k-magic) (group group) (alpha alpha))
  (defstrand init 2 (k-magic k-magic) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (x x))
  (defstrand init 4 (k-magic k-magic) (n n) (group group) (a a-0)
    (b b-0) (g (exp (gen) alpha)) (x x-0) (y (mul y x (rec x-0))))
  (deflistener (cat (exp (gen) (mul y x alpha)) x-0))
  (precedes ((0 2) (3 0)) ((1 0) (0 0)) ((1 0) (2 0)) ((2 1) (0 1))
    ((3 1) (4 0)) ((3 3) (0 3)) ((4 1) (3 2)))
  (non-orig k-magic (privk a) (privk b))
  (uniq-gen n y x x-0 alpha)
  (absent (y x))
  (operation nonce-test
    (added-listener (cat (exp (gen) (mul y x alpha)) x-0))
    (exp (gen) (mul y x (rec x-0) alpha)) (3 2))
  (traces
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (recv (enc a b group (exp (gen) (mul x alpha)) (privk a)))
      (send
        (enc a b group (exp (gen) (mul y alpha))
          (exp (gen) (mul x alpha)) (privk b)))
      (recv (enc n (exp (gen) (mul y x alpha)))) (send n))
    ((send (enc "Group id" group (exp (gen) alpha) k-magic)))
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (send (enc a b group (exp (gen) (mul x alpha)) (privk a))))
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (send (enc a-0 b-0 group (exp (gen) (mul x-0 alpha)) (privk a-0)))
      (recv
        (enc a-0 b-0 group (exp (gen) (mul y x (rec x-0) alpha))
          (exp (gen) (mul x-0 alpha)) (privk b-0)))
      (send (enc n (exp (gen) (mul y x alpha)))))
    ((recv (cat (exp (gen) (mul y x alpha)) x-0))
      (send (cat (exp (gen) (mul y x alpha)) x-0))))
  (label 50)
  (parent 32)
  (unrealized (4 0))
  (dead)
  (comment "empty cohort"))

(defskeleton dh_sig2
  (vars (k-magic skey) (n group text) (a b a-0 b-0 name)
    (y x x-0 alpha rndx))
  (defstrand resp 5 (k-magic k-magic) (n n) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (y y) (x x))
  (defstrand group-init 1 (k-magic k-magic) (group group) (alpha alpha))
  (defstrand init 2 (k-magic k-magic) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (x x))
  (defstrand init 4 (k-magic k-magic) (n n) (group group) (a a-0)
    (b b-0) (g (exp (gen) alpha)) (x x-0) (y (mul y x (rec x-0))))
  (deflistener (cat (exp (gen) (mul y (rec x-0) alpha)) x))
  (precedes ((0 2) (3 0)) ((1 0) (0 0)) ((1 0) (2 0)) ((2 1) (0 1))
    ((3 1) (4 0)) ((3 3) (0 3)) ((4 1) (3 2)))
  (non-orig k-magic (privk a) (privk b))
  (uniq-gen n y x x-0 alpha)
  (absent (y x))
  (operation nonce-test
    (added-listener (cat (exp (gen) (mul y (rec x-0) alpha)) x))
    (exp (gen) (mul y x (rec x-0) alpha)) (3 2))
  (traces
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (recv (enc a b group (exp (gen) (mul x alpha)) (privk a)))
      (send
        (enc a b group (exp (gen) (mul y alpha))
          (exp (gen) (mul x alpha)) (privk b)))
      (recv (enc n (exp (gen) (mul y x alpha)))) (send n))
    ((send (enc "Group id" group (exp (gen) alpha) k-magic)))
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (send (enc a b group (exp (gen) (mul x alpha)) (privk a))))
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (send (enc a-0 b-0 group (exp (gen) (mul x-0 alpha)) (privk a-0)))
      (recv
        (enc a-0 b-0 group (exp (gen) (mul y x (rec x-0) alpha))
          (exp (gen) (mul x-0 alpha)) (privk b-0)))
      (send (enc n (exp (gen) (mul y x alpha)))))
    ((recv (cat (exp (gen) (mul y (rec x-0) alpha)) x))
      (send (cat (exp (gen) (mul y (rec x-0) alpha)) x))))
  (label 51)
  (parent 32)
  (unrealized (4 0))
  (dead)
  (comment "empty cohort"))

(defskeleton dh_sig2
  (vars (k-magic skey) (n group text) (a b a-0 b-0 name)
    (y x x-0 alpha rndx))
  (defstrand resp 5 (k-magic k-magic) (n n) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (y y) (x x))
  (defstrand group-init 1 (k-magic k-magic) (group group) (alpha alpha))
  (defstrand init 2 (k-magic k-magic) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (x x))
  (defstrand init 4 (k-magic k-magic) (n n) (group group) (a a-0)
    (b b-0) (g (exp (gen) alpha)) (x x-0) (y (mul y x (rec x-0))))
  (deflistener (cat (exp (gen) (mul x (rec x-0) alpha)) y))
  (precedes ((0 2) (3 0)) ((1 0) (0 0)) ((1 0) (2 0)) ((2 1) (0 1))
    ((3 1) (4 0)) ((3 3) (0 3)) ((4 1) (3 2)))
  (non-orig k-magic (privk a) (privk b))
  (uniq-gen n y x x-0 alpha)
  (absent (y x))
  (operation nonce-test
    (added-listener (cat (exp (gen) (mul x (rec x-0) alpha)) y))
    (exp (gen) (mul y x (rec x-0) alpha)) (3 2))
  (traces
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (recv (enc a b group (exp (gen) (mul x alpha)) (privk a)))
      (send
        (enc a b group (exp (gen) (mul y alpha))
          (exp (gen) (mul x alpha)) (privk b)))
      (recv (enc n (exp (gen) (mul y x alpha)))) (send n))
    ((send (enc "Group id" group (exp (gen) alpha) k-magic)))
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (send (enc a b group (exp (gen) (mul x alpha)) (privk a))))
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (send (enc a-0 b-0 group (exp (gen) (mul x-0 alpha)) (privk a-0)))
      (recv
        (enc a-0 b-0 group (exp (gen) (mul y x (rec x-0) alpha))
          (exp (gen) (mul x-0 alpha)) (privk b-0)))
      (send (enc n (exp (gen) (mul y x alpha)))))
    ((recv (cat (exp (gen) (mul x (rec x-0) alpha)) y))
      (send (cat (exp (gen) (mul x (rec x-0) alpha)) y))))
  (label 52)
  (parent 32)
  (unrealized (4 0))
  (dead)
  (comment "empty cohort"))

(defskeleton dh_sig2
  (vars (k-magic k-magic-0 skey) (n group group-0 text)
    (a b a-0 b-0 name) (y x alpha x-0 alpha-0 rndx))
  (defstrand resp 5 (k-magic k-magic) (n n) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (y y) (x x))
  (defstrand group-init 1 (k-magic k-magic) (group group) (alpha alpha))
  (defstrand init 2 (k-magic k-magic) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (x x))
  (defstrand init 4 (k-magic k-magic-0) (n n) (group group-0) (a a-0)
    (b b-0) (g (exp (gen) alpha-0)) (x x-0)
    (y (mul y x alpha (rec x-0) (rec alpha-0))))
  (defstrand group-init 1 (k-magic k-magic-0) (group group-0)
    (alpha alpha-0))
  (deflistener (cat (exp (gen) (mul y x alpha)) x-0))
  (precedes ((0 2) (3 0)) ((1 0) (0 0)) ((1 0) (2 0)) ((2 1) (0 1))
    ((3 1) (5 0)) ((3 3) (0 3)) ((4 0) (3 0)) ((5 1) (3 2)))
  (non-orig k-magic k-magic-0 (privk a) (privk b))
  (uniq-gen n y x alpha x-0 alpha-0)
  (absent (y x))
  (operation nonce-test
    (added-listener (cat (exp (gen) (mul y x alpha)) x-0))
    (exp (gen) (mul y x alpha (rec x-0))) (3 2))
  (traces
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (recv (enc a b group (exp (gen) (mul x alpha)) (privk a)))
      (send
        (enc a b group (exp (gen) (mul y alpha))
          (exp (gen) (mul x alpha)) (privk b)))
      (recv (enc n (exp (gen) (mul y x alpha)))) (send n))
    ((send (enc "Group id" group (exp (gen) alpha) k-magic)))
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (send (enc a b group (exp (gen) (mul x alpha)) (privk a))))
    ((recv (enc "Group id" group-0 (exp (gen) alpha-0) k-magic-0))
      (send
        (enc a-0 b-0 group-0 (exp (gen) (mul x-0 alpha-0)) (privk a-0)))
      (recv
        (enc a-0 b-0 group-0 (exp (gen) (mul y x alpha (rec x-0)))
          (exp (gen) (mul x-0 alpha-0)) (privk b-0)))
      (send (enc n (exp (gen) (mul y x alpha)))))
    ((send (enc "Group id" group-0 (exp (gen) alpha-0) k-magic-0)))
    ((recv (cat (exp (gen) (mul y x alpha)) x-0))
      (send (cat (exp (gen) (mul y x alpha)) x-0))))
  (label 53)
  (parent 33)
  (unrealized (5 0))
  (dead)
  (comment "empty cohort"))

(defskeleton dh_sig2
  (vars (k-magic k-magic-0 k-magic-1 skey)
    (n group group-0 group-1 text) (a b a-0 b-0 a-1 b-1 name)
    (y x alpha x-0 alpha-0 y-0 rndx) (x-1 expt))
  (defstrand resp 5 (k-magic k-magic) (n n) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (y y) (x x))
  (defstrand group-init 1 (k-magic k-magic) (group group) (alpha alpha))
  (defstrand init 2 (k-magic k-magic) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (x x))
  (defstrand init 4 (k-magic k-magic-0) (n n) (group group-0) (a a-0)
    (b b-0) (g (exp (gen) alpha-0)) (x x-0)
    (y (mul y x alpha (rec x-0) (rec alpha-0))))
  (defstrand group-init 1 (k-magic k-magic-0) (group group-0)
    (alpha alpha-0))
  (defstrand resp 3 (k-magic k-magic-1) (group group-1) (a a-1) (b b-1)
    (g (exp (gen) (mul y x alpha (rec x-0) (rec y-0)))) (y y-0) (x x-1))
  (precedes ((0 2) (3 0)) ((1 0) (0 0)) ((1 0) (2 0)) ((2 1) (0 1))
    ((3 1) (5 0)) ((3 3) (0 3)) ((4 0) (3 0)) ((5 2) (3 2)))
  (non-orig k-magic k-magic-0 k-magic-1 (privk a) (privk b))
  (uniq-gen n y x alpha x-0 alpha-0 y-0)
  (absent (y x) (y-0 x-1))
  (operation nonce-test (added-strand resp 3)
    (exp (gen) (mul y x alpha (rec x-0))) (3 2))
  (traces
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (recv (enc a b group (exp (gen) (mul x alpha)) (privk a)))
      (send
        (enc a b group (exp (gen) (mul y alpha))
          (exp (gen) (mul x alpha)) (privk b)))
      (recv (enc n (exp (gen) (mul y x alpha)))) (send n))
    ((send (enc "Group id" group (exp (gen) alpha) k-magic)))
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (send (enc a b group (exp (gen) (mul x alpha)) (privk a))))
    ((recv (enc "Group id" group-0 (exp (gen) alpha-0) k-magic-0))
      (send
        (enc a-0 b-0 group-0 (exp (gen) (mul x-0 alpha-0)) (privk a-0)))
      (recv
        (enc a-0 b-0 group-0 (exp (gen) (mul y x alpha (rec x-0)))
          (exp (gen) (mul x-0 alpha-0)) (privk b-0)))
      (send (enc n (exp (gen) (mul y x alpha)))))
    ((send (enc "Group id" group-0 (exp (gen) alpha-0) k-magic-0)))
    ((recv
       (enc "Group id" group-1
         (exp (gen) (mul y x alpha (rec x-0) (rec y-0))) k-magic-1))
      (recv
        (enc a-1 b-1 group-1
          (exp (gen) (mul y x alpha (rec x-0) (rec y-0) x-1))
          (privk a-1)))
      (send
        (enc a-1 b-1 group-1 (exp (gen) (mul y x alpha (rec x-0)))
          (exp (gen) (mul y x alpha (rec x-0) (rec y-0) x-1))
          (privk b-1)))))
  (label 54)
  (parent 33)
  (unrealized (5 0) (5 1))
  (dead)
  (comment "empty cohort"))

(defskeleton dh_sig2
  (vars (k-magic k-magic-0 k-magic-1 skey)
    (n group group-0 group-1 text) (a b a-0 b-0 a-1 b-1 name)
    (y x alpha x-0 alpha-0 x-1 rndx))
  (defstrand resp 5 (k-magic k-magic) (n n) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (y y) (x x))
  (defstrand group-init 1 (k-magic k-magic) (group group) (alpha alpha))
  (defstrand init 2 (k-magic k-magic) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (x x))
  (defstrand init 4 (k-magic k-magic-0) (n n) (group group-0) (a a-0)
    (b b-0) (g (exp (gen) alpha-0)) (x x-0)
    (y (mul y x alpha (rec x-0) (rec alpha-0))))
  (defstrand group-init 1 (k-magic k-magic-0) (group group-0)
    (alpha alpha-0))
  (defstrand init 2 (k-magic k-magic-1) (group group-1) (a a-1) (b b-1)
    (g (exp (gen) (mul y x alpha (rec x-0) (rec x-1)))) (x x-1))
  (precedes ((0 2) (3 0)) ((1 0) (0 0)) ((1 0) (2 0)) ((2 1) (0 1))
    ((3 1) (5 0)) ((3 3) (0 3)) ((4 0) (3 0)) ((5 1) (3 2)))
  (non-orig k-magic k-magic-0 k-magic-1 (privk a) (privk b))
  (uniq-gen n y x alpha x-0 alpha-0 x-1)
  (absent (y x))
  (operation nonce-test (added-strand init 2)
    (exp (gen) (mul y x alpha (rec x-0))) (3 2))
  (traces
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (recv (enc a b group (exp (gen) (mul x alpha)) (privk a)))
      (send
        (enc a b group (exp (gen) (mul y alpha))
          (exp (gen) (mul x alpha)) (privk b)))
      (recv (enc n (exp (gen) (mul y x alpha)))) (send n))
    ((send (enc "Group id" group (exp (gen) alpha) k-magic)))
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (send (enc a b group (exp (gen) (mul x alpha)) (privk a))))
    ((recv (enc "Group id" group-0 (exp (gen) alpha-0) k-magic-0))
      (send
        (enc a-0 b-0 group-0 (exp (gen) (mul x-0 alpha-0)) (privk a-0)))
      (recv
        (enc a-0 b-0 group-0 (exp (gen) (mul y x alpha (rec x-0)))
          (exp (gen) (mul x-0 alpha-0)) (privk b-0)))
      (send (enc n (exp (gen) (mul y x alpha)))))
    ((send (enc "Group id" group-0 (exp (gen) alpha-0) k-magic-0)))
    ((recv
       (enc "Group id" group-1
         (exp (gen) (mul y x alpha (rec x-0) (rec x-1))) k-magic-1))
      (send
        (enc a-1 b-1 group-1 (exp (gen) (mul y x alpha (rec x-0)))
          (privk a-1)))))
  (label 55)
  (parent 33)
  (unrealized (5 0))
  (dead)
  (comment "empty cohort"))

(defskeleton dh_sig2
  (vars (k-magic k-magic-0 skey) (n group group-0 text)
    (a b a-0 b-0 name) (y x alpha x-0 alpha-0 rndx))
  (defstrand resp 5 (k-magic k-magic) (n n) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (y y) (x x))
  (defstrand group-init 1 (k-magic k-magic) (group group) (alpha alpha))
  (defstrand init 2 (k-magic k-magic) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (x x))
  (defstrand init 4 (k-magic k-magic-0) (n n) (group group-0) (a a-0)
    (b b-0) (g (exp (gen) alpha-0)) (x x-0)
    (y (mul y x alpha (rec x-0) (rec alpha-0))))
  (defstrand group-init 1 (k-magic k-magic-0) (group group-0)
    (alpha alpha-0))
  (deflistener (cat (exp (gen) (mul y x (rec x-0))) alpha))
  (precedes ((0 2) (3 0)) ((1 0) (0 0)) ((1 0) (2 0)) ((2 1) (0 1))
    ((3 1) (5 0)) ((3 3) (0 3)) ((4 0) (3 0)) ((5 1) (3 2)))
  (non-orig k-magic k-magic-0 (privk a) (privk b))
  (uniq-gen n y x alpha x-0 alpha-0)
  (absent (y x))
  (operation nonce-test
    (added-listener (cat (exp (gen) (mul y x (rec x-0))) alpha))
    (exp (gen) (mul y x alpha (rec x-0))) (3 2))
  (traces
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (recv (enc a b group (exp (gen) (mul x alpha)) (privk a)))
      (send
        (enc a b group (exp (gen) (mul y alpha))
          (exp (gen) (mul x alpha)) (privk b)))
      (recv (enc n (exp (gen) (mul y x alpha)))) (send n))
    ((send (enc "Group id" group (exp (gen) alpha) k-magic)))
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (send (enc a b group (exp (gen) (mul x alpha)) (privk a))))
    ((recv (enc "Group id" group-0 (exp (gen) alpha-0) k-magic-0))
      (send
        (enc a-0 b-0 group-0 (exp (gen) (mul x-0 alpha-0)) (privk a-0)))
      (recv
        (enc a-0 b-0 group-0 (exp (gen) (mul y x alpha (rec x-0)))
          (exp (gen) (mul x-0 alpha-0)) (privk b-0)))
      (send (enc n (exp (gen) (mul y x alpha)))))
    ((send (enc "Group id" group-0 (exp (gen) alpha-0) k-magic-0)))
    ((recv (cat (exp (gen) (mul y x (rec x-0))) alpha))
      (send (cat (exp (gen) (mul y x (rec x-0))) alpha))))
  (label 56)
  (parent 33)
  (unrealized (5 0))
  (dead)
  (comment "empty cohort"))

(defskeleton dh_sig2
  (vars (k-magic k-magic-0 skey) (n group group-0 text)
    (a b a-0 b-0 name) (y x alpha x-0 alpha-0 rndx))
  (defstrand resp 5 (k-magic k-magic) (n n) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (y y) (x x))
  (defstrand group-init 1 (k-magic k-magic) (group group) (alpha alpha))
  (defstrand init 2 (k-magic k-magic) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (x x))
  (defstrand init 4 (k-magic k-magic-0) (n n) (group group-0) (a a-0)
    (b b-0) (g (exp (gen) alpha-0)) (x x-0)
    (y (mul y x alpha (rec x-0) (rec alpha-0))))
  (defstrand group-init 1 (k-magic k-magic-0) (group group-0)
    (alpha alpha-0))
  (deflistener (cat (exp (gen) (mul y alpha (rec x-0))) x))
  (precedes ((0 2) (3 0)) ((1 0) (0 0)) ((1 0) (2 0)) ((2 1) (0 1))
    ((3 1) (5 0)) ((3 3) (0 3)) ((4 0) (3 0)) ((5 1) (3 2)))
  (non-orig k-magic k-magic-0 (privk a) (privk b))
  (uniq-gen n y x alpha x-0 alpha-0)
  (absent (y x))
  (operation nonce-test
    (added-listener (cat (exp (gen) (mul y alpha (rec x-0))) x))
    (exp (gen) (mul y x alpha (rec x-0))) (3 2))
  (traces
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (recv (enc a b group (exp (gen) (mul x alpha)) (privk a)))
      (send
        (enc a b group (exp (gen) (mul y alpha))
          (exp (gen) (mul x alpha)) (privk b)))
      (recv (enc n (exp (gen) (mul y x alpha)))) (send n))
    ((send (enc "Group id" group (exp (gen) alpha) k-magic)))
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (send (enc a b group (exp (gen) (mul x alpha)) (privk a))))
    ((recv (enc "Group id" group-0 (exp (gen) alpha-0) k-magic-0))
      (send
        (enc a-0 b-0 group-0 (exp (gen) (mul x-0 alpha-0)) (privk a-0)))
      (recv
        (enc a-0 b-0 group-0 (exp (gen) (mul y x alpha (rec x-0)))
          (exp (gen) (mul x-0 alpha-0)) (privk b-0)))
      (send (enc n (exp (gen) (mul y x alpha)))))
    ((send (enc "Group id" group-0 (exp (gen) alpha-0) k-magic-0)))
    ((recv (cat (exp (gen) (mul y alpha (rec x-0))) x))
      (send (cat (exp (gen) (mul y alpha (rec x-0))) x))))
  (label 57)
  (parent 33)
  (unrealized (5 0))
  (dead)
  (comment "empty cohort"))

(defskeleton dh_sig2
  (vars (k-magic k-magic-0 skey) (n group group-0 text)
    (a b a-0 b-0 name) (y x alpha x-0 alpha-0 rndx))
  (defstrand resp 5 (k-magic k-magic) (n n) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (y y) (x x))
  (defstrand group-init 1 (k-magic k-magic) (group group) (alpha alpha))
  (defstrand init 2 (k-magic k-magic) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (x x))
  (defstrand init 4 (k-magic k-magic-0) (n n) (group group-0) (a a-0)
    (b b-0) (g (exp (gen) alpha-0)) (x x-0)
    (y (mul y x alpha (rec x-0) (rec alpha-0))))
  (defstrand group-init 1 (k-magic k-magic-0) (group group-0)
    (alpha alpha-0))
  (deflistener (cat (exp (gen) (mul x alpha (rec x-0))) y))
  (precedes ((0 2) (3 0)) ((1 0) (0 0)) ((1 0) (2 0)) ((2 1) (0 1))
    ((3 1) (5 0)) ((3 3) (0 3)) ((4 0) (3 0)) ((5 1) (3 2)))
  (non-orig k-magic k-magic-0 (privk a) (privk b))
  (uniq-gen n y x alpha x-0 alpha-0)
  (absent (y x))
  (operation nonce-test
    (added-listener (cat (exp (gen) (mul x alpha (rec x-0))) y))
    (exp (gen) (mul y x alpha (rec x-0))) (3 2))
  (traces
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (recv (enc a b group (exp (gen) (mul x alpha)) (privk a)))
      (send
        (enc a b group (exp (gen) (mul y alpha))
          (exp (gen) (mul x alpha)) (privk b)))
      (recv (enc n (exp (gen) (mul y x alpha)))) (send n))
    ((send (enc "Group id" group (exp (gen) alpha) k-magic)))
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (send (enc a b group (exp (gen) (mul x alpha)) (privk a))))
    ((recv (enc "Group id" group-0 (exp (gen) alpha-0) k-magic-0))
      (send
        (enc a-0 b-0 group-0 (exp (gen) (mul x-0 alpha-0)) (privk a-0)))
      (recv
        (enc a-0 b-0 group-0 (exp (gen) (mul y x alpha (rec x-0)))
          (exp (gen) (mul x-0 alpha-0)) (privk b-0)))
      (send (enc n (exp (gen) (mul y x alpha)))))
    ((send (enc "Group id" group-0 (exp (gen) alpha-0) k-magic-0)))
    ((recv (cat (exp (gen) (mul x alpha (rec x-0))) y))
      (send (cat (exp (gen) (mul x alpha (rec x-0))) y))))
  (label 58)
  (parent 33)
  (unrealized (5 0))
  (dead)
  (comment "empty cohort"))

(defskeleton dh_sig2
  (vars (k-magic k-magic-0 skey) (n group text) (a b a-0 b-0 name)
    (y x alpha x-0 alpha-0 rndx))
  (defstrand resp 5 (k-magic k-magic) (n n) (group group) (a a) (b b)
    (g (exp (gen) alpha-0)) (y y) (x (mul x alpha (rec alpha-0))))
  (defstrand group-init 1 (k-magic k-magic) (group group)
    (alpha alpha-0))
  (defstrand init 2 (k-magic k-magic-0) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (x x))
  (defstrand group-init 1 (k-magic k-magic-0) (group group)
    (alpha alpha))
  (defstrand init 4 (k-magic k-magic) (n n) (group group) (a a-0)
    (b b-0) (g (exp (gen) alpha-0)) (x x-0)
    (y (mul y x alpha (rec x-0) (rec alpha-0))))
  (deflistener (cat (exp (gen) (mul y x alpha)) x-0))
  (precedes ((0 2) (4 0)) ((1 0) (0 0)) ((1 0) (2 0)) ((2 1) (0 1))
    ((3 0) (2 0)) ((4 1) (5 0)) ((4 3) (0 3)) ((5 1) (4 2)))
  (non-orig k-magic k-magic-0 (privk a) (privk b))
  (uniq-gen n y x alpha x-0 alpha-0)
  (absent (y (mul x alpha (rec alpha-0))))
  (operation nonce-test
    (added-listener (cat (exp (gen) (mul y x alpha)) x-0))
    (exp (gen) (mul y x alpha (rec x-0))) (4 2))
  (traces
    ((recv (enc "Group id" group (exp (gen) alpha-0) k-magic))
      (recv (enc a b group (exp (gen) (mul x alpha)) (privk a)))
      (send
        (enc a b group (exp (gen) (mul y alpha-0))
          (exp (gen) (mul x alpha)) (privk b)))
      (recv (enc n (exp (gen) (mul y x alpha)))) (send n))
    ((send (enc "Group id" group (exp (gen) alpha-0) k-magic)))
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic-0))
      (send (enc a b group (exp (gen) (mul x alpha)) (privk a))))
    ((send (enc "Group id" group (exp (gen) alpha) k-magic-0)))
    ((recv (enc "Group id" group (exp (gen) alpha-0) k-magic))
      (send
        (enc a-0 b-0 group (exp (gen) (mul x-0 alpha-0)) (privk a-0)))
      (recv
        (enc a-0 b-0 group (exp (gen) (mul y x alpha (rec x-0)))
          (exp (gen) (mul x-0 alpha-0)) (privk b-0)))
      (send (enc n (exp (gen) (mul y x alpha)))))
    ((recv (cat (exp (gen) (mul y x alpha)) x-0))
      (send (cat (exp (gen) (mul y x alpha)) x-0))))
  (label 59)
  (parent 39)
  (unrealized (5 0))
  (dead)
  (comment "empty cohort"))

(defskeleton dh_sig2
  (vars (k-magic k-magic-0 k-magic-1 skey) (n group group-0 text)
    (a b a-0 b-0 a-1 b-1 name) (y x alpha x-0 alpha-0 y-0 rndx)
    (x-1 expt))
  (defstrand resp 5 (k-magic k-magic) (n n) (group group) (a a) (b b)
    (g (exp (gen) alpha-0)) (y y) (x (mul x alpha (rec alpha-0))))
  (defstrand group-init 1 (k-magic k-magic) (group group)
    (alpha alpha-0))
  (defstrand init 2 (k-magic k-magic-0) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (x x))
  (defstrand group-init 1 (k-magic k-magic-0) (group group)
    (alpha alpha))
  (defstrand init 4 (k-magic k-magic) (n n) (group group) (a a-0)
    (b b-0) (g (exp (gen) alpha-0)) (x x-0)
    (y (mul y x alpha (rec x-0) (rec alpha-0))))
  (defstrand resp 3 (k-magic k-magic-1) (group group-0) (a a-1) (b b-1)
    (g (exp (gen) (mul y x alpha (rec x-0) (rec y-0)))) (y y-0) (x x-1))
  (precedes ((0 2) (4 0)) ((1 0) (0 0)) ((1 0) (2 0)) ((2 1) (0 1))
    ((3 0) (2 0)) ((4 1) (5 0)) ((4 3) (0 3)) ((5 2) (4 2)))
  (non-orig k-magic k-magic-0 k-magic-1 (privk a) (privk b))
  (uniq-gen n y x alpha x-0 alpha-0 y-0)
  (absent (y (mul x alpha (rec alpha-0))) (y-0 x-1))
  (operation nonce-test (added-strand resp 3)
    (exp (gen) (mul y x alpha (rec x-0))) (4 2))
  (traces
    ((recv (enc "Group id" group (exp (gen) alpha-0) k-magic))
      (recv (enc a b group (exp (gen) (mul x alpha)) (privk a)))
      (send
        (enc a b group (exp (gen) (mul y alpha-0))
          (exp (gen) (mul x alpha)) (privk b)))
      (recv (enc n (exp (gen) (mul y x alpha)))) (send n))
    ((send (enc "Group id" group (exp (gen) alpha-0) k-magic)))
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic-0))
      (send (enc a b group (exp (gen) (mul x alpha)) (privk a))))
    ((send (enc "Group id" group (exp (gen) alpha) k-magic-0)))
    ((recv (enc "Group id" group (exp (gen) alpha-0) k-magic))
      (send
        (enc a-0 b-0 group (exp (gen) (mul x-0 alpha-0)) (privk a-0)))
      (recv
        (enc a-0 b-0 group (exp (gen) (mul y x alpha (rec x-0)))
          (exp (gen) (mul x-0 alpha-0)) (privk b-0)))
      (send (enc n (exp (gen) (mul y x alpha)))))
    ((recv
       (enc "Group id" group-0
         (exp (gen) (mul y x alpha (rec x-0) (rec y-0))) k-magic-1))
      (recv
        (enc a-1 b-1 group-0
          (exp (gen) (mul y x alpha (rec x-0) (rec y-0) x-1))
          (privk a-1)))
      (send
        (enc a-1 b-1 group-0 (exp (gen) (mul y x alpha (rec x-0)))
          (exp (gen) (mul y x alpha (rec x-0) (rec y-0) x-1))
          (privk b-1)))))
  (label 60)
  (parent 39)
  (unrealized (5 0) (5 1))
  (dead)
  (comment "empty cohort"))

(defskeleton dh_sig2
  (vars (k-magic k-magic-0 k-magic-1 skey) (n group group-0 text)
    (a b a-0 b-0 a-1 b-1 name) (y x alpha x-0 alpha-0 x-1 rndx))
  (defstrand resp 5 (k-magic k-magic) (n n) (group group) (a a) (b b)
    (g (exp (gen) alpha-0)) (y y) (x (mul x alpha (rec alpha-0))))
  (defstrand group-init 1 (k-magic k-magic) (group group)
    (alpha alpha-0))
  (defstrand init 2 (k-magic k-magic-0) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (x x))
  (defstrand group-init 1 (k-magic k-magic-0) (group group)
    (alpha alpha))
  (defstrand init 4 (k-magic k-magic) (n n) (group group) (a a-0)
    (b b-0) (g (exp (gen) alpha-0)) (x x-0)
    (y (mul y x alpha (rec x-0) (rec alpha-0))))
  (defstrand init 2 (k-magic k-magic-1) (group group-0) (a a-1) (b b-1)
    (g (exp (gen) (mul y x alpha (rec x-0) (rec x-1)))) (x x-1))
  (precedes ((0 2) (4 0)) ((1 0) (0 0)) ((1 0) (2 0)) ((2 1) (0 1))
    ((3 0) (2 0)) ((4 1) (5 0)) ((4 3) (0 3)) ((5 1) (4 2)))
  (non-orig k-magic k-magic-0 k-magic-1 (privk a) (privk b))
  (uniq-gen n y x alpha x-0 alpha-0 x-1)
  (absent (y (mul x alpha (rec alpha-0))))
  (operation nonce-test (added-strand init 2)
    (exp (gen) (mul y x alpha (rec x-0))) (4 2))
  (traces
    ((recv (enc "Group id" group (exp (gen) alpha-0) k-magic))
      (recv (enc a b group (exp (gen) (mul x alpha)) (privk a)))
      (send
        (enc a b group (exp (gen) (mul y alpha-0))
          (exp (gen) (mul x alpha)) (privk b)))
      (recv (enc n (exp (gen) (mul y x alpha)))) (send n))
    ((send (enc "Group id" group (exp (gen) alpha-0) k-magic)))
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic-0))
      (send (enc a b group (exp (gen) (mul x alpha)) (privk a))))
    ((send (enc "Group id" group (exp (gen) alpha) k-magic-0)))
    ((recv (enc "Group id" group (exp (gen) alpha-0) k-magic))
      (send
        (enc a-0 b-0 group (exp (gen) (mul x-0 alpha-0)) (privk a-0)))
      (recv
        (enc a-0 b-0 group (exp (gen) (mul y x alpha (rec x-0)))
          (exp (gen) (mul x-0 alpha-0)) (privk b-0)))
      (send (enc n (exp (gen) (mul y x alpha)))))
    ((recv
       (enc "Group id" group-0
         (exp (gen) (mul y x alpha (rec x-0) (rec x-1))) k-magic-1))
      (send
        (enc a-1 b-1 group-0 (exp (gen) (mul y x alpha (rec x-0)))
          (privk a-1)))))
  (label 61)
  (parent 39)
  (unrealized (5 0))
  (dead)
  (comment "empty cohort"))

(defskeleton dh_sig2
  (vars (k-magic k-magic-0 skey) (n group text) (a b a-0 b-0 name)
    (y x alpha x-0 alpha-0 rndx))
  (defstrand resp 5 (k-magic k-magic) (n n) (group group) (a a) (b b)
    (g (exp (gen) alpha-0)) (y y) (x (mul x alpha (rec alpha-0))))
  (defstrand group-init 1 (k-magic k-magic) (group group)
    (alpha alpha-0))
  (defstrand init 2 (k-magic k-magic-0) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (x x))
  (defstrand group-init 1 (k-magic k-magic-0) (group group)
    (alpha alpha))
  (defstrand init 4 (k-magic k-magic) (n n) (group group) (a a-0)
    (b b-0) (g (exp (gen) alpha-0)) (x x-0)
    (y (mul y x alpha (rec x-0) (rec alpha-0))))
  (deflistener (cat (exp (gen) (mul y x (rec x-0))) alpha))
  (precedes ((0 2) (4 0)) ((1 0) (0 0)) ((1 0) (2 0)) ((2 1) (0 1))
    ((3 0) (2 0)) ((4 1) (5 0)) ((4 3) (0 3)) ((5 1) (4 2)))
  (non-orig k-magic k-magic-0 (privk a) (privk b))
  (uniq-gen n y x alpha x-0 alpha-0)
  (absent (y (mul x alpha (rec alpha-0))))
  (operation nonce-test
    (added-listener (cat (exp (gen) (mul y x (rec x-0))) alpha))
    (exp (gen) (mul y x alpha (rec x-0))) (4 2))
  (traces
    ((recv (enc "Group id" group (exp (gen) alpha-0) k-magic))
      (recv (enc a b group (exp (gen) (mul x alpha)) (privk a)))
      (send
        (enc a b group (exp (gen) (mul y alpha-0))
          (exp (gen) (mul x alpha)) (privk b)))
      (recv (enc n (exp (gen) (mul y x alpha)))) (send n))
    ((send (enc "Group id" group (exp (gen) alpha-0) k-magic)))
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic-0))
      (send (enc a b group (exp (gen) (mul x alpha)) (privk a))))
    ((send (enc "Group id" group (exp (gen) alpha) k-magic-0)))
    ((recv (enc "Group id" group (exp (gen) alpha-0) k-magic))
      (send
        (enc a-0 b-0 group (exp (gen) (mul x-0 alpha-0)) (privk a-0)))
      (recv
        (enc a-0 b-0 group (exp (gen) (mul y x alpha (rec x-0)))
          (exp (gen) (mul x-0 alpha-0)) (privk b-0)))
      (send (enc n (exp (gen) (mul y x alpha)))))
    ((recv (cat (exp (gen) (mul y x (rec x-0))) alpha))
      (send (cat (exp (gen) (mul y x (rec x-0))) alpha))))
  (label 62)
  (parent 39)
  (unrealized (5 0))
  (dead)
  (comment "empty cohort"))

(defskeleton dh_sig2
  (vars (k-magic k-magic-0 skey) (n group text) (a b a-0 b-0 name)
    (y x alpha x-0 alpha-0 rndx))
  (defstrand resp 5 (k-magic k-magic) (n n) (group group) (a a) (b b)
    (g (exp (gen) alpha-0)) (y y) (x (mul x alpha (rec alpha-0))))
  (defstrand group-init 1 (k-magic k-magic) (group group)
    (alpha alpha-0))
  (defstrand init 2 (k-magic k-magic-0) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (x x))
  (defstrand group-init 1 (k-magic k-magic-0) (group group)
    (alpha alpha))
  (defstrand init 4 (k-magic k-magic) (n n) (group group) (a a-0)
    (b b-0) (g (exp (gen) alpha-0)) (x x-0)
    (y (mul y x alpha (rec x-0) (rec alpha-0))))
  (deflistener (cat (exp (gen) (mul y alpha (rec x-0))) x))
  (precedes ((0 2) (4 0)) ((1 0) (0 0)) ((1 0) (2 0)) ((2 1) (0 1))
    ((3 0) (2 0)) ((4 1) (5 0)) ((4 3) (0 3)) ((5 1) (4 2)))
  (non-orig k-magic k-magic-0 (privk a) (privk b))
  (uniq-gen n y x alpha x-0 alpha-0)
  (absent (y (mul x alpha (rec alpha-0))))
  (operation nonce-test
    (added-listener (cat (exp (gen) (mul y alpha (rec x-0))) x))
    (exp (gen) (mul y x alpha (rec x-0))) (4 2))
  (traces
    ((recv (enc "Group id" group (exp (gen) alpha-0) k-magic))
      (recv (enc a b group (exp (gen) (mul x alpha)) (privk a)))
      (send
        (enc a b group (exp (gen) (mul y alpha-0))
          (exp (gen) (mul x alpha)) (privk b)))
      (recv (enc n (exp (gen) (mul y x alpha)))) (send n))
    ((send (enc "Group id" group (exp (gen) alpha-0) k-magic)))
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic-0))
      (send (enc a b group (exp (gen) (mul x alpha)) (privk a))))
    ((send (enc "Group id" group (exp (gen) alpha) k-magic-0)))
    ((recv (enc "Group id" group (exp (gen) alpha-0) k-magic))
      (send
        (enc a-0 b-0 group (exp (gen) (mul x-0 alpha-0)) (privk a-0)))
      (recv
        (enc a-0 b-0 group (exp (gen) (mul y x alpha (rec x-0)))
          (exp (gen) (mul x-0 alpha-0)) (privk b-0)))
      (send (enc n (exp (gen) (mul y x alpha)))))
    ((recv (cat (exp (gen) (mul y alpha (rec x-0))) x))
      (send (cat (exp (gen) (mul y alpha (rec x-0))) x))))
  (label 63)
  (parent 39)
  (unrealized (5 0))
  (dead)
  (comment "empty cohort"))

(defskeleton dh_sig2
  (vars (k-magic k-magic-0 skey) (n group text) (a b a-0 b-0 name)
    (y x alpha x-0 alpha-0 rndx))
  (defstrand resp 5 (k-magic k-magic) (n n) (group group) (a a) (b b)
    (g (exp (gen) alpha-0)) (y y) (x (mul x alpha (rec alpha-0))))
  (defstrand group-init 1 (k-magic k-magic) (group group)
    (alpha alpha-0))
  (defstrand init 2 (k-magic k-magic-0) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (x x))
  (defstrand group-init 1 (k-magic k-magic-0) (group group)
    (alpha alpha))
  (defstrand init 4 (k-magic k-magic) (n n) (group group) (a a-0)
    (b b-0) (g (exp (gen) alpha-0)) (x x-0)
    (y (mul y x alpha (rec x-0) (rec alpha-0))))
  (deflistener (cat (exp (gen) (mul x alpha (rec x-0))) y))
  (precedes ((0 2) (4 0)) ((1 0) (0 0)) ((1 0) (2 0)) ((2 1) (0 1))
    ((3 0) (2 0)) ((4 1) (5 0)) ((4 3) (0 3)) ((5 1) (4 2)))
  (non-orig k-magic k-magic-0 (privk a) (privk b))
  (uniq-gen n y x alpha x-0 alpha-0)
  (absent (y (mul x alpha (rec alpha-0))))
  (operation nonce-test
    (added-listener (cat (exp (gen) (mul x alpha (rec x-0))) y))
    (exp (gen) (mul y x alpha (rec x-0))) (4 2))
  (traces
    ((recv (enc "Group id" group (exp (gen) alpha-0) k-magic))
      (recv (enc a b group (exp (gen) (mul x alpha)) (privk a)))
      (send
        (enc a b group (exp (gen) (mul y alpha-0))
          (exp (gen) (mul x alpha)) (privk b)))
      (recv (enc n (exp (gen) (mul y x alpha)))) (send n))
    ((send (enc "Group id" group (exp (gen) alpha-0) k-magic)))
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic-0))
      (send (enc a b group (exp (gen) (mul x alpha)) (privk a))))
    ((send (enc "Group id" group (exp (gen) alpha) k-magic-0)))
    ((recv (enc "Group id" group (exp (gen) alpha-0) k-magic))
      (send
        (enc a-0 b-0 group (exp (gen) (mul x-0 alpha-0)) (privk a-0)))
      (recv
        (enc a-0 b-0 group (exp (gen) (mul y x alpha (rec x-0)))
          (exp (gen) (mul x-0 alpha-0)) (privk b-0)))
      (send (enc n (exp (gen) (mul y x alpha)))))
    ((recv (cat (exp (gen) (mul x alpha (rec x-0))) y))
      (send (cat (exp (gen) (mul x alpha (rec x-0))) y))))
  (label 64)
  (parent 39)
  (unrealized (5 0))
  (dead)
  (comment "empty cohort"))

(defskeleton dh_sig2
  (vars (k-magic k-magic-0 skey) (n group text) (a b a-0 b-0 name)
    (alpha y x x-0 alpha-0 rndx))
  (defstrand resp 5 (k-magic k-magic) (n n) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (y y) (x (mul (rec alpha) x alpha-0)))
  (defstrand group-init 1 (k-magic k-magic) (group group) (alpha alpha))
  (defstrand init 2 (k-magic k-magic-0) (group group) (a a) (b b)
    (g (exp (gen) alpha-0)) (x x))
  (defstrand group-init 1 (k-magic k-magic-0) (group group)
    (alpha alpha-0))
  (defstrand init 4 (k-magic k-magic-0) (n n) (group group) (a a-0)
    (b b-0) (g (exp (gen) alpha-0)) (x x-0) (y (mul y x (rec x-0))))
  (deflistener (cat (exp (gen) (mul y x (rec x-0))) alpha-0))
  (precedes ((0 2) (4 0)) ((1 0) (0 0)) ((1 0) (2 0)) ((2 1) (0 1))
    ((3 0) (2 0)) ((4 1) (5 0)) ((4 3) (0 3)) ((5 1) (4 2)))
  (non-orig k-magic k-magic-0 (privk a) (privk b))
  (uniq-gen n alpha y x x-0 alpha-0)
  (absent (y (mul (rec alpha) x alpha-0)))
  (operation nonce-test
    (added-listener (cat (exp (gen) (mul y x (rec x-0))) alpha-0))
    (exp (gen) (mul y x (rec x-0) alpha-0)) (4 2))
  (traces
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (recv (enc a b group (exp (gen) (mul x alpha-0)) (privk a)))
      (send
        (enc a b group (exp (gen) (mul alpha y))
          (exp (gen) (mul x alpha-0)) (privk b)))
      (recv (enc n (exp (gen) (mul y x alpha-0)))) (send n))
    ((send (enc "Group id" group (exp (gen) alpha) k-magic)))
    ((recv (enc "Group id" group (exp (gen) alpha-0) k-magic-0))
      (send (enc a b group (exp (gen) (mul x alpha-0)) (privk a))))
    ((send (enc "Group id" group (exp (gen) alpha-0) k-magic-0)))
    ((recv (enc "Group id" group (exp (gen) alpha-0) k-magic-0))
      (send
        (enc a-0 b-0 group (exp (gen) (mul x-0 alpha-0)) (privk a-0)))
      (recv
        (enc a-0 b-0 group (exp (gen) (mul y x (rec x-0) alpha-0))
          (exp (gen) (mul x-0 alpha-0)) (privk b-0)))
      (send (enc n (exp (gen) (mul y x alpha-0)))))
    ((recv (cat (exp (gen) (mul y x (rec x-0))) alpha-0))
      (send (cat (exp (gen) (mul y x (rec x-0))) alpha-0))))
  (label 65)
  (parent 40)
  (unrealized (5 0))
  (dead)
  (comment "empty cohort"))

(defskeleton dh_sig2
  (vars (k-magic k-magic-0 k-magic-1 skey) (n group group-0 text)
    (a b a-0 b-0 a-1 b-1 name) (alpha y x x-0 alpha-0 y-0 rndx)
    (x-1 expt))
  (defstrand resp 5 (k-magic k-magic) (n n) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (y y) (x (mul (rec alpha) x alpha-0)))
  (defstrand group-init 1 (k-magic k-magic) (group group) (alpha alpha))
  (defstrand init 2 (k-magic k-magic-0) (group group) (a a) (b b)
    (g (exp (gen) alpha-0)) (x x))
  (defstrand group-init 1 (k-magic k-magic-0) (group group)
    (alpha alpha-0))
  (defstrand init 4 (k-magic k-magic-0) (n n) (group group) (a a-0)
    (b b-0) (g (exp (gen) alpha-0)) (x x-0) (y (mul y x (rec x-0))))
  (defstrand resp 3 (k-magic k-magic-1) (group group-0) (a a-1) (b b-1)
    (g (exp (gen) (mul y x (rec x-0) alpha-0 (rec y-0)))) (y y-0)
    (x x-1))
  (precedes ((0 2) (4 0)) ((1 0) (0 0)) ((1 0) (2 0)) ((2 1) (0 1))
    ((3 0) (2 0)) ((4 1) (5 0)) ((4 3) (0 3)) ((5 2) (4 2)))
  (non-orig k-magic k-magic-0 k-magic-1 (privk a) (privk b))
  (uniq-gen n alpha y x x-0 alpha-0 y-0)
  (absent (y (mul (rec alpha) x alpha-0)) (y-0 x-1))
  (operation nonce-test (added-strand resp 3)
    (exp (gen) (mul y x (rec x-0) alpha-0)) (4 2))
  (traces
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (recv (enc a b group (exp (gen) (mul x alpha-0)) (privk a)))
      (send
        (enc a b group (exp (gen) (mul alpha y))
          (exp (gen) (mul x alpha-0)) (privk b)))
      (recv (enc n (exp (gen) (mul y x alpha-0)))) (send n))
    ((send (enc "Group id" group (exp (gen) alpha) k-magic)))
    ((recv (enc "Group id" group (exp (gen) alpha-0) k-magic-0))
      (send (enc a b group (exp (gen) (mul x alpha-0)) (privk a))))
    ((send (enc "Group id" group (exp (gen) alpha-0) k-magic-0)))
    ((recv (enc "Group id" group (exp (gen) alpha-0) k-magic-0))
      (send
        (enc a-0 b-0 group (exp (gen) (mul x-0 alpha-0)) (privk a-0)))
      (recv
        (enc a-0 b-0 group (exp (gen) (mul y x (rec x-0) alpha-0))
          (exp (gen) (mul x-0 alpha-0)) (privk b-0)))
      (send (enc n (exp (gen) (mul y x alpha-0)))))
    ((recv
       (enc "Group id" group-0
         (exp (gen) (mul y x (rec x-0) alpha-0 (rec y-0))) k-magic-1))
      (recv
        (enc a-1 b-1 group-0
          (exp (gen) (mul y x (rec x-0) alpha-0 (rec y-0) x-1))
          (privk a-1)))
      (send
        (enc a-1 b-1 group-0 (exp (gen) (mul y x (rec x-0) alpha-0))
          (exp (gen) (mul y x (rec x-0) alpha-0 (rec y-0) x-1))
          (privk b-1)))))
  (label 66)
  (parent 40)
  (unrealized (5 0) (5 1))
  (dead)
  (comment "empty cohort"))

(defskeleton dh_sig2
  (vars (k-magic k-magic-0 k-magic-1 skey) (n group group-0 text)
    (a b a-0 b-0 a-1 b-1 name) (alpha y x x-0 alpha-0 x-1 rndx))
  (defstrand resp 5 (k-magic k-magic) (n n) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (y y) (x (mul (rec alpha) x alpha-0)))
  (defstrand group-init 1 (k-magic k-magic) (group group) (alpha alpha))
  (defstrand init 2 (k-magic k-magic-0) (group group) (a a) (b b)
    (g (exp (gen) alpha-0)) (x x))
  (defstrand group-init 1 (k-magic k-magic-0) (group group)
    (alpha alpha-0))
  (defstrand init 4 (k-magic k-magic-0) (n n) (group group) (a a-0)
    (b b-0) (g (exp (gen) alpha-0)) (x x-0) (y (mul y x (rec x-0))))
  (defstrand init 2 (k-magic k-magic-1) (group group-0) (a a-1) (b b-1)
    (g (exp (gen) (mul y x (rec x-0) alpha-0 (rec x-1)))) (x x-1))
  (precedes ((0 2) (4 0)) ((1 0) (0 0)) ((1 0) (2 0)) ((2 1) (0 1))
    ((3 0) (2 0)) ((4 1) (5 0)) ((4 3) (0 3)) ((5 1) (4 2)))
  (non-orig k-magic k-magic-0 k-magic-1 (privk a) (privk b))
  (uniq-gen n alpha y x x-0 alpha-0 x-1)
  (absent (y (mul (rec alpha) x alpha-0)))
  (operation nonce-test (added-strand init 2)
    (exp (gen) (mul y x (rec x-0) alpha-0)) (4 2))
  (traces
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (recv (enc a b group (exp (gen) (mul x alpha-0)) (privk a)))
      (send
        (enc a b group (exp (gen) (mul alpha y))
          (exp (gen) (mul x alpha-0)) (privk b)))
      (recv (enc n (exp (gen) (mul y x alpha-0)))) (send n))
    ((send (enc "Group id" group (exp (gen) alpha) k-magic)))
    ((recv (enc "Group id" group (exp (gen) alpha-0) k-magic-0))
      (send (enc a b group (exp (gen) (mul x alpha-0)) (privk a))))
    ((send (enc "Group id" group (exp (gen) alpha-0) k-magic-0)))
    ((recv (enc "Group id" group (exp (gen) alpha-0) k-magic-0))
      (send
        (enc a-0 b-0 group (exp (gen) (mul x-0 alpha-0)) (privk a-0)))
      (recv
        (enc a-0 b-0 group (exp (gen) (mul y x (rec x-0) alpha-0))
          (exp (gen) (mul x-0 alpha-0)) (privk b-0)))
      (send (enc n (exp (gen) (mul y x alpha-0)))))
    ((recv
       (enc "Group id" group-0
         (exp (gen) (mul y x (rec x-0) alpha-0 (rec x-1))) k-magic-1))
      (send
        (enc a-1 b-1 group-0 (exp (gen) (mul y x (rec x-0) alpha-0))
          (privk a-1)))))
  (label 67)
  (parent 40)
  (unrealized (5 0))
  (dead)
  (comment "empty cohort"))

(defskeleton dh_sig2
  (vars (k-magic k-magic-0 skey) (n group text) (a b a-0 b-0 name)
    (alpha y x x-0 alpha-0 rndx))
  (defstrand resp 5 (k-magic k-magic) (n n) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (y y) (x (mul (rec alpha) x alpha-0)))
  (defstrand group-init 1 (k-magic k-magic) (group group) (alpha alpha))
  (defstrand init 2 (k-magic k-magic-0) (group group) (a a) (b b)
    (g (exp (gen) alpha-0)) (x x))
  (defstrand group-init 1 (k-magic k-magic-0) (group group)
    (alpha alpha-0))
  (defstrand init 4 (k-magic k-magic-0) (n n) (group group) (a a-0)
    (b b-0) (g (exp (gen) alpha-0)) (x x-0) (y (mul y x (rec x-0))))
  (deflistener (cat (exp (gen) (mul y x alpha-0)) x-0))
  (precedes ((0 2) (4 0)) ((1 0) (0 0)) ((1 0) (2 0)) ((2 1) (0 1))
    ((3 0) (2 0)) ((4 1) (5 0)) ((4 3) (0 3)) ((5 1) (4 2)))
  (non-orig k-magic k-magic-0 (privk a) (privk b))
  (uniq-gen n alpha y x x-0 alpha-0)
  (absent (y (mul (rec alpha) x alpha-0)))
  (operation nonce-test
    (added-listener (cat (exp (gen) (mul y x alpha-0)) x-0))
    (exp (gen) (mul y x (rec x-0) alpha-0)) (4 2))
  (traces
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (recv (enc a b group (exp (gen) (mul x alpha-0)) (privk a)))
      (send
        (enc a b group (exp (gen) (mul alpha y))
          (exp (gen) (mul x alpha-0)) (privk b)))
      (recv (enc n (exp (gen) (mul y x alpha-0)))) (send n))
    ((send (enc "Group id" group (exp (gen) alpha) k-magic)))
    ((recv (enc "Group id" group (exp (gen) alpha-0) k-magic-0))
      (send (enc a b group (exp (gen) (mul x alpha-0)) (privk a))))
    ((send (enc "Group id" group (exp (gen) alpha-0) k-magic-0)))
    ((recv (enc "Group id" group (exp (gen) alpha-0) k-magic-0))
      (send
        (enc a-0 b-0 group (exp (gen) (mul x-0 alpha-0)) (privk a-0)))
      (recv
        (enc a-0 b-0 group (exp (gen) (mul y x (rec x-0) alpha-0))
          (exp (gen) (mul x-0 alpha-0)) (privk b-0)))
      (send (enc n (exp (gen) (mul y x alpha-0)))))
    ((recv (cat (exp (gen) (mul y x alpha-0)) x-0))
      (send (cat (exp (gen) (mul y x alpha-0)) x-0))))
  (label 68)
  (parent 40)
  (unrealized (5 0))
  (dead)
  (comment "empty cohort"))

(defskeleton dh_sig2
  (vars (k-magic k-magic-0 skey) (n group text) (a b a-0 b-0 name)
    (alpha y x x-0 alpha-0 rndx))
  (defstrand resp 5 (k-magic k-magic) (n n) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (y y) (x (mul (rec alpha) x alpha-0)))
  (defstrand group-init 1 (k-magic k-magic) (group group) (alpha alpha))
  (defstrand init 2 (k-magic k-magic-0) (group group) (a a) (b b)
    (g (exp (gen) alpha-0)) (x x))
  (defstrand group-init 1 (k-magic k-magic-0) (group group)
    (alpha alpha-0))
  (defstrand init 4 (k-magic k-magic-0) (n n) (group group) (a a-0)
    (b b-0) (g (exp (gen) alpha-0)) (x x-0) (y (mul y x (rec x-0))))
  (deflistener (cat (exp (gen) (mul y (rec x-0) alpha-0)) x))
  (precedes ((0 2) (4 0)) ((1 0) (0 0)) ((1 0) (2 0)) ((2 1) (0 1))
    ((3 0) (2 0)) ((4 1) (5 0)) ((4 3) (0 3)) ((5 1) (4 2)))
  (non-orig k-magic k-magic-0 (privk a) (privk b))
  (uniq-gen n alpha y x x-0 alpha-0)
  (absent (y (mul (rec alpha) x alpha-0)))
  (operation nonce-test
    (added-listener (cat (exp (gen) (mul y (rec x-0) alpha-0)) x))
    (exp (gen) (mul y x (rec x-0) alpha-0)) (4 2))
  (traces
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (recv (enc a b group (exp (gen) (mul x alpha-0)) (privk a)))
      (send
        (enc a b group (exp (gen) (mul alpha y))
          (exp (gen) (mul x alpha-0)) (privk b)))
      (recv (enc n (exp (gen) (mul y x alpha-0)))) (send n))
    ((send (enc "Group id" group (exp (gen) alpha) k-magic)))
    ((recv (enc "Group id" group (exp (gen) alpha-0) k-magic-0))
      (send (enc a b group (exp (gen) (mul x alpha-0)) (privk a))))
    ((send (enc "Group id" group (exp (gen) alpha-0) k-magic-0)))
    ((recv (enc "Group id" group (exp (gen) alpha-0) k-magic-0))
      (send
        (enc a-0 b-0 group (exp (gen) (mul x-0 alpha-0)) (privk a-0)))
      (recv
        (enc a-0 b-0 group (exp (gen) (mul y x (rec x-0) alpha-0))
          (exp (gen) (mul x-0 alpha-0)) (privk b-0)))
      (send (enc n (exp (gen) (mul y x alpha-0)))))
    ((recv (cat (exp (gen) (mul y (rec x-0) alpha-0)) x))
      (send (cat (exp (gen) (mul y (rec x-0) alpha-0)) x))))
  (label 69)
  (parent 40)
  (unrealized (5 0))
  (dead)
  (comment "empty cohort"))

(defskeleton dh_sig2
  (vars (k-magic k-magic-0 skey) (n group text) (a b a-0 b-0 name)
    (alpha y x x-0 alpha-0 rndx))
  (defstrand resp 5 (k-magic k-magic) (n n) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (y y) (x (mul (rec alpha) x alpha-0)))
  (defstrand group-init 1 (k-magic k-magic) (group group) (alpha alpha))
  (defstrand init 2 (k-magic k-magic-0) (group group) (a a) (b b)
    (g (exp (gen) alpha-0)) (x x))
  (defstrand group-init 1 (k-magic k-magic-0) (group group)
    (alpha alpha-0))
  (defstrand init 4 (k-magic k-magic-0) (n n) (group group) (a a-0)
    (b b-0) (g (exp (gen) alpha-0)) (x x-0) (y (mul y x (rec x-0))))
  (deflistener (cat (exp (gen) (mul x (rec x-0) alpha-0)) y))
  (precedes ((0 2) (4 0)) ((1 0) (0 0)) ((1 0) (2 0)) ((2 1) (0 1))
    ((3 0) (2 0)) ((4 1) (5 0)) ((4 3) (0 3)) ((5 1) (4 2)))
  (non-orig k-magic k-magic-0 (privk a) (privk b))
  (uniq-gen n alpha y x x-0 alpha-0)
  (absent (y (mul (rec alpha) x alpha-0)))
  (operation nonce-test
    (added-listener (cat (exp (gen) (mul x (rec x-0) alpha-0)) y))
    (exp (gen) (mul y x (rec x-0) alpha-0)) (4 2))
  (traces
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (recv (enc a b group (exp (gen) (mul x alpha-0)) (privk a)))
      (send
        (enc a b group (exp (gen) (mul alpha y))
          (exp (gen) (mul x alpha-0)) (privk b)))
      (recv (enc n (exp (gen) (mul y x alpha-0)))) (send n))
    ((send (enc "Group id" group (exp (gen) alpha) k-magic)))
    ((recv (enc "Group id" group (exp (gen) alpha-0) k-magic-0))
      (send (enc a b group (exp (gen) (mul x alpha-0)) (privk a))))
    ((send (enc "Group id" group (exp (gen) alpha-0) k-magic-0)))
    ((recv (enc "Group id" group (exp (gen) alpha-0) k-magic-0))
      (send
        (enc a-0 b-0 group (exp (gen) (mul x-0 alpha-0)) (privk a-0)))
      (recv
        (enc a-0 b-0 group (exp (gen) (mul y x (rec x-0) alpha-0))
          (exp (gen) (mul x-0 alpha-0)) (privk b-0)))
      (send (enc n (exp (gen) (mul y x alpha-0)))))
    ((recv (cat (exp (gen) (mul x (rec x-0) alpha-0)) y))
      (send (cat (exp (gen) (mul x (rec x-0) alpha-0)) y))))
  (label 70)
  (parent 40)
  (unrealized (5 0))
  (dead)
  (comment "empty cohort"))

(defskeleton dh_sig2
  (vars (k-magic k-magic-0 k-magic-1 skey) (n group group-0 text)
    (a b a-0 b-0 name) (alpha y x alpha-0 x-0 alpha-1 rndx))
  (defstrand resp 5 (k-magic k-magic) (n n) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (y y) (x (mul (rec alpha) x alpha-0)))
  (defstrand group-init 1 (k-magic k-magic) (group group) (alpha alpha))
  (defstrand init 2 (k-magic k-magic-0) (group group) (a a) (b b)
    (g (exp (gen) alpha-0)) (x x))
  (defstrand group-init 1 (k-magic k-magic-0) (group group)
    (alpha alpha-0))
  (defstrand init 4 (k-magic k-magic-1) (n n) (group group-0) (a a-0)
    (b b-0) (g (exp (gen) alpha-1)) (x x-0)
    (y (mul y x alpha-0 (rec x-0) (rec alpha-1))))
  (defstrand group-init 1 (k-magic k-magic-1) (group group-0)
    (alpha alpha-1))
  (deflistener (cat (exp (gen) (mul y x alpha-0)) x-0))
  (precedes ((0 2) (4 0)) ((1 0) (0 0)) ((1 0) (2 0)) ((2 1) (0 1))
    ((3 0) (2 0)) ((4 1) (6 0)) ((4 3) (0 3)) ((5 0) (4 0))
    ((6 1) (4 2)))
  (non-orig k-magic k-magic-0 k-magic-1 (privk a) (privk b))
  (uniq-gen n alpha y x alpha-0 x-0 alpha-1)
  (absent (y (mul (rec alpha) x alpha-0)))
  (operation nonce-test
    (added-listener (cat (exp (gen) (mul y x alpha-0)) x-0))
    (exp (gen) (mul y x alpha-0 (rec x-0))) (4 2))
  (traces
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (recv (enc a b group (exp (gen) (mul x alpha-0)) (privk a)))
      (send
        (enc a b group (exp (gen) (mul alpha y))
          (exp (gen) (mul x alpha-0)) (privk b)))
      (recv (enc n (exp (gen) (mul y x alpha-0)))) (send n))
    ((send (enc "Group id" group (exp (gen) alpha) k-magic)))
    ((recv (enc "Group id" group (exp (gen) alpha-0) k-magic-0))
      (send (enc a b group (exp (gen) (mul x alpha-0)) (privk a))))
    ((send (enc "Group id" group (exp (gen) alpha-0) k-magic-0)))
    ((recv (enc "Group id" group-0 (exp (gen) alpha-1) k-magic-1))
      (send
        (enc a-0 b-0 group-0 (exp (gen) (mul x-0 alpha-1)) (privk a-0)))
      (recv
        (enc a-0 b-0 group-0 (exp (gen) (mul y x alpha-0 (rec x-0)))
          (exp (gen) (mul x-0 alpha-1)) (privk b-0)))
      (send (enc n (exp (gen) (mul y x alpha-0)))))
    ((send (enc "Group id" group-0 (exp (gen) alpha-1) k-magic-1)))
    ((recv (cat (exp (gen) (mul y x alpha-0)) x-0))
      (send (cat (exp (gen) (mul y x alpha-0)) x-0))))
  (label 71)
  (parent 41)
  (unrealized (6 0))
  (dead)
  (comment "empty cohort"))

(defskeleton dh_sig2
  (vars (k-magic k-magic-0 k-magic-1 k-magic-2 skey)
    (n group group-0 group-1 text) (a b a-0 b-0 a-1 b-1 name)
    (alpha y x alpha-0 x-0 alpha-1 y-0 rndx) (x-1 expt))
  (defstrand resp 5 (k-magic k-magic) (n n) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (y y) (x (mul (rec alpha) x alpha-0)))
  (defstrand group-init 1 (k-magic k-magic) (group group) (alpha alpha))
  (defstrand init 2 (k-magic k-magic-0) (group group) (a a) (b b)
    (g (exp (gen) alpha-0)) (x x))
  (defstrand group-init 1 (k-magic k-magic-0) (group group)
    (alpha alpha-0))
  (defstrand init 4 (k-magic k-magic-1) (n n) (group group-0) (a a-0)
    (b b-0) (g (exp (gen) alpha-1)) (x x-0)
    (y (mul y x alpha-0 (rec x-0) (rec alpha-1))))
  (defstrand group-init 1 (k-magic k-magic-1) (group group-0)
    (alpha alpha-1))
  (defstrand resp 3 (k-magic k-magic-2) (group group-1) (a a-1) (b b-1)
    (g (exp (gen) (mul y x alpha-0 (rec x-0) (rec y-0)))) (y y-0)
    (x x-1))
  (precedes ((0 2) (4 0)) ((1 0) (0 0)) ((1 0) (2 0)) ((2 1) (0 1))
    ((3 0) (2 0)) ((4 1) (6 0)) ((4 3) (0 3)) ((5 0) (4 0))
    ((6 2) (4 2)))
  (non-orig k-magic k-magic-0 k-magic-1 k-magic-2 (privk a) (privk b))
  (uniq-gen n alpha y x alpha-0 x-0 alpha-1 y-0)
  (absent (y (mul (rec alpha) x alpha-0)) (y-0 x-1))
  (operation nonce-test (added-strand resp 3)
    (exp (gen) (mul y x alpha-0 (rec x-0))) (4 2))
  (traces
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (recv (enc a b group (exp (gen) (mul x alpha-0)) (privk a)))
      (send
        (enc a b group (exp (gen) (mul alpha y))
          (exp (gen) (mul x alpha-0)) (privk b)))
      (recv (enc n (exp (gen) (mul y x alpha-0)))) (send n))
    ((send (enc "Group id" group (exp (gen) alpha) k-magic)))
    ((recv (enc "Group id" group (exp (gen) alpha-0) k-magic-0))
      (send (enc a b group (exp (gen) (mul x alpha-0)) (privk a))))
    ((send (enc "Group id" group (exp (gen) alpha-0) k-magic-0)))
    ((recv (enc "Group id" group-0 (exp (gen) alpha-1) k-magic-1))
      (send
        (enc a-0 b-0 group-0 (exp (gen) (mul x-0 alpha-1)) (privk a-0)))
      (recv
        (enc a-0 b-0 group-0 (exp (gen) (mul y x alpha-0 (rec x-0)))
          (exp (gen) (mul x-0 alpha-1)) (privk b-0)))
      (send (enc n (exp (gen) (mul y x alpha-0)))))
    ((send (enc "Group id" group-0 (exp (gen) alpha-1) k-magic-1)))
    ((recv
       (enc "Group id" group-1
         (exp (gen) (mul y x alpha-0 (rec x-0) (rec y-0))) k-magic-2))
      (recv
        (enc a-1 b-1 group-1
          (exp (gen) (mul y x alpha-0 (rec x-0) (rec y-0) x-1))
          (privk a-1)))
      (send
        (enc a-1 b-1 group-1 (exp (gen) (mul y x alpha-0 (rec x-0)))
          (exp (gen) (mul y x alpha-0 (rec x-0) (rec y-0) x-1))
          (privk b-1)))))
  (label 72)
  (parent 41)
  (unrealized (6 0) (6 1))
  (dead)
  (comment "empty cohort"))

(defskeleton dh_sig2
  (vars (k-magic k-magic-0 k-magic-1 k-magic-2 skey)
    (n group group-0 group-1 text) (a b a-0 b-0 a-1 b-1 name)
    (alpha y x alpha-0 x-0 alpha-1 x-1 rndx))
  (defstrand resp 5 (k-magic k-magic) (n n) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (y y) (x (mul (rec alpha) x alpha-0)))
  (defstrand group-init 1 (k-magic k-magic) (group group) (alpha alpha))
  (defstrand init 2 (k-magic k-magic-0) (group group) (a a) (b b)
    (g (exp (gen) alpha-0)) (x x))
  (defstrand group-init 1 (k-magic k-magic-0) (group group)
    (alpha alpha-0))
  (defstrand init 4 (k-magic k-magic-1) (n n) (group group-0) (a a-0)
    (b b-0) (g (exp (gen) alpha-1)) (x x-0)
    (y (mul y x alpha-0 (rec x-0) (rec alpha-1))))
  (defstrand group-init 1 (k-magic k-magic-1) (group group-0)
    (alpha alpha-1))
  (defstrand init 2 (k-magic k-magic-2) (group group-1) (a a-1) (b b-1)
    (g (exp (gen) (mul y x alpha-0 (rec x-0) (rec x-1)))) (x x-1))
  (precedes ((0 2) (4 0)) ((1 0) (0 0)) ((1 0) (2 0)) ((2 1) (0 1))
    ((3 0) (2 0)) ((4 1) (6 0)) ((4 3) (0 3)) ((5 0) (4 0))
    ((6 1) (4 2)))
  (non-orig k-magic k-magic-0 k-magic-1 k-magic-2 (privk a) (privk b))
  (uniq-gen n alpha y x alpha-0 x-0 alpha-1 x-1)
  (absent (y (mul (rec alpha) x alpha-0)))
  (operation nonce-test (added-strand init 2)
    (exp (gen) (mul y x alpha-0 (rec x-0))) (4 2))
  (traces
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (recv (enc a b group (exp (gen) (mul x alpha-0)) (privk a)))
      (send
        (enc a b group (exp (gen) (mul alpha y))
          (exp (gen) (mul x alpha-0)) (privk b)))
      (recv (enc n (exp (gen) (mul y x alpha-0)))) (send n))
    ((send (enc "Group id" group (exp (gen) alpha) k-magic)))
    ((recv (enc "Group id" group (exp (gen) alpha-0) k-magic-0))
      (send (enc a b group (exp (gen) (mul x alpha-0)) (privk a))))
    ((send (enc "Group id" group (exp (gen) alpha-0) k-magic-0)))
    ((recv (enc "Group id" group-0 (exp (gen) alpha-1) k-magic-1))
      (send
        (enc a-0 b-0 group-0 (exp (gen) (mul x-0 alpha-1)) (privk a-0)))
      (recv
        (enc a-0 b-0 group-0 (exp (gen) (mul y x alpha-0 (rec x-0)))
          (exp (gen) (mul x-0 alpha-1)) (privk b-0)))
      (send (enc n (exp (gen) (mul y x alpha-0)))))
    ((send (enc "Group id" group-0 (exp (gen) alpha-1) k-magic-1)))
    ((recv
       (enc "Group id" group-1
         (exp (gen) (mul y x alpha-0 (rec x-0) (rec x-1))) k-magic-2))
      (send
        (enc a-1 b-1 group-1 (exp (gen) (mul y x alpha-0 (rec x-0)))
          (privk a-1)))))
  (label 73)
  (parent 41)
  (unrealized (6 0))
  (dead)
  (comment "empty cohort"))

(defskeleton dh_sig2
  (vars (k-magic k-magic-0 k-magic-1 skey) (n group group-0 text)
    (a b a-0 b-0 name) (alpha y x alpha-0 x-0 alpha-1 rndx))
  (defstrand resp 5 (k-magic k-magic) (n n) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (y y) (x (mul (rec alpha) x alpha-0)))
  (defstrand group-init 1 (k-magic k-magic) (group group) (alpha alpha))
  (defstrand init 2 (k-magic k-magic-0) (group group) (a a) (b b)
    (g (exp (gen) alpha-0)) (x x))
  (defstrand group-init 1 (k-magic k-magic-0) (group group)
    (alpha alpha-0))
  (defstrand init 4 (k-magic k-magic-1) (n n) (group group-0) (a a-0)
    (b b-0) (g (exp (gen) alpha-1)) (x x-0)
    (y (mul y x alpha-0 (rec x-0) (rec alpha-1))))
  (defstrand group-init 1 (k-magic k-magic-1) (group group-0)
    (alpha alpha-1))
  (deflistener (cat (exp (gen) (mul y x (rec x-0))) alpha-0))
  (precedes ((0 2) (4 0)) ((1 0) (0 0)) ((1 0) (2 0)) ((2 1) (0 1))
    ((3 0) (2 0)) ((4 1) (6 0)) ((4 3) (0 3)) ((5 0) (4 0))
    ((6 1) (4 2)))
  (non-orig k-magic k-magic-0 k-magic-1 (privk a) (privk b))
  (uniq-gen n alpha y x alpha-0 x-0 alpha-1)
  (absent (y (mul (rec alpha) x alpha-0)))
  (operation nonce-test
    (added-listener (cat (exp (gen) (mul y x (rec x-0))) alpha-0))
    (exp (gen) (mul y x alpha-0 (rec x-0))) (4 2))
  (traces
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (recv (enc a b group (exp (gen) (mul x alpha-0)) (privk a)))
      (send
        (enc a b group (exp (gen) (mul alpha y))
          (exp (gen) (mul x alpha-0)) (privk b)))
      (recv (enc n (exp (gen) (mul y x alpha-0)))) (send n))
    ((send (enc "Group id" group (exp (gen) alpha) k-magic)))
    ((recv (enc "Group id" group (exp (gen) alpha-0) k-magic-0))
      (send (enc a b group (exp (gen) (mul x alpha-0)) (privk a))))
    ((send (enc "Group id" group (exp (gen) alpha-0) k-magic-0)))
    ((recv (enc "Group id" group-0 (exp (gen) alpha-1) k-magic-1))
      (send
        (enc a-0 b-0 group-0 (exp (gen) (mul x-0 alpha-1)) (privk a-0)))
      (recv
        (enc a-0 b-0 group-0 (exp (gen) (mul y x alpha-0 (rec x-0)))
          (exp (gen) (mul x-0 alpha-1)) (privk b-0)))
      (send (enc n (exp (gen) (mul y x alpha-0)))))
    ((send (enc "Group id" group-0 (exp (gen) alpha-1) k-magic-1)))
    ((recv (cat (exp (gen) (mul y x (rec x-0))) alpha-0))
      (send (cat (exp (gen) (mul y x (rec x-0))) alpha-0))))
  (label 74)
  (parent 41)
  (unrealized (6 0))
  (dead)
  (comment "empty cohort"))

(defskeleton dh_sig2
  (vars (k-magic k-magic-0 k-magic-1 skey) (n group group-0 text)
    (a b a-0 b-0 name) (alpha y x alpha-0 x-0 alpha-1 rndx))
  (defstrand resp 5 (k-magic k-magic) (n n) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (y y) (x (mul (rec alpha) x alpha-0)))
  (defstrand group-init 1 (k-magic k-magic) (group group) (alpha alpha))
  (defstrand init 2 (k-magic k-magic-0) (group group) (a a) (b b)
    (g (exp (gen) alpha-0)) (x x))
  (defstrand group-init 1 (k-magic k-magic-0) (group group)
    (alpha alpha-0))
  (defstrand init 4 (k-magic k-magic-1) (n n) (group group-0) (a a-0)
    (b b-0) (g (exp (gen) alpha-1)) (x x-0)
    (y (mul y x alpha-0 (rec x-0) (rec alpha-1))))
  (defstrand group-init 1 (k-magic k-magic-1) (group group-0)
    (alpha alpha-1))
  (deflistener (cat (exp (gen) (mul y alpha-0 (rec x-0))) x))
  (precedes ((0 2) (4 0)) ((1 0) (0 0)) ((1 0) (2 0)) ((2 1) (0 1))
    ((3 0) (2 0)) ((4 1) (6 0)) ((4 3) (0 3)) ((5 0) (4 0))
    ((6 1) (4 2)))
  (non-orig k-magic k-magic-0 k-magic-1 (privk a) (privk b))
  (uniq-gen n alpha y x alpha-0 x-0 alpha-1)
  (absent (y (mul (rec alpha) x alpha-0)))
  (operation nonce-test
    (added-listener (cat (exp (gen) (mul y alpha-0 (rec x-0))) x))
    (exp (gen) (mul y x alpha-0 (rec x-0))) (4 2))
  (traces
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (recv (enc a b group (exp (gen) (mul x alpha-0)) (privk a)))
      (send
        (enc a b group (exp (gen) (mul alpha y))
          (exp (gen) (mul x alpha-0)) (privk b)))
      (recv (enc n (exp (gen) (mul y x alpha-0)))) (send n))
    ((send (enc "Group id" group (exp (gen) alpha) k-magic)))
    ((recv (enc "Group id" group (exp (gen) alpha-0) k-magic-0))
      (send (enc a b group (exp (gen) (mul x alpha-0)) (privk a))))
    ((send (enc "Group id" group (exp (gen) alpha-0) k-magic-0)))
    ((recv (enc "Group id" group-0 (exp (gen) alpha-1) k-magic-1))
      (send
        (enc a-0 b-0 group-0 (exp (gen) (mul x-0 alpha-1)) (privk a-0)))
      (recv
        (enc a-0 b-0 group-0 (exp (gen) (mul y x alpha-0 (rec x-0)))
          (exp (gen) (mul x-0 alpha-1)) (privk b-0)))
      (send (enc n (exp (gen) (mul y x alpha-0)))))
    ((send (enc "Group id" group-0 (exp (gen) alpha-1) k-magic-1)))
    ((recv (cat (exp (gen) (mul y alpha-0 (rec x-0))) x))
      (send (cat (exp (gen) (mul y alpha-0 (rec x-0))) x))))
  (label 75)
  (parent 41)
  (unrealized (6 0))
  (dead)
  (comment "empty cohort"))

(defskeleton dh_sig2
  (vars (k-magic k-magic-0 k-magic-1 skey) (n group group-0 text)
    (a b a-0 b-0 name) (alpha y x alpha-0 x-0 alpha-1 rndx))
  (defstrand resp 5 (k-magic k-magic) (n n) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (y y) (x (mul (rec alpha) x alpha-0)))
  (defstrand group-init 1 (k-magic k-magic) (group group) (alpha alpha))
  (defstrand init 2 (k-magic k-magic-0) (group group) (a a) (b b)
    (g (exp (gen) alpha-0)) (x x))
  (defstrand group-init 1 (k-magic k-magic-0) (group group)
    (alpha alpha-0))
  (defstrand init 4 (k-magic k-magic-1) (n n) (group group-0) (a a-0)
    (b b-0) (g (exp (gen) alpha-1)) (x x-0)
    (y (mul y x alpha-0 (rec x-0) (rec alpha-1))))
  (defstrand group-init 1 (k-magic k-magic-1) (group group-0)
    (alpha alpha-1))
  (deflistener (cat (exp (gen) (mul x alpha-0 (rec x-0))) y))
  (precedes ((0 2) (4 0)) ((1 0) (0 0)) ((1 0) (2 0)) ((2 1) (0 1))
    ((3 0) (2 0)) ((4 1) (6 0)) ((4 3) (0 3)) ((5 0) (4 0))
    ((6 1) (4 2)))
  (non-orig k-magic k-magic-0 k-magic-1 (privk a) (privk b))
  (uniq-gen n alpha y x alpha-0 x-0 alpha-1)
  (absent (y (mul (rec alpha) x alpha-0)))
  (operation nonce-test
    (added-listener (cat (exp (gen) (mul x alpha-0 (rec x-0))) y))
    (exp (gen) (mul y x alpha-0 (rec x-0))) (4 2))
  (traces
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (recv (enc a b group (exp (gen) (mul x alpha-0)) (privk a)))
      (send
        (enc a b group (exp (gen) (mul alpha y))
          (exp (gen) (mul x alpha-0)) (privk b)))
      (recv (enc n (exp (gen) (mul y x alpha-0)))) (send n))
    ((send (enc "Group id" group (exp (gen) alpha) k-magic)))
    ((recv (enc "Group id" group (exp (gen) alpha-0) k-magic-0))
      (send (enc a b group (exp (gen) (mul x alpha-0)) (privk a))))
    ((send (enc "Group id" group (exp (gen) alpha-0) k-magic-0)))
    ((recv (enc "Group id" group-0 (exp (gen) alpha-1) k-magic-1))
      (send
        (enc a-0 b-0 group-0 (exp (gen) (mul x-0 alpha-1)) (privk a-0)))
      (recv
        (enc a-0 b-0 group-0 (exp (gen) (mul y x alpha-0 (rec x-0)))
          (exp (gen) (mul x-0 alpha-1)) (privk b-0)))
      (send (enc n (exp (gen) (mul y x alpha-0)))))
    ((send (enc "Group id" group-0 (exp (gen) alpha-1) k-magic-1)))
    ((recv (cat (exp (gen) (mul x alpha-0 (rec x-0))) y))
      (send (cat (exp (gen) (mul x alpha-0 (rec x-0))) y))))
  (label 76)
  (parent 41)
  (unrealized (6 0))
  (dead)
  (comment "empty cohort"))

(comment "Nothing left to do")
