(herald "Signed group DH exchange 3" (algebra diffie-hellman)
  (limit 200) (bound 25))

(comment "CPSA 4.3.0")
(comment "All input read from dhtst/dh_sig_base_points_3.scm")
(comment "Step count limited to 200")
(comment "Strand count bounded at 25")

(defprotocol dh_sig2 diffie-hellman
  (defrole group-init
    (vars (alpha rndx) (k-magic skey) (group text))
    (trace (send (enc "Group id" group (exp (gen) alpha) k-magic)))
    (uniq-gen alpha))
  (defrole init
    (vars (x rndx) (y expt) (g base) (k-magic skey) (n group text)
      (a b name))
    (trace (recv (enc "Group id" group g k-magic))
      (send (enc a b group (exp g x) (privk a)))
      (recv (enc a b group (exp g y) (exp g x) (privk b)))
      (send (enc n (exp g (mul x y)))) (recv n))
    (non-orig k-magic)
    (uniq-gen n x))
  (defrole resp
    (vars (y rndx) (x expt) (g base) (k-magic skey) (n group text)
      (a b name))
    (trace (recv (enc "Group id" group g k-magic))
      (recv (enc a b group (exp g x) (privk a)))
      (send (enc a b group (exp g y) (exp g x) (privk b)))
      (recv (enc n (exp g (mul y x)))) (send n))
    (non-orig k-magic)
    (uniq-gen y)
    (absent (y x)))
  (defgenrule neqRl_indx
    (forall ((x indx)) (implies (fact neq x x) (false))))
  (defgenrule neqRl_strd
    (forall ((x strd)) (implies (fact neq x x) (false))))
  (defgenrule neqRl_mesg
    (forall ((x mesg)) (implies (fact neq x x) (false))))
  (defgenrule no-interruption
    (forall ((z0 z1 z2 strd) (i0 i1 i2 indx))
      (implies
        (and (leads-to z0 i0 z2 i2) (trans z1 i1)
          (same-locn z0 i0 z1 i1) (prec z0 i0 z1 i1) (prec z1 i1 z2 i2))
        (false))))
  (defgenrule cakeRule
    (forall ((z0 z1 z2 strd) (i0 i1 i2 indx))
      (implies
        (and (trans z0 i0) (trans z1 i1) (leads-to z0 i0 z1 i1)
          (leads-to z0 i0 z2 i2) (prec z1 i1 z2 i2)) (false))))
  (defgenrule scissorsRule
    (forall ((z0 z1 z2 strd) (i0 i1 i2 indx))
      (implies
        (and (trans z0 i0) (trans z1 i1) (trans z2 i2)
          (leads-to z0 i0 z1 i1) (leads-to z0 i0 z2 i2))
        (and (= z1 z2) (= i1 i2)))))
  (defgenrule invShearsRule
    (forall ((z0 z1 z2 strd) (i0 i1 i2 indx))
      (implies
        (and (trans z0 i0) (trans z1 i1) (same-locn z0 i0 z1 i1)
          (leads-to z1 i1 z2 i2) (prec z0 i0 z2 i2))
        (or (and (= z0 z1) (= i0 i1)) (prec z0 i0 z1 i1)))))
  (defgenrule shearsRule
    (forall ((z0 z1 z2 strd) (i0 i1 i2 indx))
      (implies
        (and (trans z0 i0) (trans z1 i1) (trans z2 i2)
          (leads-to z0 i0 z1 i1) (same-locn z0 i0 z2 i2)
          (prec z0 i0 z2 i2))
        (or (and (= z1 z2) (= i1 i2)) (prec z1 i1 z2 i2))))))

(defskeleton dh_sig2
  (vars (k-magic skey) (n group text) (a b name) (g base) (x rndx)
    (y expt))
  (defstrand init 5 (k-magic k-magic) (n n) (group group) (a a) (b b)
    (g g) (x x) (y y))
  (non-orig k-magic (privk a) (privk b))
  (uniq-gen n x)
  (traces
    ((recv (enc "Group id" group g k-magic))
      (send (enc a b group (exp g x) (privk a)))
      (recv (enc a b group (exp g y) (exp g x) (privk b)))
      (send (enc n (exp g (mul x y)))) (recv n)))
  (label 0)
  (unrealized (0 0) (0 2))
  (origs)
  (comment "1 in cohort - 1 not yet seen"))

(defskeleton dh_sig2
  (vars (k-magic skey) (n group text) (a b name) (x rndx) (y expt)
    (alpha rndx))
  (defstrand init 5 (k-magic k-magic) (n n) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (x x) (y y))
  (defstrand group-init 1 (k-magic k-magic) (group group) (alpha alpha))
  (precedes ((1 0) (0 0)))
  (non-orig k-magic (privk a) (privk b))
  (uniq-gen n x alpha)
  (operation encryption-test (added-strand group-init 1)
    (enc "Group id" group (exp (gen) alpha) k-magic) (0 0))
  (traces
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (send (enc a b group (exp (gen) (mul x alpha)) (privk a)))
      (recv
        (enc a b group (exp (gen) (mul y alpha))
          (exp (gen) (mul x alpha)) (privk b)))
      (send (enc n (exp (gen) (mul x y alpha)))) (recv n))
    ((send (enc "Group id" group (exp (gen) alpha) k-magic))))
  (label 1)
  (parent 0)
  (unrealized (0 2))
  (comment "1 in cohort - 1 not yet seen"))

(defskeleton dh_sig2
  (vars (k-magic k-magic-0 skey) (n group text) (a b name)
    (alpha x y rndx) (x-0 expt))
  (defstrand init 5 (k-magic k-magic) (n n) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (x x) (y (mul x y (rec x-0))))
  (defstrand group-init 1 (k-magic k-magic) (group group) (alpha alpha))
  (defstrand resp 3 (k-magic k-magic-0) (group group) (a a) (b b)
    (g (exp (gen) (mul alpha x (rec x-0)))) (y y) (x x-0))
  (precedes ((0 1) (2 0)) ((1 0) (0 0)) ((2 2) (0 2)))
  (non-orig k-magic k-magic-0 (privk a) (privk b))
  (uniq-gen n alpha x y)
  (absent (y x-0))
  (operation encryption-test (added-strand resp 3)
    (enc a b group (exp (gen) (mul alpha x y (rec x-0)))
      (exp (gen) (mul alpha x)) (privk b)) (0 2))
  (traces
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (send (enc a b group (exp (gen) (mul alpha x)) (privk a)))
      (recv
        (enc a b group (exp (gen) (mul alpha x y (rec x-0)))
          (exp (gen) (mul alpha x)) (privk b)))
      (send (enc n (exp (gen) (mul alpha x x y (rec x-0))))) (recv n))
    ((send (enc "Group id" group (exp (gen) alpha) k-magic)))
    ((recv
       (enc "Group id" group (exp (gen) (mul alpha x (rec x-0)))
         k-magic-0))
      (recv (enc a b group (exp (gen) (mul alpha x)) (privk a)))
      (send
        (enc a b group (exp (gen) (mul alpha x y (rec x-0)))
          (exp (gen) (mul alpha x)) (privk b)))))
  (label 2)
  (parent 1)
  (unrealized (0 4) (2 0))
  (comment "2 in cohort - 2 not yet seen"))

(defskeleton dh_sig2
  (vars (k-magic skey) (n group text) (a b name) (y x alpha rndx))
  (defstrand init 5 (k-magic k-magic) (n n) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (x x) (y y))
  (defstrand group-init 1 (k-magic k-magic) (group group) (alpha alpha))
  (defstrand resp 3 (k-magic k-magic) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (y y) (x x))
  (precedes ((0 1) (2 0)) ((1 0) (0 0)) ((2 2) (0 2)))
  (non-orig k-magic (privk a) (privk b))
  (uniq-gen n y x alpha)
  (absent (y x))
  (operation encryption-test (displaced 3 1 group-init 1)
    (enc "Group id" group (exp (gen) alpha-0) k-magic-0) (2 0))
  (traces
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (send (enc a b group (exp (gen) (mul x alpha)) (privk a)))
      (recv
        (enc a b group (exp (gen) (mul y alpha))
          (exp (gen) (mul x alpha)) (privk b)))
      (send (enc n (exp (gen) (mul y x alpha)))) (recv n))
    ((send (enc "Group id" group (exp (gen) alpha) k-magic)))
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (recv (enc a b group (exp (gen) (mul x alpha)) (privk a)))
      (send
        (enc a b group (exp (gen) (mul y alpha))
          (exp (gen) (mul x alpha)) (privk b)))))
  (label 3)
  (parent 2)
  (unrealized (0 4))
  (comment "3 in cohort - 3 not yet seen"))

(defskeleton dh_sig2
  (vars (k-magic k-magic-0 skey) (n group text) (a b name)
    (y alpha x alpha-0 rndx))
  (defstrand init 5 (k-magic k-magic) (n n) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (x x) (y (mul y (rec alpha) alpha-0)))
  (defstrand group-init 1 (k-magic k-magic) (group group) (alpha alpha))
  (defstrand resp 3 (k-magic k-magic-0) (group group) (a a) (b b)
    (g (exp (gen) alpha-0)) (y y) (x (mul alpha x (rec alpha-0))))
  (defstrand group-init 1 (k-magic k-magic-0) (group group)
    (alpha alpha-0))
  (precedes ((0 1) (2 0)) ((1 0) (0 0)) ((2 2) (0 2)) ((3 0) (2 0)))
  (non-orig k-magic k-magic-0 (privk a) (privk b))
  (uniq-gen n y alpha x alpha-0)
  (absent (y (mul alpha x (rec alpha-0))))
  (operation encryption-test (added-strand group-init 1)
    (enc "Group id" group (exp (gen) alpha-0) k-magic-0) (2 0))
  (traces
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (send (enc a b group (exp (gen) (mul alpha x)) (privk a)))
      (recv
        (enc a b group (exp (gen) (mul y alpha-0))
          (exp (gen) (mul alpha x)) (privk b)))
      (send (enc n (exp (gen) (mul y x alpha-0)))) (recv n))
    ((send (enc "Group id" group (exp (gen) alpha) k-magic)))
    ((recv (enc "Group id" group (exp (gen) alpha-0) k-magic-0))
      (recv (enc a b group (exp (gen) (mul alpha x)) (privk a)))
      (send
        (enc a b group (exp (gen) (mul y alpha-0))
          (exp (gen) (mul alpha x)) (privk b))))
    ((send (enc "Group id" group (exp (gen) alpha-0) k-magic-0))))
  (label 4)
  (parent 2)
  (unrealized (0 4))
  (comment "2 in cohort - 2 not yet seen"))

(defskeleton dh_sig2
  (vars (k-magic skey) (n group text) (a b name) (alpha x y rndx))
  (defstrand init 5 (k-magic k-magic) (n n) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (x x) (y y))
  (defstrand group-init 1 (k-magic k-magic) (group group) (alpha alpha))
  (defstrand resp 5 (k-magic k-magic) (n n) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (y y) (x x))
  (precedes ((0 1) (2 0)) ((0 3) (2 3)) ((1 0) (0 0)) ((2 2) (0 2))
    ((2 4) (0 4)))
  (non-orig k-magic (privk a) (privk b))
  (uniq-gen n alpha x y)
  (absent (y x))
  (operation nonce-test (displaced 2 3 resp 5) n (0 4)
    (enc n (exp (gen) (mul y-0 x-0 alpha))))
  (traces
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (send (enc a b group (exp (gen) (mul alpha x)) (privk a)))
      (recv
        (enc a b group (exp (gen) (mul alpha y))
          (exp (gen) (mul alpha x)) (privk b)))
      (send (enc n (exp (gen) (mul alpha x y)))) (recv n))
    ((send (enc "Group id" group (exp (gen) alpha) k-magic)))
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (recv (enc a b group (exp (gen) (mul alpha x)) (privk a)))
      (send
        (enc a b group (exp (gen) (mul alpha y))
          (exp (gen) (mul alpha x)) (privk b)))
      (recv (enc n (exp (gen) (mul alpha x y)))) (send n)))
  (label 5)
  (parent 3)
  (unrealized)
  (comment "1 in cohort - 1 not yet seen"))

(defskeleton dh_sig2
  (vars (k-magic k-magic-0 skey) (n group group-0 text)
    (a b a-0 b-0 name) (y x alpha y-0 rndx) (x-0 expt))
  (defstrand init 5 (k-magic k-magic) (n n) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (x x) (y y))
  (defstrand group-init 1 (k-magic k-magic) (group group) (alpha alpha))
  (defstrand resp 3 (k-magic k-magic) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (y y) (x x))
  (defstrand resp 5 (k-magic k-magic-0) (n n) (group group-0) (a a-0)
    (b b-0) (g (exp (gen) (mul y x alpha (rec y-0) (rec x-0)))) (y y-0)
    (x x-0))
  (precedes ((0 1) (2 0)) ((0 3) (3 3)) ((1 0) (0 0)) ((2 2) (0 2))
    ((2 2) (3 0)) ((3 4) (0 4)))
  (non-orig k-magic k-magic-0 (privk a) (privk b))
  (uniq-gen n y x alpha y-0)
  (absent (y x) (y-0 x-0))
  (operation nonce-test (added-strand resp 5) n (0 4)
    (enc n (exp (gen) (mul y x alpha))))
  (traces
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (send (enc a b group (exp (gen) (mul x alpha)) (privk a)))
      (recv
        (enc a b group (exp (gen) (mul y alpha))
          (exp (gen) (mul x alpha)) (privk b)))
      (send (enc n (exp (gen) (mul y x alpha)))) (recv n))
    ((send (enc "Group id" group (exp (gen) alpha) k-magic)))
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (recv (enc a b group (exp (gen) (mul x alpha)) (privk a)))
      (send
        (enc a b group (exp (gen) (mul y alpha))
          (exp (gen) (mul x alpha)) (privk b))))
    ((recv
       (enc "Group id" group-0
         (exp (gen) (mul y x alpha (rec y-0) (rec x-0))) k-magic-0))
      (recv
        (enc a-0 b-0 group-0 (exp (gen) (mul y x alpha (rec y-0)))
          (privk a-0)))
      (send
        (enc a-0 b-0 group-0 (exp (gen) (mul y x alpha (rec x-0)))
          (exp (gen) (mul y x alpha (rec y-0))) (privk b-0)))
      (recv (enc n (exp (gen) (mul y x alpha)))) (send n)))
  (label 6)
  (parent 3)
  (unrealized (3 0) (3 1))
  (dead)
  (comment "empty cohort"))

(defskeleton dh_sig2
  (vars (k-magic skey) (n group text) (a b name) (y x alpha rndx))
  (defstrand init 5 (k-magic k-magic) (n n) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (x x) (y y))
  (defstrand group-init 1 (k-magic k-magic) (group group) (alpha alpha))
  (defstrand resp 3 (k-magic k-magic) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (y y) (x x))
  (deflistener (exp (gen) (mul y x alpha)))
  (precedes ((0 1) (2 0)) ((1 0) (0 0)) ((2 2) (0 2)) ((2 2) (3 0))
    ((3 1) (0 4)))
  (non-orig k-magic (privk a) (privk b))
  (uniq-gen n y x alpha)
  (absent (y x))
  (operation nonce-test (added-listener (exp (gen) (mul y x alpha))) n
    (0 4) (enc n (exp (gen) (mul y x alpha))))
  (traces
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (send (enc a b group (exp (gen) (mul x alpha)) (privk a)))
      (recv
        (enc a b group (exp (gen) (mul y alpha))
          (exp (gen) (mul x alpha)) (privk b)))
      (send (enc n (exp (gen) (mul y x alpha)))) (recv n))
    ((send (enc "Group id" group (exp (gen) alpha) k-magic)))
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (recv (enc a b group (exp (gen) (mul x alpha)) (privk a)))
      (send
        (enc a b group (exp (gen) (mul y alpha))
          (exp (gen) (mul x alpha)) (privk b))))
    ((recv (exp (gen) (mul y x alpha)))
      (send (exp (gen) (mul y x alpha)))))
  (label 7)
  (parent 3)
  (unrealized (3 0))
  (comment "3 in cohort - 3 not yet seen"))

(defskeleton dh_sig2
  (vars (k-magic k-magic-0 k-magic-1 skey) (n group group-0 text)
    (a b a-0 b-0 name) (y alpha x alpha-0 y-0 rndx) (x-0 expt))
  (defstrand init 5 (k-magic k-magic) (n n) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (x x) (y (mul y (rec alpha) alpha-0)))
  (defstrand group-init 1 (k-magic k-magic) (group group) (alpha alpha))
  (defstrand resp 3 (k-magic k-magic-0) (group group) (a a) (b b)
    (g (exp (gen) alpha-0)) (y y) (x (mul alpha x (rec alpha-0))))
  (defstrand group-init 1 (k-magic k-magic-0) (group group)
    (alpha alpha-0))
  (defstrand resp 5 (k-magic k-magic-1) (n n) (group group-0) (a a-0)
    (b b-0) (g (exp (gen) (mul y x alpha-0 (rec y-0) (rec x-0))))
    (y y-0) (x x-0))
  (precedes ((0 1) (2 0)) ((0 3) (4 3)) ((1 0) (0 0)) ((2 2) (0 2))
    ((2 2) (4 0)) ((3 0) (2 0)) ((4 4) (0 4)))
  (non-orig k-magic k-magic-0 k-magic-1 (privk a) (privk b))
  (uniq-gen n y alpha x alpha-0 y-0)
  (absent (y (mul alpha x (rec alpha-0))) (y-0 x-0))
  (operation nonce-test (added-strand resp 5) n (0 4)
    (enc n (exp (gen) (mul y x alpha-0))))
  (traces
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (send (enc a b group (exp (gen) (mul alpha x)) (privk a)))
      (recv
        (enc a b group (exp (gen) (mul y alpha-0))
          (exp (gen) (mul alpha x)) (privk b)))
      (send (enc n (exp (gen) (mul y x alpha-0)))) (recv n))
    ((send (enc "Group id" group (exp (gen) alpha) k-magic)))
    ((recv (enc "Group id" group (exp (gen) alpha-0) k-magic-0))
      (recv (enc a b group (exp (gen) (mul alpha x)) (privk a)))
      (send
        (enc a b group (exp (gen) (mul y alpha-0))
          (exp (gen) (mul alpha x)) (privk b))))
    ((send (enc "Group id" group (exp (gen) alpha-0) k-magic-0)))
    ((recv
       (enc "Group id" group-0
         (exp (gen) (mul y x alpha-0 (rec y-0) (rec x-0))) k-magic-1))
      (recv
        (enc a-0 b-0 group-0 (exp (gen) (mul y x alpha-0 (rec y-0)))
          (privk a-0)))
      (send
        (enc a-0 b-0 group-0 (exp (gen) (mul y x alpha-0 (rec x-0)))
          (exp (gen) (mul y x alpha-0 (rec y-0))) (privk b-0)))
      (recv (enc n (exp (gen) (mul y x alpha-0)))) (send n)))
  (label 8)
  (parent 4)
  (unrealized (4 0) (4 1))
  (dead)
  (comment "empty cohort"))

(defskeleton dh_sig2
  (vars (k-magic k-magic-0 skey) (n group text) (a b name)
    (y alpha x alpha-0 rndx))
  (defstrand init 5 (k-magic k-magic) (n n) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (x x) (y (mul y (rec alpha) alpha-0)))
  (defstrand group-init 1 (k-magic k-magic) (group group) (alpha alpha))
  (defstrand resp 3 (k-magic k-magic-0) (group group) (a a) (b b)
    (g (exp (gen) alpha-0)) (y y) (x (mul alpha x (rec alpha-0))))
  (defstrand group-init 1 (k-magic k-magic-0) (group group)
    (alpha alpha-0))
  (deflistener (exp (gen) (mul y x alpha-0)))
  (precedes ((0 1) (2 0)) ((1 0) (0 0)) ((2 2) (0 2)) ((2 2) (4 0))
    ((3 0) (2 0)) ((4 1) (0 4)))
  (non-orig k-magic k-magic-0 (privk a) (privk b))
  (uniq-gen n y alpha x alpha-0)
  (absent (y (mul alpha x (rec alpha-0))))
  (operation nonce-test (added-listener (exp (gen) (mul y x alpha-0))) n
    (0 4) (enc n (exp (gen) (mul y x alpha-0))))
  (traces
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (send (enc a b group (exp (gen) (mul alpha x)) (privk a)))
      (recv
        (enc a b group (exp (gen) (mul y alpha-0))
          (exp (gen) (mul alpha x)) (privk b)))
      (send (enc n (exp (gen) (mul y x alpha-0)))) (recv n))
    ((send (enc "Group id" group (exp (gen) alpha) k-magic)))
    ((recv (enc "Group id" group (exp (gen) alpha-0) k-magic-0))
      (recv (enc a b group (exp (gen) (mul alpha x)) (privk a)))
      (send
        (enc a b group (exp (gen) (mul y alpha-0))
          (exp (gen) (mul alpha x)) (privk b))))
    ((send (enc "Group id" group (exp (gen) alpha-0) k-magic-0)))
    ((recv (exp (gen) (mul y x alpha-0)))
      (send (exp (gen) (mul y x alpha-0)))))
  (label 9)
  (parent 4)
  (unrealized (4 0))
  (comment "3 in cohort - 3 not yet seen"))

(defskeleton dh_sig2
  (vars (k-magic skey) (n group text) (a b name) (alpha x y rndx))
  (defstrand init 5 (k-magic k-magic) (n n) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (x x) (y y))
  (defstrand group-init 1 (k-magic k-magic) (group group) (alpha alpha))
  (defstrand resp 5 (k-magic k-magic) (n n) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (y y) (x x))
  (precedes ((0 1) (2 1)) ((0 3) (2 3)) ((1 0) (0 0)) ((1 0) (2 0))
    ((2 2) (0 2)) ((2 4) (0 4)))
  (non-orig k-magic (privk a) (privk b))
  (uniq-gen n alpha x y)
  (absent (y x))
  (operation generalization weakened ((0 1) (2 0)))
  (traces
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (send (enc a b group (exp (gen) (mul alpha x)) (privk a)))
      (recv
        (enc a b group (exp (gen) (mul alpha y))
          (exp (gen) (mul alpha x)) (privk b)))
      (send (enc n (exp (gen) (mul alpha x y)))) (recv n))
    ((send (enc "Group id" group (exp (gen) alpha) k-magic)))
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (recv (enc a b group (exp (gen) (mul alpha x)) (privk a)))
      (send
        (enc a b group (exp (gen) (mul alpha y))
          (exp (gen) (mul alpha x)) (privk b)))
      (recv (enc n (exp (gen) (mul alpha x y)))) (send n)))
  (label 10)
  (parent 5)
  (unrealized)
  (shape)
  (maps
    ((0)
      ((a a) (b b) (x x) (y y) (g (exp (gen) alpha)) (k-magic k-magic)
        (n n) (group group))))
  (origs))

(defskeleton dh_sig2
  (vars (k-magic k-magic-0 skey) (n group group-0 text)
    (a b a-0 b-0 name) (y x alpha x-0 rndx))
  (defstrand init 5 (k-magic k-magic) (n n) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (x x) (y y))
  (defstrand group-init 1 (k-magic k-magic) (group group) (alpha alpha))
  (defstrand resp 3 (k-magic k-magic) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (y y) (x x))
  (deflistener (exp (gen) (mul y x alpha)))
  (defstrand init 2 (k-magic k-magic-0) (group group-0) (a a-0) (b b-0)
    (g (exp (gen) (mul y x alpha (rec x-0)))) (x x-0))
  (precedes ((0 1) (2 0)) ((1 0) (0 0)) ((2 2) (0 2)) ((2 2) (4 0))
    ((3 1) (0 4)) ((4 1) (3 0)))
  (non-orig k-magic k-magic-0 (privk a) (privk b))
  (uniq-gen n y x alpha x-0)
  (absent (y x))
  (operation nonce-test (added-strand init 2)
    (exp (gen) (mul y x alpha)) (3 0))
  (traces
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (send (enc a b group (exp (gen) (mul x alpha)) (privk a)))
      (recv
        (enc a b group (exp (gen) (mul y alpha))
          (exp (gen) (mul x alpha)) (privk b)))
      (send (enc n (exp (gen) (mul y x alpha)))) (recv n))
    ((send (enc "Group id" group (exp (gen) alpha) k-magic)))
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (recv (enc a b group (exp (gen) (mul x alpha)) (privk a)))
      (send
        (enc a b group (exp (gen) (mul y alpha))
          (exp (gen) (mul x alpha)) (privk b))))
    ((recv (exp (gen) (mul y x alpha)))
      (send (exp (gen) (mul y x alpha))))
    ((recv
       (enc "Group id" group-0 (exp (gen) (mul y x alpha (rec x-0)))
         k-magic-0))
      (send
        (enc a-0 b-0 group-0 (exp (gen) (mul y x alpha)) (privk a-0)))))
  (label 11)
  (parent 7)
  (unrealized (4 0))
  (dead)
  (comment "empty cohort"))

(defskeleton dh_sig2
  (vars (k-magic k-magic-0 skey) (n group group-0 text)
    (a b a-0 b-0 name) (y x alpha y-0 rndx) (x-0 expt))
  (defstrand init 5 (k-magic k-magic) (n n) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (x x) (y y))
  (defstrand group-init 1 (k-magic k-magic) (group group) (alpha alpha))
  (defstrand resp 3 (k-magic k-magic) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (y y) (x x))
  (deflistener (exp (gen) (mul y x alpha)))
  (defstrand resp 3 (k-magic k-magic-0) (group group-0) (a a-0) (b b-0)
    (g (exp (gen) (mul y x alpha (rec y-0)))) (y y-0) (x x-0))
  (precedes ((0 1) (2 0)) ((1 0) (0 0)) ((2 2) (0 2)) ((2 2) (4 0))
    ((3 1) (0 4)) ((4 2) (3 0)))
  (non-orig k-magic k-magic-0 (privk a) (privk b))
  (uniq-gen n y x alpha y-0)
  (absent (y x) (y-0 x-0))
  (operation nonce-test (added-strand resp 3)
    (exp (gen) (mul y x alpha)) (3 0))
  (traces
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (send (enc a b group (exp (gen) (mul x alpha)) (privk a)))
      (recv
        (enc a b group (exp (gen) (mul y alpha))
          (exp (gen) (mul x alpha)) (privk b)))
      (send (enc n (exp (gen) (mul y x alpha)))) (recv n))
    ((send (enc "Group id" group (exp (gen) alpha) k-magic)))
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (recv (enc a b group (exp (gen) (mul x alpha)) (privk a)))
      (send
        (enc a b group (exp (gen) (mul y alpha))
          (exp (gen) (mul x alpha)) (privk b))))
    ((recv (exp (gen) (mul y x alpha)))
      (send (exp (gen) (mul y x alpha))))
    ((recv
       (enc "Group id" group-0 (exp (gen) (mul y x alpha (rec y-0)))
         k-magic-0))
      (recv
        (enc a-0 b-0 group-0 (exp (gen) (mul y x alpha (rec y-0) x-0))
          (privk a-0)))
      (send
        (enc a-0 b-0 group-0 (exp (gen) (mul y x alpha))
          (exp (gen) (mul y x alpha (rec y-0) x-0)) (privk b-0)))))
  (label 12)
  (parent 7)
  (unrealized (4 0) (4 1))
  (dead)
  (comment "empty cohort"))

(defskeleton dh_sig2
  (vars (k-magic skey) (n group text) (a b name) (y x alpha rndx)
    (w expt))
  (defstrand init 5 (k-magic k-magic) (n n) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (x x) (y y))
  (defstrand group-init 1 (k-magic k-magic) (group group) (alpha alpha))
  (defstrand resp 3 (k-magic k-magic) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (y y) (x x))
  (deflistener (exp (gen) (mul y x alpha)))
  (deflistener (cat (exp (gen) (mul y x alpha (rec w))) w))
  (precedes ((0 1) (2 0)) ((1 0) (0 0)) ((2 2) (0 2)) ((2 2) (4 0))
    ((3 1) (0 4)) ((4 1) (3 0)))
  (non-orig k-magic (privk a) (privk b))
  (uniq-gen n y x alpha)
  (absent (y x))
  (precur (4 0))
  (operation nonce-test
    (added-listener (cat (exp (gen) (mul y x alpha (rec w))) w))
    (exp (gen) (mul y x alpha)) (3 0))
  (traces
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (send (enc a b group (exp (gen) (mul x alpha)) (privk a)))
      (recv
        (enc a b group (exp (gen) (mul y alpha))
          (exp (gen) (mul x alpha)) (privk b)))
      (send (enc n (exp (gen) (mul y x alpha)))) (recv n))
    ((send (enc "Group id" group (exp (gen) alpha) k-magic)))
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (recv (enc a b group (exp (gen) (mul x alpha)) (privk a)))
      (send
        (enc a b group (exp (gen) (mul y alpha))
          (exp (gen) (mul x alpha)) (privk b))))
    ((recv (exp (gen) (mul y x alpha)))
      (send (exp (gen) (mul y x alpha))))
    ((recv (cat (exp (gen) (mul y x alpha (rec w))) w))
      (send (cat (exp (gen) (mul y x alpha (rec w))) w))))
  (label 13)
  (parent 7)
  (unrealized (4 0))
  (comment "7 in cohort - 7 not yet seen"))

(defskeleton dh_sig2
  (vars (k-magic k-magic-0 k-magic-1 skey) (n group group-0 text)
    (a b a-0 b-0 name) (y alpha x alpha-0 x-0 rndx))
  (defstrand init 5 (k-magic k-magic) (n n) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (x x) (y (mul y (rec alpha) alpha-0)))
  (defstrand group-init 1 (k-magic k-magic) (group group) (alpha alpha))
  (defstrand resp 3 (k-magic k-magic-0) (group group) (a a) (b b)
    (g (exp (gen) alpha-0)) (y y) (x (mul alpha x (rec alpha-0))))
  (defstrand group-init 1 (k-magic k-magic-0) (group group)
    (alpha alpha-0))
  (deflistener (exp (gen) (mul y x alpha-0)))
  (defstrand init 2 (k-magic k-magic-1) (group group-0) (a a-0) (b b-0)
    (g (exp (gen) (mul y x alpha-0 (rec x-0)))) (x x-0))
  (precedes ((0 1) (2 0)) ((1 0) (0 0)) ((2 2) (0 2)) ((2 2) (5 0))
    ((3 0) (2 0)) ((4 1) (0 4)) ((5 1) (4 0)))
  (non-orig k-magic k-magic-0 k-magic-1 (privk a) (privk b))
  (uniq-gen n y alpha x alpha-0 x-0)
  (absent (y (mul alpha x (rec alpha-0))))
  (operation nonce-test (added-strand init 2)
    (exp (gen) (mul y x alpha-0)) (4 0))
  (traces
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (send (enc a b group (exp (gen) (mul alpha x)) (privk a)))
      (recv
        (enc a b group (exp (gen) (mul y alpha-0))
          (exp (gen) (mul alpha x)) (privk b)))
      (send (enc n (exp (gen) (mul y x alpha-0)))) (recv n))
    ((send (enc "Group id" group (exp (gen) alpha) k-magic)))
    ((recv (enc "Group id" group (exp (gen) alpha-0) k-magic-0))
      (recv (enc a b group (exp (gen) (mul alpha x)) (privk a)))
      (send
        (enc a b group (exp (gen) (mul y alpha-0))
          (exp (gen) (mul alpha x)) (privk b))))
    ((send (enc "Group id" group (exp (gen) alpha-0) k-magic-0)))
    ((recv (exp (gen) (mul y x alpha-0)))
      (send (exp (gen) (mul y x alpha-0))))
    ((recv
       (enc "Group id" group-0 (exp (gen) (mul y x alpha-0 (rec x-0)))
         k-magic-1))
      (send
        (enc a-0 b-0 group-0 (exp (gen) (mul y x alpha-0))
          (privk a-0)))))
  (label 14)
  (parent 9)
  (unrealized (5 0))
  (dead)
  (comment "empty cohort"))

(defskeleton dh_sig2
  (vars (k-magic k-magic-0 k-magic-1 skey) (n group group-0 text)
    (a b a-0 b-0 name) (y alpha x alpha-0 y-0 rndx) (x-0 expt))
  (defstrand init 5 (k-magic k-magic) (n n) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (x x) (y (mul y (rec alpha) alpha-0)))
  (defstrand group-init 1 (k-magic k-magic) (group group) (alpha alpha))
  (defstrand resp 3 (k-magic k-magic-0) (group group) (a a) (b b)
    (g (exp (gen) alpha-0)) (y y) (x (mul alpha x (rec alpha-0))))
  (defstrand group-init 1 (k-magic k-magic-0) (group group)
    (alpha alpha-0))
  (deflistener (exp (gen) (mul y x alpha-0)))
  (defstrand resp 3 (k-magic k-magic-1) (group group-0) (a a-0) (b b-0)
    (g (exp (gen) (mul y x alpha-0 (rec y-0)))) (y y-0) (x x-0))
  (precedes ((0 1) (2 0)) ((1 0) (0 0)) ((2 2) (0 2)) ((2 2) (5 0))
    ((3 0) (2 0)) ((4 1) (0 4)) ((5 2) (4 0)))
  (non-orig k-magic k-magic-0 k-magic-1 (privk a) (privk b))
  (uniq-gen n y alpha x alpha-0 y-0)
  (absent (y (mul alpha x (rec alpha-0))) (y-0 x-0))
  (operation nonce-test (added-strand resp 3)
    (exp (gen) (mul y x alpha-0)) (4 0))
  (traces
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (send (enc a b group (exp (gen) (mul alpha x)) (privk a)))
      (recv
        (enc a b group (exp (gen) (mul y alpha-0))
          (exp (gen) (mul alpha x)) (privk b)))
      (send (enc n (exp (gen) (mul y x alpha-0)))) (recv n))
    ((send (enc "Group id" group (exp (gen) alpha) k-magic)))
    ((recv (enc "Group id" group (exp (gen) alpha-0) k-magic-0))
      (recv (enc a b group (exp (gen) (mul alpha x)) (privk a)))
      (send
        (enc a b group (exp (gen) (mul y alpha-0))
          (exp (gen) (mul alpha x)) (privk b))))
    ((send (enc "Group id" group (exp (gen) alpha-0) k-magic-0)))
    ((recv (exp (gen) (mul y x alpha-0)))
      (send (exp (gen) (mul y x alpha-0))))
    ((recv
       (enc "Group id" group-0 (exp (gen) (mul y x alpha-0 (rec y-0)))
         k-magic-1))
      (recv
        (enc a-0 b-0 group-0 (exp (gen) (mul y x alpha-0 (rec y-0) x-0))
          (privk a-0)))
      (send
        (enc a-0 b-0 group-0 (exp (gen) (mul y x alpha-0))
          (exp (gen) (mul y x alpha-0 (rec y-0) x-0)) (privk b-0)))))
  (label 15)
  (parent 9)
  (unrealized (5 0) (5 1))
  (dead)
  (comment "empty cohort"))

(defskeleton dh_sig2
  (vars (k-magic k-magic-0 skey) (n group text) (a b name)
    (y alpha x alpha-0 rndx) (w expt))
  (defstrand init 5 (k-magic k-magic) (n n) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (x x) (y (mul y (rec alpha) alpha-0)))
  (defstrand group-init 1 (k-magic k-magic) (group group) (alpha alpha))
  (defstrand resp 3 (k-magic k-magic-0) (group group) (a a) (b b)
    (g (exp (gen) alpha-0)) (y y) (x (mul alpha x (rec alpha-0))))
  (defstrand group-init 1 (k-magic k-magic-0) (group group)
    (alpha alpha-0))
  (deflistener (exp (gen) (mul y x alpha-0)))
  (deflistener (cat (exp (gen) (mul y x alpha-0 (rec w))) w))
  (precedes ((0 1) (2 0)) ((1 0) (0 0)) ((2 2) (0 2)) ((2 2) (5 0))
    ((3 0) (2 0)) ((4 1) (0 4)) ((5 1) (4 0)))
  (non-orig k-magic k-magic-0 (privk a) (privk b))
  (uniq-gen n y alpha x alpha-0)
  (absent (y (mul alpha x (rec alpha-0))))
  (precur (5 0))
  (operation nonce-test
    (added-listener (cat (exp (gen) (mul y x alpha-0 (rec w))) w))
    (exp (gen) (mul y x alpha-0)) (4 0))
  (traces
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (send (enc a b group (exp (gen) (mul alpha x)) (privk a)))
      (recv
        (enc a b group (exp (gen) (mul y alpha-0))
          (exp (gen) (mul alpha x)) (privk b)))
      (send (enc n (exp (gen) (mul y x alpha-0)))) (recv n))
    ((send (enc "Group id" group (exp (gen) alpha) k-magic)))
    ((recv (enc "Group id" group (exp (gen) alpha-0) k-magic-0))
      (recv (enc a b group (exp (gen) (mul alpha x)) (privk a)))
      (send
        (enc a b group (exp (gen) (mul y alpha-0))
          (exp (gen) (mul alpha x)) (privk b))))
    ((send (enc "Group id" group (exp (gen) alpha-0) k-magic-0)))
    ((recv (exp (gen) (mul y x alpha-0)))
      (send (exp (gen) (mul y x alpha-0))))
    ((recv (cat (exp (gen) (mul y x alpha-0 (rec w))) w))
      (send (cat (exp (gen) (mul y x alpha-0 (rec w))) w))))
  (label 16)
  (parent 9)
  (unrealized (5 0))
  (comment "8 in cohort - 8 not yet seen"))

(defskeleton dh_sig2
  (vars (k-magic k-magic-0 skey) (n group group-0 text) (a b name)
    (y x alpha alpha-0 rndx))
  (defstrand init 5 (k-magic k-magic) (n n) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (x x) (y y))
  (defstrand group-init 1 (k-magic k-magic) (group group) (alpha alpha))
  (defstrand resp 3 (k-magic k-magic) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (y y) (x x))
  (deflistener (exp (gen) (mul y x alpha)))
  (deflistener (cat (exp (gen) alpha-0) (mul y x alpha (rec alpha-0))))
  (defstrand group-init 1 (k-magic k-magic-0) (group group-0)
    (alpha alpha-0))
  (precedes ((0 1) (2 0)) ((1 0) (0 0)) ((2 2) (0 2)) ((2 2) (4 0))
    ((3 1) (0 4)) ((4 1) (3 0)) ((5 0) (4 0)))
  (non-orig k-magic (privk a) (privk b))
  (uniq-gen n y x alpha alpha-0)
  (absent (y x))
  (precur (4 0))
  (operation nonce-test (added-strand group-init 1) (exp (gen) alpha-0)
    (4 0))
  (traces
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (send (enc a b group (exp (gen) (mul x alpha)) (privk a)))
      (recv
        (enc a b group (exp (gen) (mul y alpha))
          (exp (gen) (mul x alpha)) (privk b)))
      (send (enc n (exp (gen) (mul y x alpha)))) (recv n))
    ((send (enc "Group id" group (exp (gen) alpha) k-magic)))
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (recv (enc a b group (exp (gen) (mul x alpha)) (privk a)))
      (send
        (enc a b group (exp (gen) (mul y alpha))
          (exp (gen) (mul x alpha)) (privk b))))
    ((recv (exp (gen) (mul y x alpha)))
      (send (exp (gen) (mul y x alpha))))
    ((recv (cat (exp (gen) alpha-0) (mul y x alpha (rec alpha-0))))
      (send (cat (exp (gen) alpha-0) (mul y x alpha (rec alpha-0)))))
    ((send (enc "Group id" group-0 (exp (gen) alpha-0) k-magic-0))))
  (label 17)
  (parent 13)
  (unrealized (3 0) (4 0))
  (dead)
  (comment "empty cohort"))

(defskeleton dh_sig2
  (vars (k-magic skey) (n group text) (a b name) (y x alpha rndx))
  (defstrand init 5 (k-magic k-magic) (n n) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (x x) (y y))
  (defstrand group-init 1 (k-magic k-magic) (group group) (alpha alpha))
  (defstrand resp 3 (k-magic k-magic) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (y y) (x x))
  (deflistener (exp (gen) (mul y x alpha)))
  (deflistener (cat (exp (gen) alpha) (mul y x)))
  (precedes ((0 1) (2 0)) ((1 0) (0 0)) ((2 2) (0 2)) ((2 2) (4 0))
    ((3 1) (0 4)) ((4 1) (3 0)))
  (non-orig k-magic (privk a) (privk b))
  (uniq-gen n y x alpha)
  (absent (y x))
  (precur (4 0))
  (operation nonce-test (displaced 5 1 group-init 1) (exp (gen) alpha-0)
    (4 0))
  (traces
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (send (enc a b group (exp (gen) (mul x alpha)) (privk a)))
      (recv
        (enc a b group (exp (gen) (mul y alpha))
          (exp (gen) (mul x alpha)) (privk b)))
      (send (enc n (exp (gen) (mul y x alpha)))) (recv n))
    ((send (enc "Group id" group (exp (gen) alpha) k-magic)))
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (recv (enc a b group (exp (gen) (mul x alpha)) (privk a)))
      (send
        (enc a b group (exp (gen) (mul y alpha))
          (exp (gen) (mul x alpha)) (privk b))))
    ((recv (exp (gen) (mul y x alpha)))
      (send (exp (gen) (mul y x alpha))))
    ((recv (cat (exp (gen) alpha) (mul y x)))
      (send (cat (exp (gen) alpha) (mul y x)))))
  (label 18)
  (parent 13)
  (unrealized (3 0) (4 0))
  (comment "2 in cohort - 2 not yet seen"))

(defskeleton dh_sig2
  (vars (k-magic skey) (n group text) (a b name) (y x alpha rndx))
  (defstrand init 5 (k-magic k-magic) (n n) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (x x) (y y))
  (defstrand group-init 1 (k-magic k-magic) (group group) (alpha alpha))
  (defstrand resp 3 (k-magic k-magic) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (y y) (x x))
  (deflistener (exp (gen) (mul y x alpha)))
  (deflistener (cat (gen) (mul y x alpha)))
  (precedes ((0 1) (2 0)) ((1 0) (0 0)) ((2 2) (0 2)) ((2 2) (4 0))
    ((3 1) (0 4)) ((4 1) (3 0)))
  (non-orig k-magic (privk a) (privk b))
  (uniq-gen n y x alpha)
  (absent (y x))
  (precur (4 0))
  (operation nonce-test
    (contracted (y-0 y) (x-0 x) (alpha-0 alpha) (w (mul y x alpha)))
    (gen) (4 0))
  (traces
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (send (enc a b group (exp (gen) (mul x alpha)) (privk a)))
      (recv
        (enc a b group (exp (gen) (mul y alpha))
          (exp (gen) (mul x alpha)) (privk b)))
      (send (enc n (exp (gen) (mul y x alpha)))) (recv n))
    ((send (enc "Group id" group (exp (gen) alpha) k-magic)))
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (recv (enc a b group (exp (gen) (mul x alpha)) (privk a)))
      (send
        (enc a b group (exp (gen) (mul y alpha))
          (exp (gen) (mul x alpha)) (privk b))))
    ((recv (exp (gen) (mul y x alpha)))
      (send (exp (gen) (mul y x alpha))))
    ((recv (cat (gen) (mul y x alpha)))
      (send (cat (gen) (mul y x alpha)))))
  (label 19)
  (parent 13)
  (unrealized (3 0) (4 0))
  (dead)
  (comment "empty cohort"))

(defskeleton dh_sig2
  (vars (k-magic k-magic-0 skey) (n group group-0 text)
    (a b a-0 b-0 name) (y x alpha rndx) (w expt) (x-0 rndx))
  (defstrand init 5 (k-magic k-magic) (n n) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (x x) (y y))
  (defstrand group-init 1 (k-magic k-magic) (group group) (alpha alpha))
  (defstrand resp 3 (k-magic k-magic) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (y y) (x x))
  (deflistener (exp (gen) (mul y x alpha)))
  (deflistener (cat (exp (gen) (mul y x alpha (rec w))) w))
  (defstrand init 2 (k-magic k-magic-0) (group group-0) (a a-0) (b b-0)
    (g (exp (gen) (mul y x alpha (rec w) (rec x-0)))) (x x-0))
  (precedes ((0 1) (2 0)) ((1 0) (0 0)) ((2 2) (0 2)) ((2 2) (5 0))
    ((3 1) (0 4)) ((4 1) (3 0)) ((5 1) (4 0)))
  (non-orig k-magic k-magic-0 (privk a) (privk b))
  (uniq-gen n y x alpha x-0)
  (absent (y x))
  (precur (4 0))
  (operation nonce-test (added-strand init 2)
    (exp (gen) (mul y x alpha (rec w))) (4 0))
  (traces
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (send (enc a b group (exp (gen) (mul x alpha)) (privk a)))
      (recv
        (enc a b group (exp (gen) (mul y alpha))
          (exp (gen) (mul x alpha)) (privk b)))
      (send (enc n (exp (gen) (mul y x alpha)))) (recv n))
    ((send (enc "Group id" group (exp (gen) alpha) k-magic)))
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (recv (enc a b group (exp (gen) (mul x alpha)) (privk a)))
      (send
        (enc a b group (exp (gen) (mul y alpha))
          (exp (gen) (mul x alpha)) (privk b))))
    ((recv (exp (gen) (mul y x alpha)))
      (send (exp (gen) (mul y x alpha))))
    ((recv (cat (exp (gen) (mul y x alpha (rec w))) w))
      (send (cat (exp (gen) (mul y x alpha (rec w))) w)))
    ((recv
       (enc "Group id" group-0
         (exp (gen) (mul y x alpha (rec w) (rec x-0))) k-magic-0))
      (send
        (enc a-0 b-0 group-0 (exp (gen) (mul y x alpha (rec w)))
          (privk a-0)))))
  (label 20)
  (parent 13)
  (unrealized (5 0))
  (comment "2 in cohort - 2 not yet seen"))

(defskeleton dh_sig2
  (vars (k-magic skey) (n group text) (a b name) (alpha y x rndx))
  (defstrand init 5 (k-magic k-magic) (n n) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (x x) (y y))
  (defstrand group-init 1 (k-magic k-magic) (group group) (alpha alpha))
  (defstrand resp 3 (k-magic k-magic) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (y y) (x x))
  (deflistener (exp (gen) (mul alpha y x)))
  (deflistener (cat (exp (gen) (mul alpha x)) y))
  (precedes ((0 1) (2 0)) ((1 0) (0 0)) ((2 2) (0 2)) ((2 2) (4 0))
    ((3 1) (0 4)) ((4 1) (3 0)))
  (non-orig k-magic (privk a) (privk b))
  (uniq-gen n alpha y x)
  (absent (y x))
  (precur (4 0))
  (operation nonce-test (displaced 5 0 init 2)
    (exp (gen) (mul y-0 x-0 alpha (rec w))) (4 0))
  (traces
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (send (enc a b group (exp (gen) (mul alpha x)) (privk a)))
      (recv
        (enc a b group (exp (gen) (mul alpha y))
          (exp (gen) (mul alpha x)) (privk b)))
      (send (enc n (exp (gen) (mul alpha y x)))) (recv n))
    ((send (enc "Group id" group (exp (gen) alpha) k-magic)))
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (recv (enc a b group (exp (gen) (mul alpha x)) (privk a)))
      (send
        (enc a b group (exp (gen) (mul alpha y))
          (exp (gen) (mul alpha x)) (privk b))))
    ((recv (exp (gen) (mul alpha y x)))
      (send (exp (gen) (mul alpha y x))))
    ((recv (cat (exp (gen) (mul alpha x)) y))
      (send (cat (exp (gen) (mul alpha x)) y))))
  (label 21)
  (parent 13)
  (unrealized (4 0))
  (dead)
  (comment "empty cohort"))

(defskeleton dh_sig2
  (vars (k-magic skey) (n group text) (a b name) (alpha x y rndx))
  (defstrand init 5 (k-magic k-magic) (n n) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (x x) (y y))
  (defstrand group-init 1 (k-magic k-magic) (group group) (alpha alpha))
  (defstrand resp 3 (k-magic k-magic) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (y y) (x x))
  (deflistener (exp (gen) (mul alpha x y)))
  (deflistener (cat (exp (gen) (mul alpha y)) x))
  (precedes ((0 1) (2 0)) ((1 0) (0 0)) ((2 2) (0 2)) ((2 2) (4 0))
    ((3 1) (0 4)) ((4 1) (3 0)))
  (non-orig k-magic (privk a) (privk b))
  (uniq-gen n alpha x y)
  (absent (y x))
  (precur (4 0))
  (operation nonce-test (displaced 5 2 resp 3)
    (exp (gen) (mul y-0 x-0 alpha (rec w))) (4 0))
  (traces
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (send (enc a b group (exp (gen) (mul alpha x)) (privk a)))
      (recv
        (enc a b group (exp (gen) (mul alpha y))
          (exp (gen) (mul alpha x)) (privk b)))
      (send (enc n (exp (gen) (mul alpha x y)))) (recv n))
    ((send (enc "Group id" group (exp (gen) alpha) k-magic)))
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (recv (enc a b group (exp (gen) (mul alpha x)) (privk a)))
      (send
        (enc a b group (exp (gen) (mul alpha y))
          (exp (gen) (mul alpha x)) (privk b))))
    ((recv (exp (gen) (mul alpha x y)))
      (send (exp (gen) (mul alpha x y))))
    ((recv (cat (exp (gen) (mul alpha y)) x))
      (send (cat (exp (gen) (mul alpha y)) x))))
  (label 22)
  (parent 13)
  (unrealized (4 0))
  (dead)
  (comment "empty cohort"))

(defskeleton dh_sig2
  (vars (k-magic k-magic-0 skey) (n group group-0 text)
    (a b a-0 b-0 name) (y x alpha rndx) (w expt) (y-0 rndx) (x-0 expt))
  (defstrand init 5 (k-magic k-magic) (n n) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (x x) (y y))
  (defstrand group-init 1 (k-magic k-magic) (group group) (alpha alpha))
  (defstrand resp 3 (k-magic k-magic) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (y y) (x x))
  (deflistener (exp (gen) (mul y x alpha)))
  (deflistener (cat (exp (gen) (mul y x alpha (rec w))) w))
  (defstrand resp 3 (k-magic k-magic-0) (group group-0) (a a-0) (b b-0)
    (g (exp (gen) (mul y x alpha (rec w) (rec y-0)))) (y y-0) (x x-0))
  (precedes ((0 1) (2 0)) ((1 0) (0 0)) ((2 2) (0 2)) ((2 2) (5 0))
    ((3 1) (0 4)) ((4 1) (3 0)) ((5 2) (4 0)))
  (non-orig k-magic k-magic-0 (privk a) (privk b))
  (uniq-gen n y x alpha y-0)
  (absent (y x) (y-0 x-0))
  (precur (4 0))
  (operation nonce-test (added-strand resp 3)
    (exp (gen) (mul y x alpha (rec w))) (4 0))
  (traces
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (send (enc a b group (exp (gen) (mul x alpha)) (privk a)))
      (recv
        (enc a b group (exp (gen) (mul y alpha))
          (exp (gen) (mul x alpha)) (privk b)))
      (send (enc n (exp (gen) (mul y x alpha)))) (recv n))
    ((send (enc "Group id" group (exp (gen) alpha) k-magic)))
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (recv (enc a b group (exp (gen) (mul x alpha)) (privk a)))
      (send
        (enc a b group (exp (gen) (mul y alpha))
          (exp (gen) (mul x alpha)) (privk b))))
    ((recv (exp (gen) (mul y x alpha)))
      (send (exp (gen) (mul y x alpha))))
    ((recv (cat (exp (gen) (mul y x alpha (rec w))) w))
      (send (cat (exp (gen) (mul y x alpha (rec w))) w)))
    ((recv
       (enc "Group id" group-0
         (exp (gen) (mul y x alpha (rec w) (rec y-0))) k-magic-0))
      (recv
        (enc a-0 b-0 group-0
          (exp (gen) (mul y x alpha (rec w) (rec y-0) x-0))
          (privk a-0)))
      (send
        (enc a-0 b-0 group-0 (exp (gen) (mul y x alpha (rec w)))
          (exp (gen) (mul y x alpha (rec w) (rec y-0) x-0))
          (privk b-0)))))
  (label 23)
  (parent 13)
  (unrealized (5 0) (5 1))
  (comment "2 in cohort - 2 not yet seen"))

(defskeleton dh_sig2
  (vars (k-magic k-magic-0 k-magic-1 skey) (n group group-0 text)
    (a b name) (alpha y x alpha-0 alpha-1 rndx))
  (defstrand init 5 (k-magic k-magic) (n n) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (x x) (y (mul (rec alpha) y alpha-0)))
  (defstrand group-init 1 (k-magic k-magic) (group group) (alpha alpha))
  (defstrand resp 3 (k-magic k-magic-0) (group group) (a a) (b b)
    (g (exp (gen) alpha-0)) (y y) (x (mul alpha x (rec alpha-0))))
  (defstrand group-init 1 (k-magic k-magic-0) (group group)
    (alpha alpha-0))
  (deflistener (exp (gen) (mul y x alpha-0)))
  (deflistener
    (cat (exp (gen) alpha-1) (mul y x alpha-0 (rec alpha-1))))
  (defstrand group-init 1 (k-magic k-magic-1) (group group-0)
    (alpha alpha-1))
  (precedes ((0 1) (2 0)) ((1 0) (0 0)) ((2 2) (0 2)) ((2 2) (5 0))
    ((3 0) (2 0)) ((4 1) (0 4)) ((5 1) (4 0)) ((6 0) (5 0)))
  (non-orig k-magic k-magic-0 (privk a) (privk b))
  (uniq-gen n alpha y x alpha-0 alpha-1)
  (absent (y (mul alpha x (rec alpha-0))))
  (precur (5 0))
  (operation nonce-test (added-strand group-init 1) (exp (gen) alpha-1)
    (5 0))
  (traces
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (send (enc a b group (exp (gen) (mul alpha x)) (privk a)))
      (recv
        (enc a b group (exp (gen) (mul y alpha-0))
          (exp (gen) (mul alpha x)) (privk b)))
      (send (enc n (exp (gen) (mul y x alpha-0)))) (recv n))
    ((send (enc "Group id" group (exp (gen) alpha) k-magic)))
    ((recv (enc "Group id" group (exp (gen) alpha-0) k-magic-0))
      (recv (enc a b group (exp (gen) (mul alpha x)) (privk a)))
      (send
        (enc a b group (exp (gen) (mul y alpha-0))
          (exp (gen) (mul alpha x)) (privk b))))
    ((send (enc "Group id" group (exp (gen) alpha-0) k-magic-0)))
    ((recv (exp (gen) (mul y x alpha-0)))
      (send (exp (gen) (mul y x alpha-0))))
    ((recv (cat (exp (gen) alpha-1) (mul y x alpha-0 (rec alpha-1))))
      (send (cat (exp (gen) alpha-1) (mul y x alpha-0 (rec alpha-1)))))
    ((send (enc "Group id" group-0 (exp (gen) alpha-1) k-magic-1))))
  (label 24)
  (parent 16)
  (unrealized (4 0) (5 0))
  (dead)
  (comment "empty cohort"))

(defskeleton dh_sig2
  (vars (k-magic k-magic-0 skey) (n group text) (a b name)
    (alpha y x alpha-0 rndx))
  (defstrand init 5 (k-magic k-magic) (n n) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (x x) (y (mul (rec alpha) y alpha-0)))
  (defstrand group-init 1 (k-magic k-magic) (group group) (alpha alpha))
  (defstrand resp 3 (k-magic k-magic-0) (group group) (a a) (b b)
    (g (exp (gen) alpha-0)) (y y) (x (mul alpha x (rec alpha-0))))
  (defstrand group-init 1 (k-magic k-magic-0) (group group)
    (alpha alpha-0))
  (deflistener (exp (gen) (mul y x alpha-0)))
  (deflistener (cat (exp (gen) alpha-0) (mul y x)))
  (precedes ((0 1) (2 0)) ((1 0) (0 0)) ((2 2) (0 2)) ((2 2) (5 0))
    ((3 0) (2 0)) ((4 1) (0 4)) ((5 1) (4 0)))
  (non-orig k-magic k-magic-0 (privk a) (privk b))
  (uniq-gen n alpha y x alpha-0)
  (absent (y (mul alpha x (rec alpha-0))))
  (precur (5 0))
  (operation nonce-test (displaced 6 3 group-init 1) (exp (gen) alpha-1)
    (5 0))
  (traces
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (send (enc a b group (exp (gen) (mul alpha x)) (privk a)))
      (recv
        (enc a b group (exp (gen) (mul y alpha-0))
          (exp (gen) (mul alpha x)) (privk b)))
      (send (enc n (exp (gen) (mul y x alpha-0)))) (recv n))
    ((send (enc "Group id" group (exp (gen) alpha) k-magic)))
    ((recv (enc "Group id" group (exp (gen) alpha-0) k-magic-0))
      (recv (enc a b group (exp (gen) (mul alpha x)) (privk a)))
      (send
        (enc a b group (exp (gen) (mul y alpha-0))
          (exp (gen) (mul alpha x)) (privk b))))
    ((send (enc "Group id" group (exp (gen) alpha-0) k-magic-0)))
    ((recv (exp (gen) (mul y x alpha-0)))
      (send (exp (gen) (mul y x alpha-0))))
    ((recv (cat (exp (gen) alpha-0) (mul y x)))
      (send (cat (exp (gen) alpha-0) (mul y x)))))
  (label 25)
  (parent 16)
  (unrealized (4 0) (5 0))
  (comment "2 in cohort - 2 not yet seen"))

(defskeleton dh_sig2
  (vars (k-magic k-magic-0 skey) (n group text) (a b name)
    (alpha y x alpha-0 rndx))
  (defstrand init 5 (k-magic k-magic) (n n) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (x x) (y (mul (rec alpha) y alpha-0)))
  (defstrand group-init 1 (k-magic k-magic) (group group) (alpha alpha))
  (defstrand resp 3 (k-magic k-magic-0) (group group) (a a) (b b)
    (g (exp (gen) alpha-0)) (y y) (x (mul alpha x (rec alpha-0))))
  (defstrand group-init 1 (k-magic k-magic-0) (group group)
    (alpha alpha-0))
  (deflistener (exp (gen) (mul y x alpha-0)))
  (deflistener (cat (gen) (mul y x alpha-0)))
  (precedes ((0 1) (2 0)) ((1 0) (0 0)) ((2 2) (0 2)) ((2 2) (5 0))
    ((3 0) (2 0)) ((4 1) (0 4)) ((5 1) (4 0)))
  (non-orig k-magic k-magic-0 (privk a) (privk b))
  (uniq-gen n alpha y x alpha-0)
  (absent (y (mul alpha x (rec alpha-0))))
  (precur (5 0))
  (operation nonce-test
    (contracted (y-0 y) (x-0 x) (alpha-1 alpha-0) (w (mul y x alpha-0)))
    (gen) (5 0))
  (traces
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (send (enc a b group (exp (gen) (mul alpha x)) (privk a)))
      (recv
        (enc a b group (exp (gen) (mul y alpha-0))
          (exp (gen) (mul alpha x)) (privk b)))
      (send (enc n (exp (gen) (mul y x alpha-0)))) (recv n))
    ((send (enc "Group id" group (exp (gen) alpha) k-magic)))
    ((recv (enc "Group id" group (exp (gen) alpha-0) k-magic-0))
      (recv (enc a b group (exp (gen) (mul alpha x)) (privk a)))
      (send
        (enc a b group (exp (gen) (mul y alpha-0))
          (exp (gen) (mul alpha x)) (privk b))))
    ((send (enc "Group id" group (exp (gen) alpha-0) k-magic-0)))
    ((recv (exp (gen) (mul y x alpha-0)))
      (send (exp (gen) (mul y x alpha-0))))
    ((recv (cat (gen) (mul y x alpha-0)))
      (send (cat (gen) (mul y x alpha-0)))))
  (label 26)
  (parent 16)
  (unrealized (4 0) (5 0))
  (dead)
  (comment "empty cohort"))

(defskeleton dh_sig2
  (vars (k-magic k-magic-0 skey) (n group text) (a b name)
    (y x alpha alpha-0 rndx))
  (defstrand init 5 (k-magic k-magic) (n n) (group group) (a a) (b b)
    (g (exp (gen) alpha-0)) (x x) (y (mul y alpha (rec alpha-0))))
  (defstrand group-init 1 (k-magic k-magic) (group group)
    (alpha alpha-0))
  (defstrand resp 3 (k-magic k-magic-0) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (y y) (x (mul x (rec alpha) alpha-0)))
  (defstrand group-init 1 (k-magic k-magic-0) (group group)
    (alpha alpha))
  (deflistener (exp (gen) (mul y x alpha)))
  (deflistener (cat (exp (gen) alpha-0) (mul y x alpha (rec alpha-0))))
  (precedes ((0 1) (2 0)) ((1 0) (0 0)) ((2 2) (0 2)) ((2 2) (5 0))
    ((3 0) (2 0)) ((4 1) (0 4)) ((5 1) (4 0)))
  (non-orig k-magic k-magic-0 (privk a) (privk b))
  (uniq-gen n y x alpha alpha-0)
  (absent (y (mul x (rec alpha) alpha-0)))
  (precur (5 0))
  (operation nonce-test (displaced 6 1 group-init 1) (exp (gen) alpha-1)
    (5 0))
  (traces
    ((recv (enc "Group id" group (exp (gen) alpha-0) k-magic))
      (send (enc a b group (exp (gen) (mul x alpha-0)) (privk a)))
      (recv
        (enc a b group (exp (gen) (mul y alpha))
          (exp (gen) (mul x alpha-0)) (privk b)))
      (send (enc n (exp (gen) (mul y x alpha)))) (recv n))
    ((send (enc "Group id" group (exp (gen) alpha-0) k-magic)))
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic-0))
      (recv (enc a b group (exp (gen) (mul x alpha-0)) (privk a)))
      (send
        (enc a b group (exp (gen) (mul y alpha))
          (exp (gen) (mul x alpha-0)) (privk b))))
    ((send (enc "Group id" group (exp (gen) alpha) k-magic-0)))
    ((recv (exp (gen) (mul y x alpha)))
      (send (exp (gen) (mul y x alpha))))
    ((recv (cat (exp (gen) alpha-0) (mul y x alpha (rec alpha-0))))
      (send (cat (exp (gen) alpha-0) (mul y x alpha (rec alpha-0))))))
  (label 27)
  (parent 16)
  (unrealized (4 0) (5 0))
  (comment "2 in cohort - 2 not yet seen"))

(defskeleton dh_sig2
  (vars (k-magic k-magic-0 k-magic-1 skey) (n group group-0 text)
    (a b a-0 b-0 name) (y alpha x alpha-0 rndx) (w expt) (x-0 rndx))
  (defstrand init 5 (k-magic k-magic) (n n) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (x x) (y (mul y (rec alpha) alpha-0)))
  (defstrand group-init 1 (k-magic k-magic) (group group) (alpha alpha))
  (defstrand resp 3 (k-magic k-magic-0) (group group) (a a) (b b)
    (g (exp (gen) alpha-0)) (y y) (x (mul alpha x (rec alpha-0))))
  (defstrand group-init 1 (k-magic k-magic-0) (group group)
    (alpha alpha-0))
  (deflistener (exp (gen) (mul y x alpha-0)))
  (deflistener (cat (exp (gen) (mul y x alpha-0 (rec w))) w))
  (defstrand init 2 (k-magic k-magic-1) (group group-0) (a a-0) (b b-0)
    (g (exp (gen) (mul y x alpha-0 (rec w) (rec x-0)))) (x x-0))
  (precedes ((0 1) (2 0)) ((1 0) (0 0)) ((2 2) (0 2)) ((2 2) (6 0))
    ((3 0) (2 0)) ((4 1) (0 4)) ((5 1) (4 0)) ((6 1) (5 0)))
  (non-orig k-magic k-magic-0 k-magic-1 (privk a) (privk b))
  (uniq-gen n y alpha x alpha-0 x-0)
  (absent (y (mul alpha x (rec alpha-0))))
  (precur (5 0))
  (operation nonce-test (added-strand init 2)
    (exp (gen) (mul y x alpha-0 (rec w))) (5 0))
  (traces
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (send (enc a b group (exp (gen) (mul alpha x)) (privk a)))
      (recv
        (enc a b group (exp (gen) (mul y alpha-0))
          (exp (gen) (mul alpha x)) (privk b)))
      (send (enc n (exp (gen) (mul y x alpha-0)))) (recv n))
    ((send (enc "Group id" group (exp (gen) alpha) k-magic)))
    ((recv (enc "Group id" group (exp (gen) alpha-0) k-magic-0))
      (recv (enc a b group (exp (gen) (mul alpha x)) (privk a)))
      (send
        (enc a b group (exp (gen) (mul y alpha-0))
          (exp (gen) (mul alpha x)) (privk b))))
    ((send (enc "Group id" group (exp (gen) alpha-0) k-magic-0)))
    ((recv (exp (gen) (mul y x alpha-0)))
      (send (exp (gen) (mul y x alpha-0))))
    ((recv (cat (exp (gen) (mul y x alpha-0 (rec w))) w))
      (send (cat (exp (gen) (mul y x alpha-0 (rec w))) w)))
    ((recv
       (enc "Group id" group-0
         (exp (gen) (mul y x alpha-0 (rec w) (rec x-0))) k-magic-1))
      (send
        (enc a-0 b-0 group-0 (exp (gen) (mul y x alpha-0 (rec w)))
          (privk a-0)))))
  (label 28)
  (parent 16)
  (unrealized (6 0))
  (comment "3 in cohort - 3 not yet seen"))

(defskeleton dh_sig2
  (vars (k-magic k-magic-0 skey) (n group text) (a b name)
    (y alpha alpha-0 x rndx))
  (defstrand init 5 (k-magic k-magic) (n n) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (x x) (y (mul y (rec alpha) alpha-0)))
  (defstrand group-init 1 (k-magic k-magic) (group group) (alpha alpha))
  (defstrand resp 3 (k-magic k-magic-0) (group group) (a a) (b b)
    (g (exp (gen) alpha-0)) (y y) (x (mul alpha (rec alpha-0) x)))
  (defstrand group-init 1 (k-magic k-magic-0) (group group)
    (alpha alpha-0))
  (deflistener (exp (gen) (mul y alpha-0 x)))
  (deflistener
    (cat (exp (gen) (mul alpha x)) (mul y (rec alpha) alpha-0)))
  (precedes ((0 1) (2 0)) ((1 0) (0 0)) ((2 2) (0 2)) ((2 2) (5 0))
    ((3 0) (2 0)) ((4 1) (0 4)) ((5 1) (4 0)))
  (non-orig k-magic k-magic-0 (privk a) (privk b))
  (uniq-gen n y alpha alpha-0 x)
  (absent (y (mul alpha (rec alpha-0) x)))
  (precur (5 0))
  (operation nonce-test (displaced 6 0 init 2)
    (exp (gen) (mul y-0 x-0 alpha-1 (rec w))) (5 0))
  (traces
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (send (enc a b group (exp (gen) (mul alpha x)) (privk a)))
      (recv
        (enc a b group (exp (gen) (mul y alpha-0))
          (exp (gen) (mul alpha x)) (privk b)))
      (send (enc n (exp (gen) (mul y alpha-0 x)))) (recv n))
    ((send (enc "Group id" group (exp (gen) alpha) k-magic)))
    ((recv (enc "Group id" group (exp (gen) alpha-0) k-magic-0))
      (recv (enc a b group (exp (gen) (mul alpha x)) (privk a)))
      (send
        (enc a b group (exp (gen) (mul y alpha-0))
          (exp (gen) (mul alpha x)) (privk b))))
    ((send (enc "Group id" group (exp (gen) alpha-0) k-magic-0)))
    ((recv (exp (gen) (mul y alpha-0 x)))
      (send (exp (gen) (mul y alpha-0 x))))
    ((recv (cat (exp (gen) (mul alpha x)) (mul y (rec alpha) alpha-0)))
      (send
        (cat (exp (gen) (mul alpha x)) (mul y (rec alpha) alpha-0)))))
  (label 29)
  (parent 16)
  (unrealized (4 0) (5 0))
  (dead)
  (comment "empty cohort"))

(defskeleton dh_sig2
  (vars (k-magic k-magic-0 skey) (n group text) (a b name)
    (alpha alpha-0 x y rndx))
  (defstrand init 5 (k-magic k-magic) (n n) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (x x) (y (mul (rec alpha) alpha-0 y)))
  (defstrand group-init 1 (k-magic k-magic) (group group) (alpha alpha))
  (defstrand resp 3 (k-magic k-magic-0) (group group) (a a) (b b)
    (g (exp (gen) alpha-0)) (y y) (x (mul alpha (rec alpha-0) x)))
  (defstrand group-init 1 (k-magic k-magic-0) (group group)
    (alpha alpha-0))
  (deflistener (exp (gen) (mul alpha-0 x y)))
  (deflistener (cat (exp (gen) (mul alpha-0 y)) x))
  (precedes ((0 1) (2 0)) ((1 0) (0 0)) ((2 2) (0 2)) ((2 2) (5 0))
    ((3 0) (2 0)) ((4 1) (0 4)) ((5 1) (4 0)))
  (non-orig k-magic k-magic-0 (privk a) (privk b))
  (uniq-gen n alpha alpha-0 x y)
  (absent (y (mul alpha (rec alpha-0) x)))
  (precur (5 0))
  (operation nonce-test (displaced 6 2 resp 3)
    (exp (gen) (mul y-0 x-0 alpha-1 (rec w))) (5 0))
  (traces
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (send (enc a b group (exp (gen) (mul alpha x)) (privk a)))
      (recv
        (enc a b group (exp (gen) (mul alpha-0 y))
          (exp (gen) (mul alpha x)) (privk b)))
      (send (enc n (exp (gen) (mul alpha-0 x y)))) (recv n))
    ((send (enc "Group id" group (exp (gen) alpha) k-magic)))
    ((recv (enc "Group id" group (exp (gen) alpha-0) k-magic-0))
      (recv (enc a b group (exp (gen) (mul alpha x)) (privk a)))
      (send
        (enc a b group (exp (gen) (mul alpha-0 y))
          (exp (gen) (mul alpha x)) (privk b))))
    ((send (enc "Group id" group (exp (gen) alpha-0) k-magic-0)))
    ((recv (exp (gen) (mul alpha-0 x y)))
      (send (exp (gen) (mul alpha-0 x y))))
    ((recv (cat (exp (gen) (mul alpha-0 y)) x))
      (send (cat (exp (gen) (mul alpha-0 y)) x))))
  (label 30)
  (parent 16)
  (unrealized (5 0))
  (dead)
  (comment "empty cohort"))

(defskeleton dh_sig2
  (vars (k-magic k-magic-0 k-magic-1 skey) (n group group-0 text)
    (a b a-0 b-0 name) (y alpha x alpha-0 rndx) (w expt) (y-0 rndx)
    (x-0 expt))
  (defstrand init 5 (k-magic k-magic) (n n) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (x x) (y (mul y (rec alpha) alpha-0)))
  (defstrand group-init 1 (k-magic k-magic) (group group) (alpha alpha))
  (defstrand resp 3 (k-magic k-magic-0) (group group) (a a) (b b)
    (g (exp (gen) alpha-0)) (y y) (x (mul alpha x (rec alpha-0))))
  (defstrand group-init 1 (k-magic k-magic-0) (group group)
    (alpha alpha-0))
  (deflistener (exp (gen) (mul y x alpha-0)))
  (deflistener (cat (exp (gen) (mul y x alpha-0 (rec w))) w))
  (defstrand resp 3 (k-magic k-magic-1) (group group-0) (a a-0) (b b-0)
    (g (exp (gen) (mul y x alpha-0 (rec w) (rec y-0)))) (y y-0) (x x-0))
  (precedes ((0 1) (2 0)) ((1 0) (0 0)) ((2 2) (0 2)) ((2 2) (6 0))
    ((3 0) (2 0)) ((4 1) (0 4)) ((5 1) (4 0)) ((6 2) (5 0)))
  (non-orig k-magic k-magic-0 k-magic-1 (privk a) (privk b))
  (uniq-gen n y alpha x alpha-0 y-0)
  (absent (y (mul alpha x (rec alpha-0))) (y-0 x-0))
  (precur (5 0))
  (operation nonce-test (added-strand resp 3)
    (exp (gen) (mul y x alpha-0 (rec w))) (5 0))
  (traces
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (send (enc a b group (exp (gen) (mul alpha x)) (privk a)))
      (recv
        (enc a b group (exp (gen) (mul y alpha-0))
          (exp (gen) (mul alpha x)) (privk b)))
      (send (enc n (exp (gen) (mul y x alpha-0)))) (recv n))
    ((send (enc "Group id" group (exp (gen) alpha) k-magic)))
    ((recv (enc "Group id" group (exp (gen) alpha-0) k-magic-0))
      (recv (enc a b group (exp (gen) (mul alpha x)) (privk a)))
      (send
        (enc a b group (exp (gen) (mul y alpha-0))
          (exp (gen) (mul alpha x)) (privk b))))
    ((send (enc "Group id" group (exp (gen) alpha-0) k-magic-0)))
    ((recv (exp (gen) (mul y x alpha-0)))
      (send (exp (gen) (mul y x alpha-0))))
    ((recv (cat (exp (gen) (mul y x alpha-0 (rec w))) w))
      (send (cat (exp (gen) (mul y x alpha-0 (rec w))) w)))
    ((recv
       (enc "Group id" group-0
         (exp (gen) (mul y x alpha-0 (rec w) (rec y-0))) k-magic-1))
      (recv
        (enc a-0 b-0 group-0
          (exp (gen) (mul y x alpha-0 (rec w) (rec y-0) x-0))
          (privk a-0)))
      (send
        (enc a-0 b-0 group-0 (exp (gen) (mul y x alpha-0 (rec w)))
          (exp (gen) (mul y x alpha-0 (rec w) (rec y-0) x-0))
          (privk b-0)))))
  (label 31)
  (parent 16)
  (unrealized (6 0) (6 1))
  (comment "3 in cohort - 3 not yet seen"))

(defskeleton dh_sig2
  (vars (k-magic k-magic-0 skey) (n group group-0 text)
    (a b a-0 b-0 name) (y x alpha x-0 rndx))
  (defstrand init 5 (k-magic k-magic) (n n) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (x x) (y y))
  (defstrand group-init 1 (k-magic k-magic) (group group) (alpha alpha))
  (defstrand resp 3 (k-magic k-magic) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (y y) (x x))
  (deflistener (exp (gen) (mul y x alpha)))
  (deflistener (cat (exp (gen) alpha) (mul y x)))
  (defstrand init 2 (k-magic k-magic-0) (group group-0) (a a-0) (b b-0)
    (g (exp (gen) (mul alpha (rec x-0)))) (x x-0))
  (precedes ((0 1) (2 0)) ((1 0) (0 0)) ((1 0) (5 0)) ((2 2) (0 2))
    ((2 2) (4 0)) ((3 1) (0 4)) ((4 1) (3 0)) ((5 1) (4 0)))
  (non-orig k-magic k-magic-0 (privk a) (privk b))
  (uniq-gen n y x alpha x-0)
  (absent (y x))
  (precur (4 0))
  (operation nonce-test (added-strand init 2) (exp (gen) alpha) (4 0)
    (enc "Group id" group (exp (gen) alpha) k-magic))
  (traces
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (send (enc a b group (exp (gen) (mul x alpha)) (privk a)))
      (recv
        (enc a b group (exp (gen) (mul y alpha))
          (exp (gen) (mul x alpha)) (privk b)))
      (send (enc n (exp (gen) (mul y x alpha)))) (recv n))
    ((send (enc "Group id" group (exp (gen) alpha) k-magic)))
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (recv (enc a b group (exp (gen) (mul x alpha)) (privk a)))
      (send
        (enc a b group (exp (gen) (mul y alpha))
          (exp (gen) (mul x alpha)) (privk b))))
    ((recv (exp (gen) (mul y x alpha)))
      (send (exp (gen) (mul y x alpha))))
    ((recv (cat (exp (gen) alpha) (mul y x)))
      (send (cat (exp (gen) alpha) (mul y x))))
    ((recv
       (enc "Group id" group-0 (exp (gen) (mul alpha (rec x-0)))
         k-magic-0))
      (send (enc a-0 b-0 group-0 (exp (gen) alpha) (privk a-0)))))
  (label 32)
  (parent 18)
  (unrealized (3 0) (4 0) (5 0))
  (dead)
  (comment "empty cohort"))

(defskeleton dh_sig2
  (vars (k-magic k-magic-0 skey) (n group group-0 text)
    (a b a-0 b-0 name) (y x alpha y-0 rndx) (x-0 expt))
  (defstrand init 5 (k-magic k-magic) (n n) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (x x) (y y))
  (defstrand group-init 1 (k-magic k-magic) (group group) (alpha alpha))
  (defstrand resp 3 (k-magic k-magic) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (y y) (x x))
  (deflistener (exp (gen) (mul y x alpha)))
  (deflistener (cat (exp (gen) alpha) (mul y x)))
  (defstrand resp 3 (k-magic k-magic-0) (group group-0) (a a-0) (b b-0)
    (g (exp (gen) (mul alpha (rec y-0)))) (y y-0) (x x-0))
  (precedes ((0 1) (2 0)) ((1 0) (0 0)) ((1 0) (5 0)) ((2 2) (0 2))
    ((2 2) (4 0)) ((3 1) (0 4)) ((4 1) (3 0)) ((5 2) (4 0)))
  (non-orig k-magic k-magic-0 (privk a) (privk b))
  (uniq-gen n y x alpha y-0)
  (absent (y x) (y-0 x-0))
  (precur (4 0))
  (operation nonce-test (added-strand resp 3) (exp (gen) alpha) (4 0)
    (enc "Group id" group (exp (gen) alpha) k-magic))
  (traces
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (send (enc a b group (exp (gen) (mul x alpha)) (privk a)))
      (recv
        (enc a b group (exp (gen) (mul y alpha))
          (exp (gen) (mul x alpha)) (privk b)))
      (send (enc n (exp (gen) (mul y x alpha)))) (recv n))
    ((send (enc "Group id" group (exp (gen) alpha) k-magic)))
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (recv (enc a b group (exp (gen) (mul x alpha)) (privk a)))
      (send
        (enc a b group (exp (gen) (mul y alpha))
          (exp (gen) (mul x alpha)) (privk b))))
    ((recv (exp (gen) (mul y x alpha)))
      (send (exp (gen) (mul y x alpha))))
    ((recv (cat (exp (gen) alpha) (mul y x)))
      (send (cat (exp (gen) alpha) (mul y x))))
    ((recv
       (enc "Group id" group-0 (exp (gen) (mul alpha (rec y-0)))
         k-magic-0))
      (recv
        (enc a-0 b-0 group-0 (exp (gen) (mul alpha (rec y-0) x-0))
          (privk a-0)))
      (send
        (enc a-0 b-0 group-0 (exp (gen) alpha)
          (exp (gen) (mul alpha (rec y-0) x-0)) (privk b-0)))))
  (label 33)
  (parent 18)
  (unrealized (3 0) (4 0) (5 0) (5 1))
  (dead)
  (comment "empty cohort"))

(defskeleton dh_sig2
  (vars (k-magic skey) (n group text) (a b a-0 b-0 name)
    (y x x-0 alpha rndx))
  (defstrand init 5 (k-magic k-magic) (n n) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (x x) (y y))
  (defstrand group-init 1 (k-magic k-magic) (group group) (alpha alpha))
  (defstrand resp 3 (k-magic k-magic) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (y y) (x x))
  (deflistener (exp (gen) (mul y x alpha)))
  (deflistener (cat (exp (gen) (mul x-0 alpha)) (mul y x (rec x-0))))
  (defstrand init 2 (k-magic k-magic) (group group) (a a-0) (b b-0)
    (g (exp (gen) alpha)) (x x-0))
  (precedes ((0 1) (2 0)) ((1 0) (0 0)) ((2 2) (0 2)) ((2 2) (5 0))
    ((3 1) (0 4)) ((4 1) (3 0)) ((5 1) (4 0)))
  (non-orig k-magic (privk a) (privk b))
  (uniq-gen n y x x-0 alpha)
  (absent (y x))
  (precur (4 0))
  (operation encryption-test (displaced 6 1 group-init 1)
    (enc "Group id" group-0 (exp (gen) alpha-0) k-magic-0) (5 0))
  (traces
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (send (enc a b group (exp (gen) (mul x alpha)) (privk a)))
      (recv
        (enc a b group (exp (gen) (mul y alpha))
          (exp (gen) (mul x alpha)) (privk b)))
      (send (enc n (exp (gen) (mul y x alpha)))) (recv n))
    ((send (enc "Group id" group (exp (gen) alpha) k-magic)))
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (recv (enc a b group (exp (gen) (mul x alpha)) (privk a)))
      (send
        (enc a b group (exp (gen) (mul y alpha))
          (exp (gen) (mul x alpha)) (privk b))))
    ((recv (exp (gen) (mul y x alpha)))
      (send (exp (gen) (mul y x alpha))))
    ((recv (cat (exp (gen) (mul x-0 alpha)) (mul y x (rec x-0))))
      (send (cat (exp (gen) (mul x-0 alpha)) (mul y x (rec x-0)))))
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (send
        (enc a-0 b-0 group (exp (gen) (mul x-0 alpha)) (privk a-0)))))
  (label 34)
  (parent 20)
  (unrealized (3 0) (4 0))
  (dead)
  (comment "empty cohort"))

(defskeleton dh_sig2
  (vars (k-magic k-magic-0 skey) (n group group-0 text)
    (a b a-0 b-0 name) (y x alpha x-0 alpha-0 rndx))
  (defstrand init 5 (k-magic k-magic) (n n) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (x x) (y y))
  (defstrand group-init 1 (k-magic k-magic) (group group) (alpha alpha))
  (defstrand resp 3 (k-magic k-magic) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (y y) (x x))
  (deflistener (exp (gen) (mul y x alpha)))
  (deflistener
    (cat (exp (gen) (mul x-0 alpha-0))
      (mul y x alpha (rec x-0) (rec alpha-0))))
  (defstrand init 2 (k-magic k-magic-0) (group group-0) (a a-0) (b b-0)
    (g (exp (gen) alpha-0)) (x x-0))
  (defstrand group-init 1 (k-magic k-magic-0) (group group-0)
    (alpha alpha-0))
  (precedes ((0 1) (2 0)) ((1 0) (0 0)) ((2 2) (0 2)) ((2 2) (5 0))
    ((3 1) (0 4)) ((4 1) (3 0)) ((5 1) (4 0)) ((6 0) (5 0)))
  (non-orig k-magic k-magic-0 (privk a) (privk b))
  (uniq-gen n y x alpha x-0 alpha-0)
  (absent (y x))
  (precur (4 0))
  (operation encryption-test (added-strand group-init 1)
    (enc "Group id" group-0 (exp (gen) alpha-0) k-magic-0) (5 0))
  (traces
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (send (enc a b group (exp (gen) (mul x alpha)) (privk a)))
      (recv
        (enc a b group (exp (gen) (mul y alpha))
          (exp (gen) (mul x alpha)) (privk b)))
      (send (enc n (exp (gen) (mul y x alpha)))) (recv n))
    ((send (enc "Group id" group (exp (gen) alpha) k-magic)))
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (recv (enc a b group (exp (gen) (mul x alpha)) (privk a)))
      (send
        (enc a b group (exp (gen) (mul y alpha))
          (exp (gen) (mul x alpha)) (privk b))))
    ((recv (exp (gen) (mul y x alpha)))
      (send (exp (gen) (mul y x alpha))))
    ((recv
       (cat (exp (gen) (mul x-0 alpha-0))
         (mul y x alpha (rec x-0) (rec alpha-0))))
      (send
        (cat (exp (gen) (mul x-0 alpha-0))
          (mul y x alpha (rec x-0) (rec alpha-0)))))
    ((recv (enc "Group id" group-0 (exp (gen) alpha-0) k-magic-0))
      (send
        (enc a-0 b-0 group-0 (exp (gen) (mul x-0 alpha-0))
          (privk a-0))))
    ((send (enc "Group id" group-0 (exp (gen) alpha-0) k-magic-0))))
  (label 35)
  (parent 20)
  (unrealized (3 0) (4 0))
  (dead)
  (comment "empty cohort"))

(defskeleton dh_sig2
  (vars (k-magic skey) (n group text) (a b a-0 b-0 name) (x expt)
    (y x-0 y-0 alpha rndx))
  (defstrand init 5 (k-magic k-magic) (n n) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (x x-0) (y y))
  (defstrand group-init 1 (k-magic k-magic) (group group) (alpha alpha))
  (defstrand resp 3 (k-magic k-magic) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (y y) (x x-0))
  (deflistener (exp (gen) (mul y x-0 alpha)))
  (deflistener (cat (exp (gen) (mul y-0 alpha)) (mul y x-0 (rec y-0))))
  (defstrand resp 3 (k-magic k-magic) (group group) (a a-0) (b b-0)
    (g (exp (gen) alpha)) (y y-0) (x x))
  (precedes ((0 1) (2 0)) ((1 0) (0 0)) ((2 2) (0 2)) ((2 2) (5 0))
    ((3 1) (0 4)) ((4 1) (3 0)) ((5 2) (4 0)))
  (non-orig k-magic (privk a) (privk b))
  (uniq-gen n y x-0 y-0 alpha)
  (absent (y x-0) (y-0 x))
  (precur (4 0))
  (operation encryption-test (displaced 6 1 group-init 1)
    (enc "Group id" group-0 (exp (gen) alpha-0) k-magic-0) (5 0))
  (traces
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (send (enc a b group (exp (gen) (mul x-0 alpha)) (privk a)))
      (recv
        (enc a b group (exp (gen) (mul y alpha))
          (exp (gen) (mul x-0 alpha)) (privk b)))
      (send (enc n (exp (gen) (mul y x-0 alpha)))) (recv n))
    ((send (enc "Group id" group (exp (gen) alpha) k-magic)))
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (recv (enc a b group (exp (gen) (mul x-0 alpha)) (privk a)))
      (send
        (enc a b group (exp (gen) (mul y alpha))
          (exp (gen) (mul x-0 alpha)) (privk b))))
    ((recv (exp (gen) (mul y x-0 alpha)))
      (send (exp (gen) (mul y x-0 alpha))))
    ((recv (cat (exp (gen) (mul y-0 alpha)) (mul y x-0 (rec y-0))))
      (send (cat (exp (gen) (mul y-0 alpha)) (mul y x-0 (rec y-0)))))
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (recv (enc a-0 b-0 group (exp (gen) (mul x alpha)) (privk a-0)))
      (send
        (enc a-0 b-0 group (exp (gen) (mul y-0 alpha))
          (exp (gen) (mul x alpha)) (privk b-0)))))
  (label 36)
  (parent 23)
  (unrealized (3 0) (4 0) (5 1))
  (comment "8 in cohort - 8 not yet seen"))

(defskeleton dh_sig2
  (vars (k-magic k-magic-0 skey) (n group group-0 text)
    (a b a-0 b-0 name) (x expt) (y x-0 alpha y-0 alpha-0 rndx))
  (defstrand init 5 (k-magic k-magic) (n n) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (x x-0) (y y))
  (defstrand group-init 1 (k-magic k-magic) (group group) (alpha alpha))
  (defstrand resp 3 (k-magic k-magic) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (y y) (x x-0))
  (deflistener (exp (gen) (mul y x-0 alpha)))
  (deflistener
    (cat (exp (gen) (mul y-0 alpha-0))
      (mul y x-0 alpha (rec y-0) (rec alpha-0))))
  (defstrand resp 3 (k-magic k-magic-0) (group group-0) (a a-0) (b b-0)
    (g (exp (gen) alpha-0)) (y y-0) (x x))
  (defstrand group-init 1 (k-magic k-magic-0) (group group-0)
    (alpha alpha-0))
  (precedes ((0 1) (2 0)) ((1 0) (0 0)) ((2 2) (0 2)) ((2 2) (5 0))
    ((3 1) (0 4)) ((4 1) (3 0)) ((5 2) (4 0)) ((6 0) (5 0)))
  (non-orig k-magic k-magic-0 (privk a) (privk b))
  (uniq-gen n y x-0 alpha y-0 alpha-0)
  (absent (y x-0) (y-0 x))
  (precur (4 0))
  (operation encryption-test (added-strand group-init 1)
    (enc "Group id" group-0 (exp (gen) alpha-0) k-magic-0) (5 0))
  (traces
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (send (enc a b group (exp (gen) (mul x-0 alpha)) (privk a)))
      (recv
        (enc a b group (exp (gen) (mul y alpha))
          (exp (gen) (mul x-0 alpha)) (privk b)))
      (send (enc n (exp (gen) (mul y x-0 alpha)))) (recv n))
    ((send (enc "Group id" group (exp (gen) alpha) k-magic)))
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (recv (enc a b group (exp (gen) (mul x-0 alpha)) (privk a)))
      (send
        (enc a b group (exp (gen) (mul y alpha))
          (exp (gen) (mul x-0 alpha)) (privk b))))
    ((recv (exp (gen) (mul y x-0 alpha)))
      (send (exp (gen) (mul y x-0 alpha))))
    ((recv
       (cat (exp (gen) (mul y-0 alpha-0))
         (mul y x-0 alpha (rec y-0) (rec alpha-0))))
      (send
        (cat (exp (gen) (mul y-0 alpha-0))
          (mul y x-0 alpha (rec y-0) (rec alpha-0)))))
    ((recv (enc "Group id" group-0 (exp (gen) alpha-0) k-magic-0))
      (recv
        (enc a-0 b-0 group-0 (exp (gen) (mul x alpha-0)) (privk a-0)))
      (send
        (enc a-0 b-0 group-0 (exp (gen) (mul y-0 alpha-0))
          (exp (gen) (mul x alpha-0)) (privk b-0))))
    ((send (enc "Group id" group-0 (exp (gen) alpha-0) k-magic-0))))
  (label 37)
  (parent 23)
  (unrealized (3 0) (4 0) (5 1))
  (comment "9 in cohort - 9 not yet seen"))

(defskeleton dh_sig2
  (vars (k-magic k-magic-0 k-magic-1 skey) (n group group-0 text)
    (a b a-0 b-0 name) (alpha y x alpha-0 x-0 rndx))
  (defstrand init 5 (k-magic k-magic) (n n) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (x x) (y (mul (rec alpha) y alpha-0)))
  (defstrand group-init 1 (k-magic k-magic) (group group) (alpha alpha))
  (defstrand resp 3 (k-magic k-magic-0) (group group) (a a) (b b)
    (g (exp (gen) alpha-0)) (y y) (x (mul alpha x (rec alpha-0))))
  (defstrand group-init 1 (k-magic k-magic-0) (group group)
    (alpha alpha-0))
  (deflistener (exp (gen) (mul y x alpha-0)))
  (deflistener (cat (exp (gen) alpha-0) (mul y x)))
  (defstrand init 2 (k-magic k-magic-1) (group group-0) (a a-0) (b b-0)
    (g (exp (gen) (mul alpha-0 (rec x-0)))) (x x-0))
  (precedes ((0 1) (2 0)) ((1 0) (0 0)) ((2 2) (0 2)) ((2 2) (5 0))
    ((3 0) (2 0)) ((3 0) (6 0)) ((4 1) (0 4)) ((5 1) (4 0))
    ((6 1) (5 0)))
  (non-orig k-magic k-magic-0 k-magic-1 (privk a) (privk b))
  (uniq-gen n alpha y x alpha-0 x-0)
  (absent (y (mul alpha x (rec alpha-0))))
  (precur (5 0))
  (operation nonce-test (added-strand init 2) (exp (gen) alpha-0) (5 0)
    (enc "Group id" group (exp (gen) alpha-0) k-magic-0))
  (traces
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (send (enc a b group (exp (gen) (mul alpha x)) (privk a)))
      (recv
        (enc a b group (exp (gen) (mul y alpha-0))
          (exp (gen) (mul alpha x)) (privk b)))
      (send (enc n (exp (gen) (mul y x alpha-0)))) (recv n))
    ((send (enc "Group id" group (exp (gen) alpha) k-magic)))
    ((recv (enc "Group id" group (exp (gen) alpha-0) k-magic-0))
      (recv (enc a b group (exp (gen) (mul alpha x)) (privk a)))
      (send
        (enc a b group (exp (gen) (mul y alpha-0))
          (exp (gen) (mul alpha x)) (privk b))))
    ((send (enc "Group id" group (exp (gen) alpha-0) k-magic-0)))
    ((recv (exp (gen) (mul y x alpha-0)))
      (send (exp (gen) (mul y x alpha-0))))
    ((recv (cat (exp (gen) alpha-0) (mul y x)))
      (send (cat (exp (gen) alpha-0) (mul y x))))
    ((recv
       (enc "Group id" group-0 (exp (gen) (mul alpha-0 (rec x-0)))
         k-magic-1))
      (send (enc a-0 b-0 group-0 (exp (gen) alpha-0) (privk a-0)))))
  (label 38)
  (parent 25)
  (unrealized (4 0) (5 0) (6 0))
  (dead)
  (comment "empty cohort"))

(defskeleton dh_sig2
  (vars (k-magic k-magic-0 k-magic-1 skey) (n group group-0 text)
    (a b a-0 b-0 name) (alpha y x alpha-0 y-0 rndx) (x-0 expt))
  (defstrand init 5 (k-magic k-magic) (n n) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (x x) (y (mul (rec alpha) y alpha-0)))
  (defstrand group-init 1 (k-magic k-magic) (group group) (alpha alpha))
  (defstrand resp 3 (k-magic k-magic-0) (group group) (a a) (b b)
    (g (exp (gen) alpha-0)) (y y) (x (mul alpha x (rec alpha-0))))
  (defstrand group-init 1 (k-magic k-magic-0) (group group)
    (alpha alpha-0))
  (deflistener (exp (gen) (mul y x alpha-0)))
  (deflistener (cat (exp (gen) alpha-0) (mul y x)))
  (defstrand resp 3 (k-magic k-magic-1) (group group-0) (a a-0) (b b-0)
    (g (exp (gen) (mul alpha-0 (rec y-0)))) (y y-0) (x x-0))
  (precedes ((0 1) (2 0)) ((1 0) (0 0)) ((2 2) (0 2)) ((2 2) (5 0))
    ((3 0) (2 0)) ((3 0) (6 0)) ((4 1) (0 4)) ((5 1) (4 0))
    ((6 2) (5 0)))
  (non-orig k-magic k-magic-0 k-magic-1 (privk a) (privk b))
  (uniq-gen n alpha y x alpha-0 y-0)
  (absent (y (mul alpha x (rec alpha-0))) (y-0 x-0))
  (precur (5 0))
  (operation nonce-test (added-strand resp 3) (exp (gen) alpha-0) (5 0)
    (enc "Group id" group (exp (gen) alpha-0) k-magic-0))
  (traces
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (send (enc a b group (exp (gen) (mul alpha x)) (privk a)))
      (recv
        (enc a b group (exp (gen) (mul y alpha-0))
          (exp (gen) (mul alpha x)) (privk b)))
      (send (enc n (exp (gen) (mul y x alpha-0)))) (recv n))
    ((send (enc "Group id" group (exp (gen) alpha) k-magic)))
    ((recv (enc "Group id" group (exp (gen) alpha-0) k-magic-0))
      (recv (enc a b group (exp (gen) (mul alpha x)) (privk a)))
      (send
        (enc a b group (exp (gen) (mul y alpha-0))
          (exp (gen) (mul alpha x)) (privk b))))
    ((send (enc "Group id" group (exp (gen) alpha-0) k-magic-0)))
    ((recv (exp (gen) (mul y x alpha-0)))
      (send (exp (gen) (mul y x alpha-0))))
    ((recv (cat (exp (gen) alpha-0) (mul y x)))
      (send (cat (exp (gen) alpha-0) (mul y x))))
    ((recv
       (enc "Group id" group-0 (exp (gen) (mul alpha-0 (rec y-0)))
         k-magic-1))
      (recv
        (enc a-0 b-0 group-0 (exp (gen) (mul alpha-0 (rec y-0) x-0))
          (privk a-0)))
      (send
        (enc a-0 b-0 group-0 (exp (gen) alpha-0)
          (exp (gen) (mul alpha-0 (rec y-0) x-0)) (privk b-0)))))
  (label 39)
  (parent 25)
  (unrealized (4 0) (5 0) (6 0) (6 1))
  (dead)
  (comment "empty cohort"))

(defskeleton dh_sig2
  (vars (k-magic k-magic-0 k-magic-1 skey) (n group group-0 text)
    (a b a-0 b-0 name) (y x alpha alpha-0 x-0 rndx))
  (defstrand init 5 (k-magic k-magic) (n n) (group group) (a a) (b b)
    (g (exp (gen) alpha-0)) (x x) (y (mul y alpha (rec alpha-0))))
  (defstrand group-init 1 (k-magic k-magic) (group group)
    (alpha alpha-0))
  (defstrand resp 3 (k-magic k-magic-0) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (y y) (x (mul x (rec alpha) alpha-0)))
  (defstrand group-init 1 (k-magic k-magic-0) (group group)
    (alpha alpha))
  (deflistener (exp (gen) (mul y x alpha)))
  (deflistener (cat (exp (gen) alpha-0) (mul y x alpha (rec alpha-0))))
  (defstrand init 2 (k-magic k-magic-1) (group group-0) (a a-0) (b b-0)
    (g (exp (gen) (mul alpha-0 (rec x-0)))) (x x-0))
  (precedes ((0 1) (2 0)) ((1 0) (0 0)) ((1 0) (6 0)) ((2 2) (0 2))
    ((2 2) (5 0)) ((3 0) (2 0)) ((4 1) (0 4)) ((5 1) (4 0))
    ((6 1) (5 0)))
  (non-orig k-magic k-magic-0 k-magic-1 (privk a) (privk b))
  (uniq-gen n y x alpha alpha-0 x-0)
  (absent (y (mul x (rec alpha) alpha-0)))
  (precur (5 0))
  (operation nonce-test (added-strand init 2) (exp (gen) alpha-0) (5 0)
    (enc "Group id" group (exp (gen) alpha-0) k-magic))
  (traces
    ((recv (enc "Group id" group (exp (gen) alpha-0) k-magic))
      (send (enc a b group (exp (gen) (mul x alpha-0)) (privk a)))
      (recv
        (enc a b group (exp (gen) (mul y alpha))
          (exp (gen) (mul x alpha-0)) (privk b)))
      (send (enc n (exp (gen) (mul y x alpha)))) (recv n))
    ((send (enc "Group id" group (exp (gen) alpha-0) k-magic)))
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic-0))
      (recv (enc a b group (exp (gen) (mul x alpha-0)) (privk a)))
      (send
        (enc a b group (exp (gen) (mul y alpha))
          (exp (gen) (mul x alpha-0)) (privk b))))
    ((send (enc "Group id" group (exp (gen) alpha) k-magic-0)))
    ((recv (exp (gen) (mul y x alpha)))
      (send (exp (gen) (mul y x alpha))))
    ((recv (cat (exp (gen) alpha-0) (mul y x alpha (rec alpha-0))))
      (send (cat (exp (gen) alpha-0) (mul y x alpha (rec alpha-0)))))
    ((recv
       (enc "Group id" group-0 (exp (gen) (mul alpha-0 (rec x-0)))
         k-magic-1))
      (send (enc a-0 b-0 group-0 (exp (gen) alpha-0) (privk a-0)))))
  (label 40)
  (parent 27)
  (unrealized (4 0) (5 0) (6 0))
  (dead)
  (comment "empty cohort"))

(defskeleton dh_sig2
  (vars (k-magic k-magic-0 k-magic-1 skey) (n group group-0 text)
    (a b a-0 b-0 name) (y x alpha alpha-0 y-0 rndx) (x-0 expt))
  (defstrand init 5 (k-magic k-magic) (n n) (group group) (a a) (b b)
    (g (exp (gen) alpha-0)) (x x) (y (mul y alpha (rec alpha-0))))
  (defstrand group-init 1 (k-magic k-magic) (group group)
    (alpha alpha-0))
  (defstrand resp 3 (k-magic k-magic-0) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (y y) (x (mul x (rec alpha) alpha-0)))
  (defstrand group-init 1 (k-magic k-magic-0) (group group)
    (alpha alpha))
  (deflistener (exp (gen) (mul y x alpha)))
  (deflistener (cat (exp (gen) alpha-0) (mul y x alpha (rec alpha-0))))
  (defstrand resp 3 (k-magic k-magic-1) (group group-0) (a a-0) (b b-0)
    (g (exp (gen) (mul alpha-0 (rec y-0)))) (y y-0) (x x-0))
  (precedes ((0 1) (2 0)) ((1 0) (0 0)) ((1 0) (6 0)) ((2 2) (0 2))
    ((2 2) (5 0)) ((3 0) (2 0)) ((4 1) (0 4)) ((5 1) (4 0))
    ((6 2) (5 0)))
  (non-orig k-magic k-magic-0 k-magic-1 (privk a) (privk b))
  (uniq-gen n y x alpha alpha-0 y-0)
  (absent (y (mul x (rec alpha) alpha-0)) (y-0 x-0))
  (precur (5 0))
  (operation nonce-test (added-strand resp 3) (exp (gen) alpha-0) (5 0)
    (enc "Group id" group (exp (gen) alpha-0) k-magic))
  (traces
    ((recv (enc "Group id" group (exp (gen) alpha-0) k-magic))
      (send (enc a b group (exp (gen) (mul x alpha-0)) (privk a)))
      (recv
        (enc a b group (exp (gen) (mul y alpha))
          (exp (gen) (mul x alpha-0)) (privk b)))
      (send (enc n (exp (gen) (mul y x alpha)))) (recv n))
    ((send (enc "Group id" group (exp (gen) alpha-0) k-magic)))
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic-0))
      (recv (enc a b group (exp (gen) (mul x alpha-0)) (privk a)))
      (send
        (enc a b group (exp (gen) (mul y alpha))
          (exp (gen) (mul x alpha-0)) (privk b))))
    ((send (enc "Group id" group (exp (gen) alpha) k-magic-0)))
    ((recv (exp (gen) (mul y x alpha)))
      (send (exp (gen) (mul y x alpha))))
    ((recv (cat (exp (gen) alpha-0) (mul y x alpha (rec alpha-0))))
      (send (cat (exp (gen) alpha-0) (mul y x alpha (rec alpha-0)))))
    ((recv
       (enc "Group id" group-0 (exp (gen) (mul alpha-0 (rec y-0)))
         k-magic-1))
      (recv
        (enc a-0 b-0 group-0 (exp (gen) (mul alpha-0 (rec y-0) x-0))
          (privk a-0)))
      (send
        (enc a-0 b-0 group-0 (exp (gen) alpha-0)
          (exp (gen) (mul alpha-0 (rec y-0) x-0)) (privk b-0)))))
  (label 41)
  (parent 27)
  (unrealized (4 0) (5 0) (6 0) (6 1))
  (dead)
  (comment "empty cohort"))

(defskeleton dh_sig2
  (vars (k-magic k-magic-0 skey) (n group text) (a b a-0 b-0 name)
    (y x alpha x-0 alpha-0 rndx))
  (defstrand init 5 (k-magic k-magic) (n n) (group group) (a a) (b b)
    (g (exp (gen) alpha-0)) (x x) (y (mul y alpha (rec alpha-0))))
  (defstrand group-init 1 (k-magic k-magic) (group group)
    (alpha alpha-0))
  (defstrand resp 3 (k-magic k-magic-0) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (y y) (x (mul x (rec alpha) alpha-0)))
  (defstrand group-init 1 (k-magic k-magic-0) (group group)
    (alpha alpha))
  (deflistener (exp (gen) (mul y x alpha)))
  (deflistener
    (cat (exp (gen) (mul x-0 alpha-0))
      (mul y x alpha (rec x-0) (rec alpha-0))))
  (defstrand init 2 (k-magic k-magic) (group group) (a a-0) (b b-0)
    (g (exp (gen) alpha-0)) (x x-0))
  (precedes ((0 1) (2 0)) ((1 0) (0 0)) ((2 2) (0 2)) ((2 2) (6 0))
    ((3 0) (2 0)) ((4 1) (0 4)) ((5 1) (4 0)) ((6 1) (5 0)))
  (non-orig k-magic k-magic-0 (privk a) (privk b))
  (uniq-gen n y x alpha x-0 alpha-0)
  (absent (y (mul x (rec alpha) alpha-0)))
  (precur (5 0))
  (operation encryption-test (displaced 7 1 group-init 1)
    (enc "Group id" group-0 (exp (gen) alpha-1) k-magic-1) (6 0))
  (traces
    ((recv (enc "Group id" group (exp (gen) alpha-0) k-magic))
      (send (enc a b group (exp (gen) (mul x alpha-0)) (privk a)))
      (recv
        (enc a b group (exp (gen) (mul y alpha))
          (exp (gen) (mul x alpha-0)) (privk b)))
      (send (enc n (exp (gen) (mul y x alpha)))) (recv n))
    ((send (enc "Group id" group (exp (gen) alpha-0) k-magic)))
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic-0))
      (recv (enc a b group (exp (gen) (mul x alpha-0)) (privk a)))
      (send
        (enc a b group (exp (gen) (mul y alpha))
          (exp (gen) (mul x alpha-0)) (privk b))))
    ((send (enc "Group id" group (exp (gen) alpha) k-magic-0)))
    ((recv (exp (gen) (mul y x alpha)))
      (send (exp (gen) (mul y x alpha))))
    ((recv
       (cat (exp (gen) (mul x-0 alpha-0))
         (mul y x alpha (rec x-0) (rec alpha-0))))
      (send
        (cat (exp (gen) (mul x-0 alpha-0))
          (mul y x alpha (rec x-0) (rec alpha-0)))))
    ((recv (enc "Group id" group (exp (gen) alpha-0) k-magic))
      (send
        (enc a-0 b-0 group (exp (gen) (mul x-0 alpha-0)) (privk a-0)))))
  (label 42)
  (parent 28)
  (unrealized (4 0) (5 0))
  (dead)
  (comment "empty cohort"))

(defskeleton dh_sig2
  (vars (k-magic k-magic-0 skey) (n group text) (a b a-0 b-0 name)
    (alpha y x x-0 alpha-0 rndx))
  (defstrand init 5 (k-magic k-magic) (n n) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (x x) (y (mul (rec alpha) y alpha-0)))
  (defstrand group-init 1 (k-magic k-magic) (group group) (alpha alpha))
  (defstrand resp 3 (k-magic k-magic-0) (group group) (a a) (b b)
    (g (exp (gen) alpha-0)) (y y) (x (mul alpha x (rec alpha-0))))
  (defstrand group-init 1 (k-magic k-magic-0) (group group)
    (alpha alpha-0))
  (deflistener (exp (gen) (mul y x alpha-0)))
  (deflistener (cat (exp (gen) (mul x-0 alpha-0)) (mul y x (rec x-0))))
  (defstrand init 2 (k-magic k-magic-0) (group group) (a a-0) (b b-0)
    (g (exp (gen) alpha-0)) (x x-0))
  (precedes ((0 1) (2 0)) ((1 0) (0 0)) ((2 2) (0 2)) ((2 2) (6 0))
    ((3 0) (2 0)) ((4 1) (0 4)) ((5 1) (4 0)) ((6 1) (5 0)))
  (non-orig k-magic k-magic-0 (privk a) (privk b))
  (uniq-gen n alpha y x x-0 alpha-0)
  (absent (y (mul alpha x (rec alpha-0))))
  (precur (5 0))
  (operation encryption-test (displaced 7 3 group-init 1)
    (enc "Group id" group-0 (exp (gen) alpha-1) k-magic-1) (6 0))
  (traces
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (send (enc a b group (exp (gen) (mul alpha x)) (privk a)))
      (recv
        (enc a b group (exp (gen) (mul y alpha-0))
          (exp (gen) (mul alpha x)) (privk b)))
      (send (enc n (exp (gen) (mul y x alpha-0)))) (recv n))
    ((send (enc "Group id" group (exp (gen) alpha) k-magic)))
    ((recv (enc "Group id" group (exp (gen) alpha-0) k-magic-0))
      (recv (enc a b group (exp (gen) (mul alpha x)) (privk a)))
      (send
        (enc a b group (exp (gen) (mul y alpha-0))
          (exp (gen) (mul alpha x)) (privk b))))
    ((send (enc "Group id" group (exp (gen) alpha-0) k-magic-0)))
    ((recv (exp (gen) (mul y x alpha-0)))
      (send (exp (gen) (mul y x alpha-0))))
    ((recv (cat (exp (gen) (mul x-0 alpha-0)) (mul y x (rec x-0))))
      (send (cat (exp (gen) (mul x-0 alpha-0)) (mul y x (rec x-0)))))
    ((recv (enc "Group id" group (exp (gen) alpha-0) k-magic-0))
      (send
        (enc a-0 b-0 group (exp (gen) (mul x-0 alpha-0)) (privk a-0)))))
  (label 43)
  (parent 28)
  (unrealized (4 0) (5 0))
  (dead)
  (comment "empty cohort"))

(defskeleton dh_sig2
  (vars (k-magic k-magic-0 k-magic-1 skey) (n group group-0 text)
    (a b a-0 b-0 name) (alpha y x alpha-0 x-0 alpha-1 rndx))
  (defstrand init 5 (k-magic k-magic) (n n) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (x x) (y (mul (rec alpha) y alpha-0)))
  (defstrand group-init 1 (k-magic k-magic) (group group) (alpha alpha))
  (defstrand resp 3 (k-magic k-magic-0) (group group) (a a) (b b)
    (g (exp (gen) alpha-0)) (y y) (x (mul alpha x (rec alpha-0))))
  (defstrand group-init 1 (k-magic k-magic-0) (group group)
    (alpha alpha-0))
  (deflistener (exp (gen) (mul y x alpha-0)))
  (deflistener
    (cat (exp (gen) (mul x-0 alpha-1))
      (mul y x alpha-0 (rec x-0) (rec alpha-1))))
  (defstrand init 2 (k-magic k-magic-1) (group group-0) (a a-0) (b b-0)
    (g (exp (gen) alpha-1)) (x x-0))
  (defstrand group-init 1 (k-magic k-magic-1) (group group-0)
    (alpha alpha-1))
  (precedes ((0 1) (2 0)) ((1 0) (0 0)) ((2 2) (0 2)) ((2 2) (6 0))
    ((3 0) (2 0)) ((4 1) (0 4)) ((5 1) (4 0)) ((6 1) (5 0))
    ((7 0) (6 0)))
  (non-orig k-magic k-magic-0 k-magic-1 (privk a) (privk b))
  (uniq-gen n alpha y x alpha-0 x-0 alpha-1)
  (absent (y (mul alpha x (rec alpha-0))))
  (precur (5 0))
  (operation encryption-test (added-strand group-init 1)
    (enc "Group id" group-0 (exp (gen) alpha-1) k-magic-1) (6 0))
  (traces
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (send (enc a b group (exp (gen) (mul alpha x)) (privk a)))
      (recv
        (enc a b group (exp (gen) (mul y alpha-0))
          (exp (gen) (mul alpha x)) (privk b)))
      (send (enc n (exp (gen) (mul y x alpha-0)))) (recv n))
    ((send (enc "Group id" group (exp (gen) alpha) k-magic)))
    ((recv (enc "Group id" group (exp (gen) alpha-0) k-magic-0))
      (recv (enc a b group (exp (gen) (mul alpha x)) (privk a)))
      (send
        (enc a b group (exp (gen) (mul y alpha-0))
          (exp (gen) (mul alpha x)) (privk b))))
    ((send (enc "Group id" group (exp (gen) alpha-0) k-magic-0)))
    ((recv (exp (gen) (mul y x alpha-0)))
      (send (exp (gen) (mul y x alpha-0))))
    ((recv
       (cat (exp (gen) (mul x-0 alpha-1))
         (mul y x alpha-0 (rec x-0) (rec alpha-1))))
      (send
        (cat (exp (gen) (mul x-0 alpha-1))
          (mul y x alpha-0 (rec x-0) (rec alpha-1)))))
    ((recv (enc "Group id" group-0 (exp (gen) alpha-1) k-magic-1))
      (send
        (enc a-0 b-0 group-0 (exp (gen) (mul x-0 alpha-1))
          (privk a-0))))
    ((send (enc "Group id" group-0 (exp (gen) alpha-1) k-magic-1))))
  (label 44)
  (parent 28)
  (unrealized (4 0) (5 0))
  (dead)
  (comment "empty cohort"))

(defskeleton dh_sig2
  (vars (k-magic k-magic-0 skey) (n group text) (a b a-0 b-0 name)
    (x expt) (y x-0 alpha y-0 alpha-0 rndx))
  (defstrand init 5 (k-magic k-magic) (n n) (group group) (a a) (b b)
    (g (exp (gen) alpha-0)) (x x-0) (y (mul y alpha (rec alpha-0))))
  (defstrand group-init 1 (k-magic k-magic) (group group)
    (alpha alpha-0))
  (defstrand resp 3 (k-magic k-magic-0) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (y y) (x (mul x-0 (rec alpha) alpha-0)))
  (defstrand group-init 1 (k-magic k-magic-0) (group group)
    (alpha alpha))
  (deflistener (exp (gen) (mul y x-0 alpha)))
  (deflistener
    (cat (exp (gen) (mul y-0 alpha-0))
      (mul y x-0 alpha (rec y-0) (rec alpha-0))))
  (defstrand resp 3 (k-magic k-magic) (group group) (a a-0) (b b-0)
    (g (exp (gen) alpha-0)) (y y-0) (x x))
  (precedes ((0 1) (2 0)) ((1 0) (0 0)) ((2 2) (0 2)) ((2 2) (6 0))
    ((3 0) (2 0)) ((4 1) (0 4)) ((5 1) (4 0)) ((6 2) (5 0)))
  (non-orig k-magic k-magic-0 (privk a) (privk b))
  (uniq-gen n y x-0 alpha y-0 alpha-0)
  (absent (y (mul x-0 (rec alpha) alpha-0)) (y-0 x))
  (precur (5 0))
  (operation encryption-test (displaced 7 1 group-init 1)
    (enc "Group id" group-0 (exp (gen) alpha-1) k-magic-1) (6 0))
  (traces
    ((recv (enc "Group id" group (exp (gen) alpha-0) k-magic))
      (send (enc a b group (exp (gen) (mul x-0 alpha-0)) (privk a)))
      (recv
        (enc a b group (exp (gen) (mul y alpha))
          (exp (gen) (mul x-0 alpha-0)) (privk b)))
      (send (enc n (exp (gen) (mul y x-0 alpha)))) (recv n))
    ((send (enc "Group id" group (exp (gen) alpha-0) k-magic)))
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic-0))
      (recv (enc a b group (exp (gen) (mul x-0 alpha-0)) (privk a)))
      (send
        (enc a b group (exp (gen) (mul y alpha))
          (exp (gen) (mul x-0 alpha-0)) (privk b))))
    ((send (enc "Group id" group (exp (gen) alpha) k-magic-0)))
    ((recv (exp (gen) (mul y x-0 alpha)))
      (send (exp (gen) (mul y x-0 alpha))))
    ((recv
       (cat (exp (gen) (mul y-0 alpha-0))
         (mul y x-0 alpha (rec y-0) (rec alpha-0))))
      (send
        (cat (exp (gen) (mul y-0 alpha-0))
          (mul y x-0 alpha (rec y-0) (rec alpha-0)))))
    ((recv (enc "Group id" group (exp (gen) alpha-0) k-magic))
      (recv (enc a-0 b-0 group (exp (gen) (mul x alpha-0)) (privk a-0)))
      (send
        (enc a-0 b-0 group (exp (gen) (mul y-0 alpha-0))
          (exp (gen) (mul x alpha-0)) (privk b-0)))))
  (label 45)
  (parent 31)
  (unrealized (4 0) (5 0) (6 1))
  (comment "9 in cohort - 9 not yet seen"))

(defskeleton dh_sig2
  (vars (k-magic k-magic-0 skey) (n group text) (a b a-0 b-0 name)
    (alpha rndx) (x expt) (y x-0 y-0 alpha-0 rndx))
  (defstrand init 5 (k-magic k-magic) (n n) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (x x-0) (y (mul (rec alpha) y alpha-0)))
  (defstrand group-init 1 (k-magic k-magic) (group group) (alpha alpha))
  (defstrand resp 3 (k-magic k-magic-0) (group group) (a a) (b b)
    (g (exp (gen) alpha-0)) (y y) (x (mul alpha x-0 (rec alpha-0))))
  (defstrand group-init 1 (k-magic k-magic-0) (group group)
    (alpha alpha-0))
  (deflistener (exp (gen) (mul y x-0 alpha-0)))
  (deflistener
    (cat (exp (gen) (mul y-0 alpha-0)) (mul y x-0 (rec y-0))))
  (defstrand resp 3 (k-magic k-magic-0) (group group) (a a-0) (b b-0)
    (g (exp (gen) alpha-0)) (y y-0) (x x))
  (precedes ((0 1) (2 0)) ((1 0) (0 0)) ((2 2) (0 2)) ((2 2) (6 0))
    ((3 0) (2 0)) ((4 1) (0 4)) ((5 1) (4 0)) ((6 2) (5 0)))
  (non-orig k-magic k-magic-0 (privk a) (privk b))
  (uniq-gen n alpha y x-0 y-0 alpha-0)
  (absent (y (mul alpha x-0 (rec alpha-0))) (y-0 x))
  (precur (5 0))
  (operation encryption-test (displaced 7 3 group-init 1)
    (enc "Group id" group-0 (exp (gen) alpha-1) k-magic-1) (6 0))
  (traces
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (send (enc a b group (exp (gen) (mul alpha x-0)) (privk a)))
      (recv
        (enc a b group (exp (gen) (mul y alpha-0))
          (exp (gen) (mul alpha x-0)) (privk b)))
      (send (enc n (exp (gen) (mul y x-0 alpha-0)))) (recv n))
    ((send (enc "Group id" group (exp (gen) alpha) k-magic)))
    ((recv (enc "Group id" group (exp (gen) alpha-0) k-magic-0))
      (recv (enc a b group (exp (gen) (mul alpha x-0)) (privk a)))
      (send
        (enc a b group (exp (gen) (mul y alpha-0))
          (exp (gen) (mul alpha x-0)) (privk b))))
    ((send (enc "Group id" group (exp (gen) alpha-0) k-magic-0)))
    ((recv (exp (gen) (mul y x-0 alpha-0)))
      (send (exp (gen) (mul y x-0 alpha-0))))
    ((recv (cat (exp (gen) (mul y-0 alpha-0)) (mul y x-0 (rec y-0))))
      (send (cat (exp (gen) (mul y-0 alpha-0)) (mul y x-0 (rec y-0)))))
    ((recv (enc "Group id" group (exp (gen) alpha-0) k-magic-0))
      (recv (enc a-0 b-0 group (exp (gen) (mul x alpha-0)) (privk a-0)))
      (send
        (enc a-0 b-0 group (exp (gen) (mul y-0 alpha-0))
          (exp (gen) (mul x alpha-0)) (privk b-0)))))
  (label 46)
  (parent 31)
  (unrealized (4 0) (5 0) (6 1))
  (comment "9 in cohort - 9 not yet seen"))

(defskeleton dh_sig2
  (vars (k-magic k-magic-0 k-magic-1 skey) (n group group-0 text)
    (a b a-0 b-0 name) (alpha rndx) (x expt)
    (y x-0 alpha-0 y-0 alpha-1 rndx))
  (defstrand init 5 (k-magic k-magic) (n n) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (x x-0) (y (mul (rec alpha) y alpha-0)))
  (defstrand group-init 1 (k-magic k-magic) (group group) (alpha alpha))
  (defstrand resp 3 (k-magic k-magic-0) (group group) (a a) (b b)
    (g (exp (gen) alpha-0)) (y y) (x (mul alpha x-0 (rec alpha-0))))
  (defstrand group-init 1 (k-magic k-magic-0) (group group)
    (alpha alpha-0))
  (deflistener (exp (gen) (mul y x-0 alpha-0)))
  (deflistener
    (cat (exp (gen) (mul y-0 alpha-1))
      (mul y x-0 alpha-0 (rec y-0) (rec alpha-1))))
  (defstrand resp 3 (k-magic k-magic-1) (group group-0) (a a-0) (b b-0)
    (g (exp (gen) alpha-1)) (y y-0) (x x))
  (defstrand group-init 1 (k-magic k-magic-1) (group group-0)
    (alpha alpha-1))
  (precedes ((0 1) (2 0)) ((1 0) (0 0)) ((2 2) (0 2)) ((2 2) (6 0))
    ((3 0) (2 0)) ((4 1) (0 4)) ((5 1) (4 0)) ((6 2) (5 0))
    ((7 0) (6 0)))
  (non-orig k-magic k-magic-0 k-magic-1 (privk a) (privk b))
  (uniq-gen n alpha y x-0 alpha-0 y-0 alpha-1)
  (absent (y (mul alpha x-0 (rec alpha-0))) (y-0 x))
  (precur (5 0))
  (operation encryption-test (added-strand group-init 1)
    (enc "Group id" group-0 (exp (gen) alpha-1) k-magic-1) (6 0))
  (traces
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (send (enc a b group (exp (gen) (mul alpha x-0)) (privk a)))
      (recv
        (enc a b group (exp (gen) (mul y alpha-0))
          (exp (gen) (mul alpha x-0)) (privk b)))
      (send (enc n (exp (gen) (mul y x-0 alpha-0)))) (recv n))
    ((send (enc "Group id" group (exp (gen) alpha) k-magic)))
    ((recv (enc "Group id" group (exp (gen) alpha-0) k-magic-0))
      (recv (enc a b group (exp (gen) (mul alpha x-0)) (privk a)))
      (send
        (enc a b group (exp (gen) (mul y alpha-0))
          (exp (gen) (mul alpha x-0)) (privk b))))
    ((send (enc "Group id" group (exp (gen) alpha-0) k-magic-0)))
    ((recv (exp (gen) (mul y x-0 alpha-0)))
      (send (exp (gen) (mul y x-0 alpha-0))))
    ((recv
       (cat (exp (gen) (mul y-0 alpha-1))
         (mul y x-0 alpha-0 (rec y-0) (rec alpha-1))))
      (send
        (cat (exp (gen) (mul y-0 alpha-1))
          (mul y x-0 alpha-0 (rec y-0) (rec alpha-1)))))
    ((recv (enc "Group id" group-0 (exp (gen) alpha-1) k-magic-1))
      (recv
        (enc a-0 b-0 group-0 (exp (gen) (mul x alpha-1)) (privk a-0)))
      (send
        (enc a-0 b-0 group-0 (exp (gen) (mul y-0 alpha-1))
          (exp (gen) (mul x alpha-1)) (privk b-0))))
    ((send (enc "Group id" group-0 (exp (gen) alpha-1) k-magic-1))))
  (label 47)
  (parent 31)
  (unrealized (4 0) (5 0) (6 1))
  (comment "10 in cohort - 10 not yet seen"))

(defskeleton dh_sig2
  (vars (k-magic skey) (n group text) (a b a-0 b-0 name)
    (y y-0 alpha x rndx))
  (defstrand init 5 (k-magic k-magic) (n n) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (x x) (y y))
  (defstrand group-init 1 (k-magic k-magic) (group group) (alpha alpha))
  (defstrand resp 3 (k-magic k-magic) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (y y) (x x))
  (deflistener (exp (gen) (mul y alpha x)))
  (deflistener (cat (exp (gen) (mul y-0 alpha)) (mul y (rec y-0) x)))
  (defstrand resp 3 (k-magic k-magic) (group group) (a a-0) (b b-0)
    (g (exp (gen) alpha)) (y y-0) (x x))
  (precedes ((0 1) (2 0)) ((1 0) (0 0)) ((2 2) (0 2)) ((2 2) (5 0))
    ((3 1) (0 4)) ((4 1) (3 0)) ((5 2) (4 0)))
  (non-orig k-magic (privk a) (privk b))
  (uniq-gen n y y-0 alpha x)
  (absent (y x) (y-0 x))
  (precur (4 0))
  (operation nonce-test (displaced 6 0 init 2)
    (exp (gen) (mul x-0 alpha)) (5 1))
  (traces
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (send (enc a b group (exp (gen) (mul alpha x)) (privk a)))
      (recv
        (enc a b group (exp (gen) (mul y alpha))
          (exp (gen) (mul alpha x)) (privk b)))
      (send (enc n (exp (gen) (mul y alpha x)))) (recv n))
    ((send (enc "Group id" group (exp (gen) alpha) k-magic)))
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (recv (enc a b group (exp (gen) (mul alpha x)) (privk a)))
      (send
        (enc a b group (exp (gen) (mul y alpha))
          (exp (gen) (mul alpha x)) (privk b))))
    ((recv (exp (gen) (mul y alpha x)))
      (send (exp (gen) (mul y alpha x))))
    ((recv (cat (exp (gen) (mul y-0 alpha)) (mul y (rec y-0) x)))
      (send (cat (exp (gen) (mul y-0 alpha)) (mul y (rec y-0) x))))
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (recv (enc a-0 b-0 group (exp (gen) (mul alpha x)) (privk a-0)))
      (send
        (enc a-0 b-0 group (exp (gen) (mul y-0 alpha))
          (exp (gen) (mul alpha x)) (privk b-0)))))
  (label 48)
  (parent 36)
  (unrealized (3 0) (4 0))
  (dead)
  (comment "empty cohort"))

(defskeleton dh_sig2
  (vars (k-magic k-magic-0 skey) (n group group-0 text)
    (a b a-0 b-0 name) (y x y-0 alpha alpha-0 rndx))
  (defstrand init 5 (k-magic k-magic) (n n) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (x x) (y y))
  (defstrand group-init 1 (k-magic k-magic) (group group) (alpha alpha))
  (defstrand resp 3 (k-magic k-magic) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (y y) (x x))
  (deflistener (exp (gen) (mul y x alpha)))
  (deflistener (cat (exp (gen) (mul y-0 alpha)) (mul y x (rec y-0))))
  (defstrand resp 3 (k-magic k-magic) (group group) (a a-0) (b b-0)
    (g (exp (gen) alpha)) (y y-0) (x (mul (rec alpha) alpha-0)))
  (defstrand group-init 1 (k-magic k-magic-0) (group group-0)
    (alpha alpha-0))
  (precedes ((0 1) (2 0)) ((1 0) (0 0)) ((2 2) (0 2)) ((2 2) (5 0))
    ((3 1) (0 4)) ((4 1) (3 0)) ((5 2) (4 0)) ((6 0) (5 1)))
  (non-orig k-magic (privk a) (privk b))
  (uniq-gen n y x y-0 alpha alpha-0)
  (absent (y x) (y-0 (mul (rec alpha) alpha-0)))
  (precur (4 0))
  (operation nonce-test (added-strand group-init 1) (exp (gen) alpha-0)
    (5 1))
  (traces
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (send (enc a b group (exp (gen) (mul x alpha)) (privk a)))
      (recv
        (enc a b group (exp (gen) (mul y alpha))
          (exp (gen) (mul x alpha)) (privk b)))
      (send (enc n (exp (gen) (mul y x alpha)))) (recv n))
    ((send (enc "Group id" group (exp (gen) alpha) k-magic)))
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (recv (enc a b group (exp (gen) (mul x alpha)) (privk a)))
      (send
        (enc a b group (exp (gen) (mul y alpha))
          (exp (gen) (mul x alpha)) (privk b))))
    ((recv (exp (gen) (mul y x alpha)))
      (send (exp (gen) (mul y x alpha))))
    ((recv (cat (exp (gen) (mul y-0 alpha)) (mul y x (rec y-0))))
      (send (cat (exp (gen) (mul y-0 alpha)) (mul y x (rec y-0)))))
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (recv (enc a-0 b-0 group (exp (gen) alpha-0) (privk a-0)))
      (send
        (enc a-0 b-0 group (exp (gen) (mul y-0 alpha))
          (exp (gen) alpha-0) (privk b-0))))
    ((send (enc "Group id" group-0 (exp (gen) alpha-0) k-magic-0))))
  (label 49)
  (parent 36)
  (unrealized (3 0) (4 0))
  (dead)
  (comment "empty cohort"))

(defskeleton dh_sig2
  (vars (k-magic skey) (n group text) (a b a-0 b-0 name)
    (y x y-0 alpha rndx))
  (defstrand init 5 (k-magic k-magic) (n n) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (x x) (y y))
  (defstrand group-init 1 (k-magic k-magic) (group group) (alpha alpha))
  (defstrand resp 3 (k-magic k-magic) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (y y) (x x))
  (deflistener (exp (gen) (mul y x alpha)))
  (deflistener (cat (exp (gen) (mul y-0 alpha)) (mul y x (rec y-0))))
  (defstrand resp 3 (k-magic k-magic) (group group) (a a-0) (b b-0)
    (g (exp (gen) alpha)) (y y-0) (x (rec alpha)))
  (precedes ((0 1) (2 0)) ((1 0) (0 0)) ((2 2) (0 2)) ((2 2) (5 0))
    ((3 1) (0 4)) ((4 1) (3 0)) ((5 2) (4 0)))
  (non-orig k-magic (privk a) (privk b))
  (uniq-gen n y x y-0 alpha)
  (absent (y x) (y-0 (rec alpha)))
  (precur (4 0))
  (operation nonce-test (contracted (x-0 (rec alpha)) (alpha-0 alpha))
    (gen) (5 1))
  (traces
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (send (enc a b group (exp (gen) (mul x alpha)) (privk a)))
      (recv
        (enc a b group (exp (gen) (mul y alpha))
          (exp (gen) (mul x alpha)) (privk b)))
      (send (enc n (exp (gen) (mul y x alpha)))) (recv n))
    ((send (enc "Group id" group (exp (gen) alpha) k-magic)))
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (recv (enc a b group (exp (gen) (mul x alpha)) (privk a)))
      (send
        (enc a b group (exp (gen) (mul y alpha))
          (exp (gen) (mul x alpha)) (privk b))))
    ((recv (exp (gen) (mul y x alpha)))
      (send (exp (gen) (mul y x alpha))))
    ((recv (cat (exp (gen) (mul y-0 alpha)) (mul y x (rec y-0))))
      (send (cat (exp (gen) (mul y-0 alpha)) (mul y x (rec y-0)))))
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (recv (enc a-0 b-0 group (gen) (privk a-0)))
      (send
        (enc a-0 b-0 group (exp (gen) (mul y-0 alpha)) (gen)
          (privk b-0)))))
  (label 50)
  (parent 36)
  (unrealized (3 0) (4 0))
  (dead)
  (comment "empty cohort"))

(defskeleton dh_sig2
  (vars (k-magic skey) (n group text) (a b a-0 b-0 name)
    (y x y-0 alpha rndx))
  (defstrand init 5 (k-magic k-magic) (n n) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (x x) (y y))
  (defstrand group-init 1 (k-magic k-magic) (group group) (alpha alpha))
  (defstrand resp 3 (k-magic k-magic) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (y y) (x x))
  (deflistener (exp (gen) (mul y x alpha)))
  (deflistener (cat (exp (gen) (mul y-0 alpha)) (mul y x (rec y-0))))
  (defstrand resp 3 (k-magic k-magic) (group group) (a a-0) (b b-0)
    (g (exp (gen) alpha)) (y y-0) (x (one)))
  (precedes ((0 1) (2 0)) ((1 0) (0 0)) ((2 2) (0 2)) ((2 2) (5 0))
    ((3 1) (0 4)) ((4 1) (3 0)) ((5 2) (4 0)))
  (non-orig k-magic (privk a) (privk b))
  (uniq-gen n y x y-0 alpha)
  (absent (y x) (y-0 (one)))
  (precur (4 0))
  (operation nonce-test (displaced 6 1 group-init 1) (exp (gen) alpha-0)
    (5 1))
  (traces
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (send (enc a b group (exp (gen) (mul x alpha)) (privk a)))
      (recv
        (enc a b group (exp (gen) (mul y alpha))
          (exp (gen) (mul x alpha)) (privk b)))
      (send (enc n (exp (gen) (mul y x alpha)))) (recv n))
    ((send (enc "Group id" group (exp (gen) alpha) k-magic)))
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (recv (enc a b group (exp (gen) (mul x alpha)) (privk a)))
      (send
        (enc a b group (exp (gen) (mul y alpha))
          (exp (gen) (mul x alpha)) (privk b))))
    ((recv (exp (gen) (mul y x alpha)))
      (send (exp (gen) (mul y x alpha))))
    ((recv (cat (exp (gen) (mul y-0 alpha)) (mul y x (rec y-0))))
      (send (cat (exp (gen) (mul y-0 alpha)) (mul y x (rec y-0)))))
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (recv (enc a-0 b-0 group (exp (gen) alpha) (privk a-0)))
      (send
        (enc a-0 b-0 group (exp (gen) (mul y-0 alpha)) (exp (gen) alpha)
          (privk b-0)))))
  (label 51)
  (parent 36)
  (unrealized (3 0) (4 0) (5 1))
  (comment "3 in cohort - 3 not yet seen"))

(defskeleton dh_sig2
  (vars (k-magic skey) (n group text) (a b a-0 b-0 name)
    (y alpha x y-0 rndx))
  (defstrand init 5 (k-magic k-magic) (n n) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (x x) (y y-0))
  (defstrand group-init 1 (k-magic k-magic) (group group) (alpha alpha))
  (defstrand resp 3 (k-magic k-magic) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (y y-0) (x x))
  (deflistener (exp (gen) (mul alpha x y-0)))
  (deflistener (cat (exp (gen) (mul y alpha)) (mul (rec y) x y-0)))
  (defstrand resp 3 (k-magic k-magic) (group group) (a a-0) (b b-0)
    (g (exp (gen) alpha)) (y y) (x y-0))
  (precedes ((0 1) (2 0)) ((1 0) (0 0)) ((2 2) (0 2)) ((2 2) (5 0))
    ((3 1) (0 4)) ((4 1) (3 0)) ((5 2) (4 0)))
  (non-orig k-magic (privk a) (privk b))
  (uniq-gen n y alpha x y-0)
  (absent (y y-0) (y-0 x))
  (precur (4 0))
  (operation nonce-test (displaced 6 2 resp 3)
    (exp (gen) (mul x-0 alpha)) (5 1))
  (traces
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (send (enc a b group (exp (gen) (mul alpha x)) (privk a)))
      (recv
        (enc a b group (exp (gen) (mul alpha y-0))
          (exp (gen) (mul alpha x)) (privk b)))
      (send (enc n (exp (gen) (mul alpha x y-0)))) (recv n))
    ((send (enc "Group id" group (exp (gen) alpha) k-magic)))
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (recv (enc a b group (exp (gen) (mul alpha x)) (privk a)))
      (send
        (enc a b group (exp (gen) (mul alpha y-0))
          (exp (gen) (mul alpha x)) (privk b))))
    ((recv (exp (gen) (mul alpha x y-0)))
      (send (exp (gen) (mul alpha x y-0))))
    ((recv (cat (exp (gen) (mul y alpha)) (mul (rec y) x y-0)))
      (send (cat (exp (gen) (mul y alpha)) (mul (rec y) x y-0))))
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (recv (enc a-0 b-0 group (exp (gen) (mul alpha y-0)) (privk a-0)))
      (send
        (enc a-0 b-0 group (exp (gen) (mul y alpha))
          (exp (gen) (mul alpha y-0)) (privk b-0)))))
  (label 52)
  (parent 36)
  (unrealized (3 0) (4 0))
  (dead)
  (comment "empty cohort"))

(defskeleton dh_sig2
  (vars (k-magic k-magic-0 skey) (n group group-0 text)
    (a b a-0 b-0 a-1 b-1 name) (x expt) (y x-0 y-0 alpha x-1 rndx))
  (defstrand init 5 (k-magic k-magic) (n n) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (x x-0) (y y))
  (defstrand group-init 1 (k-magic k-magic) (group group) (alpha alpha))
  (defstrand resp 3 (k-magic k-magic) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (y y) (x x-0))
  (deflistener (exp (gen) (mul y x-0 alpha)))
  (deflistener (cat (exp (gen) (mul y-0 alpha)) (mul y x-0 (rec y-0))))
  (defstrand resp 3 (k-magic k-magic) (group group) (a a-0) (b b-0)
    (g (exp (gen) alpha)) (y y-0) (x x))
  (defstrand init 2 (k-magic k-magic-0) (group group-0) (a a-1) (b b-1)
    (g (exp (gen) (mul x alpha (rec x-1)))) (x x-1))
  (precedes ((0 1) (2 0)) ((1 0) (0 0)) ((1 0) (6 0)) ((2 2) (0 2))
    ((2 2) (5 0)) ((3 1) (0 4)) ((4 1) (3 0)) ((5 2) (4 0))
    ((6 1) (5 1)))
  (non-orig k-magic k-magic-0 (privk a) (privk b))
  (uniq-gen n y x-0 y-0 alpha x-1)
  (absent (y x-0) (y-0 x))
  (precur (4 0))
  (operation nonce-test (added-strand init 2) (exp (gen) (mul x alpha))
    (5 1))
  (traces
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (send (enc a b group (exp (gen) (mul x-0 alpha)) (privk a)))
      (recv
        (enc a b group (exp (gen) (mul y alpha))
          (exp (gen) (mul x-0 alpha)) (privk b)))
      (send (enc n (exp (gen) (mul y x-0 alpha)))) (recv n))
    ((send (enc "Group id" group (exp (gen) alpha) k-magic)))
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (recv (enc a b group (exp (gen) (mul x-0 alpha)) (privk a)))
      (send
        (enc a b group (exp (gen) (mul y alpha))
          (exp (gen) (mul x-0 alpha)) (privk b))))
    ((recv (exp (gen) (mul y x-0 alpha)))
      (send (exp (gen) (mul y x-0 alpha))))
    ((recv (cat (exp (gen) (mul y-0 alpha)) (mul y x-0 (rec y-0))))
      (send (cat (exp (gen) (mul y-0 alpha)) (mul y x-0 (rec y-0)))))
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (recv (enc a-0 b-0 group (exp (gen) (mul x alpha)) (privk a-0)))
      (send
        (enc a-0 b-0 group (exp (gen) (mul y-0 alpha))
          (exp (gen) (mul x alpha)) (privk b-0))))
    ((recv
       (enc "Group id" group-0 (exp (gen) (mul x alpha (rec x-1)))
         k-magic-0))
      (send
        (enc a-1 b-1 group-0 (exp (gen) (mul x alpha)) (privk a-1)))))
  (label 53)
  (parent 36)
  (unrealized (3 0) (4 0) (6 0))
  (comment "2 in cohort - 2 not yet seen"))

(defskeleton dh_sig2
  (vars (k-magic k-magic-0 skey) (n group group-0 text)
    (a b a-0 b-0 a-1 b-1 name) (x expt) (y x-0 y-0 alpha y-1 rndx)
    (x-1 expt))
  (defstrand init 5 (k-magic k-magic) (n n) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (x x-0) (y y))
  (defstrand group-init 1 (k-magic k-magic) (group group) (alpha alpha))
  (defstrand resp 3 (k-magic k-magic) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (y y) (x x-0))
  (deflistener (exp (gen) (mul y x-0 alpha)))
  (deflistener (cat (exp (gen) (mul y-0 alpha)) (mul y x-0 (rec y-0))))
  (defstrand resp 3 (k-magic k-magic) (group group) (a a-0) (b b-0)
    (g (exp (gen) alpha)) (y y-0) (x x))
  (defstrand resp 3 (k-magic k-magic-0) (group group-0) (a a-1) (b b-1)
    (g (exp (gen) (mul x alpha (rec y-1)))) (y y-1) (x x-1))
  (precedes ((0 1) (2 0)) ((1 0) (0 0)) ((1 0) (6 0)) ((2 2) (0 2))
    ((2 2) (5 0)) ((3 1) (0 4)) ((4 1) (3 0)) ((5 2) (4 0))
    ((6 2) (5 1)))
  (non-orig k-magic k-magic-0 (privk a) (privk b))
  (uniq-gen n y x-0 y-0 alpha y-1)
  (absent (y x-0) (y-0 x) (y-1 x-1))
  (precur (4 0))
  (operation nonce-test (added-strand resp 3) (exp (gen) (mul x alpha))
    (5 1))
  (traces
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (send (enc a b group (exp (gen) (mul x-0 alpha)) (privk a)))
      (recv
        (enc a b group (exp (gen) (mul y alpha))
          (exp (gen) (mul x-0 alpha)) (privk b)))
      (send (enc n (exp (gen) (mul y x-0 alpha)))) (recv n))
    ((send (enc "Group id" group (exp (gen) alpha) k-magic)))
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (recv (enc a b group (exp (gen) (mul x-0 alpha)) (privk a)))
      (send
        (enc a b group (exp (gen) (mul y alpha))
          (exp (gen) (mul x-0 alpha)) (privk b))))
    ((recv (exp (gen) (mul y x-0 alpha)))
      (send (exp (gen) (mul y x-0 alpha))))
    ((recv (cat (exp (gen) (mul y-0 alpha)) (mul y x-0 (rec y-0))))
      (send (cat (exp (gen) (mul y-0 alpha)) (mul y x-0 (rec y-0)))))
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (recv (enc a-0 b-0 group (exp (gen) (mul x alpha)) (privk a-0)))
      (send
        (enc a-0 b-0 group (exp (gen) (mul y-0 alpha))
          (exp (gen) (mul x alpha)) (privk b-0))))
    ((recv
       (enc "Group id" group-0 (exp (gen) (mul x alpha (rec y-1)))
         k-magic-0))
      (recv
        (enc a-1 b-1 group-0 (exp (gen) (mul x alpha (rec y-1) x-1))
          (privk a-1)))
      (send
        (enc a-1 b-1 group-0 (exp (gen) (mul x alpha))
          (exp (gen) (mul x alpha (rec y-1) x-1)) (privk b-1)))))
  (label 54)
  (parent 36)
  (unrealized (3 0) (4 0) (6 0) (6 1))
  (comment "2 in cohort - 2 not yet seen"))

(defskeleton dh_sig2
  (vars (k-magic skey) (n group text) (a b a-0 b-0 name) (x expt)
    (y x-0 y-0 alpha rndx) (w expt))
  (defstrand init 5 (k-magic k-magic) (n n) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (x x-0) (y y))
  (defstrand group-init 1 (k-magic k-magic) (group group) (alpha alpha))
  (defstrand resp 3 (k-magic k-magic) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (y y) (x x-0))
  (deflistener (exp (gen) (mul y x-0 alpha)))
  (deflistener (cat (exp (gen) (mul y-0 alpha)) (mul y x-0 (rec y-0))))
  (defstrand resp 3 (k-magic k-magic) (group group) (a a-0) (b b-0)
    (g (exp (gen) alpha)) (y y-0) (x x))
  (deflistener (cat (exp (gen) (mul x alpha (rec w))) w))
  (precedes ((0 1) (2 0)) ((1 0) (0 0)) ((1 0) (6 0)) ((2 2) (0 2))
    ((2 2) (5 0)) ((3 1) (0 4)) ((4 1) (3 0)) ((5 2) (4 0))
    ((6 1) (5 1)))
  (non-orig k-magic (privk a) (privk b))
  (uniq-gen n y x-0 y-0 alpha)
  (absent (y x-0) (y-0 x))
  (precur (4 0) (6 0))
  (operation nonce-test
    (added-listener (cat (exp (gen) (mul x alpha (rec w))) w))
    (exp (gen) (mul x alpha)) (5 1))
  (traces
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (send (enc a b group (exp (gen) (mul x-0 alpha)) (privk a)))
      (recv
        (enc a b group (exp (gen) (mul y alpha))
          (exp (gen) (mul x-0 alpha)) (privk b)))
      (send (enc n (exp (gen) (mul y x-0 alpha)))) (recv n))
    ((send (enc "Group id" group (exp (gen) alpha) k-magic)))
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (recv (enc a b group (exp (gen) (mul x-0 alpha)) (privk a)))
      (send
        (enc a b group (exp (gen) (mul y alpha))
          (exp (gen) (mul x-0 alpha)) (privk b))))
    ((recv (exp (gen) (mul y x-0 alpha)))
      (send (exp (gen) (mul y x-0 alpha))))
    ((recv (cat (exp (gen) (mul y-0 alpha)) (mul y x-0 (rec y-0))))
      (send (cat (exp (gen) (mul y-0 alpha)) (mul y x-0 (rec y-0)))))
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (recv (enc a-0 b-0 group (exp (gen) (mul x alpha)) (privk a-0)))
      (send
        (enc a-0 b-0 group (exp (gen) (mul y-0 alpha))
          (exp (gen) (mul x alpha)) (privk b-0))))
    ((recv (cat (exp (gen) (mul x alpha (rec w))) w))
      (send (cat (exp (gen) (mul x alpha (rec w))) w))))
  (label 55)
  (parent 36)
  (unrealized (3 0) (4 0) (6 0))
  (comment "7 in cohort - 7 not yet seen"))

(defskeleton dh_sig2
  (vars (k-magic k-magic-0 k-magic-1 skey)
    (n group group-0 group-1 text) (a b a-0 b-0 name)
    (y x alpha y-0 alpha-0 alpha-1 rndx))
  (defstrand init 5 (k-magic k-magic) (n n) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (x x) (y y))
  (defstrand group-init 1 (k-magic k-magic) (group group) (alpha alpha))
  (defstrand resp 3 (k-magic k-magic) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (y y) (x x))
  (deflistener (exp (gen) (mul y x alpha)))
  (deflistener
    (cat (exp (gen) (mul y-0 alpha-0))
      (mul y x alpha (rec y-0) (rec alpha-0))))
  (defstrand resp 3 (k-magic k-magic-0) (group group-0) (a a-0) (b b-0)
    (g (exp (gen) alpha-0)) (y y-0) (x (mul (rec alpha-0) alpha-1)))
  (defstrand group-init 1 (k-magic k-magic-0) (group group-0)
    (alpha alpha-0))
  (defstrand group-init 1 (k-magic k-magic-1) (group group-1)
    (alpha alpha-1))
  (precedes ((0 1) (2 0)) ((1 0) (0 0)) ((2 2) (0 2)) ((2 2) (5 0))
    ((3 1) (0 4)) ((4 1) (3 0)) ((5 2) (4 0)) ((6 0) (5 0))
    ((7 0) (5 1)))
  (non-orig k-magic k-magic-0 (privk a) (privk b))
  (uniq-gen n y x alpha y-0 alpha-0 alpha-1)
  (absent (y x) (y-0 (mul (rec alpha-0) alpha-1)))
  (precur (4 0))
  (operation nonce-test (added-strand group-init 1) (exp (gen) alpha-1)
    (5 1))
  (traces
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (send (enc a b group (exp (gen) (mul x alpha)) (privk a)))
      (recv
        (enc a b group (exp (gen) (mul y alpha))
          (exp (gen) (mul x alpha)) (privk b)))
      (send (enc n (exp (gen) (mul y x alpha)))) (recv n))
    ((send (enc "Group id" group (exp (gen) alpha) k-magic)))
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (recv (enc a b group (exp (gen) (mul x alpha)) (privk a)))
      (send
        (enc a b group (exp (gen) (mul y alpha))
          (exp (gen) (mul x alpha)) (privk b))))
    ((recv (exp (gen) (mul y x alpha)))
      (send (exp (gen) (mul y x alpha))))
    ((recv
       (cat (exp (gen) (mul y-0 alpha-0))
         (mul y x alpha (rec y-0) (rec alpha-0))))
      (send
        (cat (exp (gen) (mul y-0 alpha-0))
          (mul y x alpha (rec y-0) (rec alpha-0)))))
    ((recv (enc "Group id" group-0 (exp (gen) alpha-0) k-magic-0))
      (recv (enc a-0 b-0 group-0 (exp (gen) alpha-1) (privk a-0)))
      (send
        (enc a-0 b-0 group-0 (exp (gen) (mul y-0 alpha-0))
          (exp (gen) alpha-1) (privk b-0))))
    ((send (enc "Group id" group-0 (exp (gen) alpha-0) k-magic-0)))
    ((send (enc "Group id" group-1 (exp (gen) alpha-1) k-magic-1))))
  (label 56)
  (parent 37)
  (unrealized (3 0) (4 0))
  (dead)
  (comment "empty cohort"))

(defskeleton dh_sig2
  (vars (k-magic k-magic-0 skey) (n group group-0 text)
    (a b a-0 b-0 name) (y x alpha y-0 alpha-0 rndx))
  (defstrand init 5 (k-magic k-magic) (n n) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (x x) (y y))
  (defstrand group-init 1 (k-magic k-magic) (group group) (alpha alpha))
  (defstrand resp 3 (k-magic k-magic) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (y y) (x x))
  (deflistener (exp (gen) (mul y x alpha)))
  (deflistener
    (cat (exp (gen) (mul y-0 alpha-0))
      (mul y x alpha (rec y-0) (rec alpha-0))))
  (defstrand resp 3 (k-magic k-magic-0) (group group-0) (a a-0) (b b-0)
    (g (exp (gen) alpha-0)) (y y-0) (x (one)))
  (defstrand group-init 1 (k-magic k-magic-0) (group group-0)
    (alpha alpha-0))
  (precedes ((0 1) (2 0)) ((1 0) (0 0)) ((2 2) (0 2)) ((2 2) (5 0))
    ((3 1) (0 4)) ((4 1) (3 0)) ((5 2) (4 0)) ((6 0) (5 0)))
  (non-orig k-magic k-magic-0 (privk a) (privk b))
  (uniq-gen n y x alpha y-0 alpha-0)
  (absent (y x) (y-0 (one)))
  (precur (4 0))
  (operation nonce-test (displaced 7 6 group-init 1) (exp (gen) alpha-1)
    (5 1))
  (traces
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (send (enc a b group (exp (gen) (mul x alpha)) (privk a)))
      (recv
        (enc a b group (exp (gen) (mul y alpha))
          (exp (gen) (mul x alpha)) (privk b)))
      (send (enc n (exp (gen) (mul y x alpha)))) (recv n))
    ((send (enc "Group id" group (exp (gen) alpha) k-magic)))
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (recv (enc a b group (exp (gen) (mul x alpha)) (privk a)))
      (send
        (enc a b group (exp (gen) (mul y alpha))
          (exp (gen) (mul x alpha)) (privk b))))
    ((recv (exp (gen) (mul y x alpha)))
      (send (exp (gen) (mul y x alpha))))
    ((recv
       (cat (exp (gen) (mul y-0 alpha-0))
         (mul y x alpha (rec y-0) (rec alpha-0))))
      (send
        (cat (exp (gen) (mul y-0 alpha-0))
          (mul y x alpha (rec y-0) (rec alpha-0)))))
    ((recv (enc "Group id" group-0 (exp (gen) alpha-0) k-magic-0))
      (recv (enc a-0 b-0 group-0 (exp (gen) alpha-0) (privk a-0)))
      (send
        (enc a-0 b-0 group-0 (exp (gen) (mul y-0 alpha-0))
          (exp (gen) alpha-0) (privk b-0))))
    ((send (enc "Group id" group-0 (exp (gen) alpha-0) k-magic-0))))
  (label 57)
  (parent 37)
  (unrealized (3 0) (4 0) (5 1))
  (comment "3 in cohort - 3 not yet seen"))

(defskeleton dh_sig2
  (vars (k-magic k-magic-0 skey) (n group group-0 text)
    (a b a-0 b-0 name) (y x alpha y-0 alpha-0 rndx))
  (defstrand init 5 (k-magic k-magic) (n n) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (x x) (y y))
  (defstrand group-init 1 (k-magic k-magic) (group group) (alpha alpha))
  (defstrand resp 3 (k-magic k-magic) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (y y) (x x))
  (deflistener (exp (gen) (mul y x alpha)))
  (deflistener
    (cat (exp (gen) (mul y-0 alpha-0))
      (mul y x alpha (rec y-0) (rec alpha-0))))
  (defstrand resp 3 (k-magic k-magic-0) (group group-0) (a a-0) (b b-0)
    (g (exp (gen) alpha-0)) (y y-0) (x (rec alpha-0)))
  (defstrand group-init 1 (k-magic k-magic-0) (group group-0)
    (alpha alpha-0))
  (precedes ((0 1) (2 0)) ((1 0) (0 0)) ((2 2) (0 2)) ((2 2) (5 0))
    ((3 1) (0 4)) ((4 1) (3 0)) ((5 2) (4 0)) ((6 0) (5 0)))
  (non-orig k-magic k-magic-0 (privk a) (privk b))
  (uniq-gen n y x alpha y-0 alpha-0)
  (absent (y x) (y-0 (rec alpha-0)))
  (precur (4 0))
  (operation nonce-test
    (contracted (x-0 (rec alpha-0)) (alpha-1 alpha-0)) (gen) (5 1))
  (traces
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (send (enc a b group (exp (gen) (mul x alpha)) (privk a)))
      (recv
        (enc a b group (exp (gen) (mul y alpha))
          (exp (gen) (mul x alpha)) (privk b)))
      (send (enc n (exp (gen) (mul y x alpha)))) (recv n))
    ((send (enc "Group id" group (exp (gen) alpha) k-magic)))
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (recv (enc a b group (exp (gen) (mul x alpha)) (privk a)))
      (send
        (enc a b group (exp (gen) (mul y alpha))
          (exp (gen) (mul x alpha)) (privk b))))
    ((recv (exp (gen) (mul y x alpha)))
      (send (exp (gen) (mul y x alpha))))
    ((recv
       (cat (exp (gen) (mul y-0 alpha-0))
         (mul y x alpha (rec y-0) (rec alpha-0))))
      (send
        (cat (exp (gen) (mul y-0 alpha-0))
          (mul y x alpha (rec y-0) (rec alpha-0)))))
    ((recv (enc "Group id" group-0 (exp (gen) alpha-0) k-magic-0))
      (recv (enc a-0 b-0 group-0 (gen) (privk a-0)))
      (send
        (enc a-0 b-0 group-0 (exp (gen) (mul y-0 alpha-0)) (gen)
          (privk b-0))))
    ((send (enc "Group id" group-0 (exp (gen) alpha-0) k-magic-0))))
  (label 58)
  (parent 37)
  (unrealized (3 0) (4 0))
  (dead)
  (comment "empty cohort"))

(defskeleton dh_sig2
  (vars (k-magic k-magic-0 skey) (n group group-0 text)
    (a b a-0 b-0 name) (y x y-0 alpha alpha-0 rndx))
  (defstrand init 5 (k-magic k-magic) (n n) (group group) (a a) (b b)
    (g (exp (gen) alpha-0)) (x x) (y y))
  (defstrand group-init 1 (k-magic k-magic) (group group)
    (alpha alpha-0))
  (defstrand resp 3 (k-magic k-magic) (group group) (a a) (b b)
    (g (exp (gen) alpha-0)) (y y) (x x))
  (deflistener (exp (gen) (mul y x alpha-0)))
  (deflistener
    (cat (exp (gen) (mul y-0 alpha))
      (mul y x (rec y-0) (rec alpha) alpha-0)))
  (defstrand resp 3 (k-magic k-magic-0) (group group-0) (a a-0) (b b-0)
    (g (exp (gen) alpha)) (y y-0) (x (mul (rec alpha) alpha-0)))
  (defstrand group-init 1 (k-magic k-magic-0) (group group-0)
    (alpha alpha))
  (precedes ((0 1) (2 0)) ((1 0) (0 0)) ((2 2) (0 2)) ((2 2) (5 0))
    ((3 1) (0 4)) ((4 1) (3 0)) ((5 2) (4 0)) ((6 0) (5 0)))
  (non-orig k-magic k-magic-0 (privk a) (privk b))
  (uniq-gen n y x y-0 alpha alpha-0)
  (absent (y x) (y-0 (mul (rec alpha) alpha-0)))
  (precur (4 0))
  (operation nonce-test (displaced 7 1 group-init 1) (exp (gen) alpha-1)
    (5 1))
  (traces
    ((recv (enc "Group id" group (exp (gen) alpha-0) k-magic))
      (send (enc a b group (exp (gen) (mul x alpha-0)) (privk a)))
      (recv
        (enc a b group (exp (gen) (mul y alpha-0))
          (exp (gen) (mul x alpha-0)) (privk b)))
      (send (enc n (exp (gen) (mul y x alpha-0)))) (recv n))
    ((send (enc "Group id" group (exp (gen) alpha-0) k-magic)))
    ((recv (enc "Group id" group (exp (gen) alpha-0) k-magic))
      (recv (enc a b group (exp (gen) (mul x alpha-0)) (privk a)))
      (send
        (enc a b group (exp (gen) (mul y alpha-0))
          (exp (gen) (mul x alpha-0)) (privk b))))
    ((recv (exp (gen) (mul y x alpha-0)))
      (send (exp (gen) (mul y x alpha-0))))
    ((recv
       (cat (exp (gen) (mul y-0 alpha))
         (mul y x (rec y-0) (rec alpha) alpha-0)))
      (send
        (cat (exp (gen) (mul y-0 alpha))
          (mul y x (rec y-0) (rec alpha) alpha-0))))
    ((recv (enc "Group id" group-0 (exp (gen) alpha) k-magic-0))
      (recv (enc a-0 b-0 group-0 (exp (gen) alpha-0) (privk a-0)))
      (send
        (enc a-0 b-0 group-0 (exp (gen) (mul y-0 alpha))
          (exp (gen) alpha-0) (privk b-0))))
    ((send (enc "Group id" group-0 (exp (gen) alpha) k-magic-0))))
  (label 59)
  (parent 37)
  (unrealized (3 0) (4 0) (5 1))
  (comment "3 in cohort - 3 not yet seen"))

(defskeleton dh_sig2
  (vars (k-magic k-magic-0 k-magic-1 skey)
    (n group group-0 group-1 text) (a b a-0 b-0 a-1 b-1 name) (x expt)
    (y x-0 alpha y-0 alpha-0 x-1 rndx))
  (defstrand init 5 (k-magic k-magic) (n n) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (x x-0) (y y))
  (defstrand group-init 1 (k-magic k-magic) (group group) (alpha alpha))
  (defstrand resp 3 (k-magic k-magic) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (y y) (x x-0))
  (deflistener (exp (gen) (mul y x-0 alpha)))
  (deflistener
    (cat (exp (gen) (mul y-0 alpha-0))
      (mul y x-0 alpha (rec y-0) (rec alpha-0))))
  (defstrand resp 3 (k-magic k-magic-0) (group group-0) (a a-0) (b b-0)
    (g (exp (gen) alpha-0)) (y y-0) (x x))
  (defstrand group-init 1 (k-magic k-magic-0) (group group-0)
    (alpha alpha-0))
  (defstrand init 2 (k-magic k-magic-1) (group group-1) (a a-1) (b b-1)
    (g (exp (gen) (mul x alpha-0 (rec x-1)))) (x x-1))
  (precedes ((0 1) (2 0)) ((1 0) (0 0)) ((2 2) (0 2)) ((2 2) (5 0))
    ((3 1) (0 4)) ((4 1) (3 0)) ((5 2) (4 0)) ((6 0) (5 0))
    ((6 0) (7 0)) ((7 1) (5 1)))
  (non-orig k-magic k-magic-0 k-magic-1 (privk a) (privk b))
  (uniq-gen n y x-0 alpha y-0 alpha-0 x-1)
  (absent (y x-0) (y-0 x))
  (precur (4 0))
  (operation nonce-test (added-strand init 2)
    (exp (gen) (mul x alpha-0)) (5 1))
  (traces
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (send (enc a b group (exp (gen) (mul x-0 alpha)) (privk a)))
      (recv
        (enc a b group (exp (gen) (mul y alpha))
          (exp (gen) (mul x-0 alpha)) (privk b)))
      (send (enc n (exp (gen) (mul y x-0 alpha)))) (recv n))
    ((send (enc "Group id" group (exp (gen) alpha) k-magic)))
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (recv (enc a b group (exp (gen) (mul x-0 alpha)) (privk a)))
      (send
        (enc a b group (exp (gen) (mul y alpha))
          (exp (gen) (mul x-0 alpha)) (privk b))))
    ((recv (exp (gen) (mul y x-0 alpha)))
      (send (exp (gen) (mul y x-0 alpha))))
    ((recv
       (cat (exp (gen) (mul y-0 alpha-0))
         (mul y x-0 alpha (rec y-0) (rec alpha-0))))
      (send
        (cat (exp (gen) (mul y-0 alpha-0))
          (mul y x-0 alpha (rec y-0) (rec alpha-0)))))
    ((recv (enc "Group id" group-0 (exp (gen) alpha-0) k-magic-0))
      (recv
        (enc a-0 b-0 group-0 (exp (gen) (mul x alpha-0)) (privk a-0)))
      (send
        (enc a-0 b-0 group-0 (exp (gen) (mul y-0 alpha-0))
          (exp (gen) (mul x alpha-0)) (privk b-0))))
    ((send (enc "Group id" group-0 (exp (gen) alpha-0) k-magic-0)))
    ((recv
       (enc "Group id" group-1 (exp (gen) (mul x alpha-0 (rec x-1)))
         k-magic-1))
      (send
        (enc a-1 b-1 group-1 (exp (gen) (mul x alpha-0)) (privk a-1)))))
  (label 60)
  (parent 37)
  (unrealized (3 0) (4 0) (7 0))
  (comment "3 in cohort - 3 not yet seen"))

(defskeleton dh_sig2
  (vars (k-magic k-magic-0 skey) (n group group-0 text)
    (a b a-0 b-0 name) (y y-0 alpha alpha-0 x rndx))
  (defstrand init 5 (k-magic k-magic) (n n) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (x x) (y y))
  (defstrand group-init 1 (k-magic k-magic) (group group) (alpha alpha))
  (defstrand resp 3 (k-magic k-magic) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (y y) (x x))
  (deflistener (exp (gen) (mul y alpha x)))
  (deflistener
    (cat (exp (gen) (mul y-0 alpha-0))
      (mul y (rec y-0) alpha (rec alpha-0) x)))
  (defstrand resp 3 (k-magic k-magic-0) (group group-0) (a a-0) (b b-0)
    (g (exp (gen) alpha-0)) (y y-0) (x (mul alpha (rec alpha-0) x)))
  (defstrand group-init 1 (k-magic k-magic-0) (group group-0)
    (alpha alpha-0))
  (precedes ((0 1) (2 0)) ((1 0) (0 0)) ((2 2) (0 2)) ((2 2) (5 0))
    ((3 1) (0 4)) ((4 1) (3 0)) ((5 2) (4 0)) ((6 0) (5 0)))
  (non-orig k-magic k-magic-0 (privk a) (privk b))
  (uniq-gen n y y-0 alpha alpha-0 x)
  (absent (y x) (y-0 (mul alpha (rec alpha-0) x)))
  (precur (4 0))
  (operation nonce-test (displaced 7 0 init 2)
    (exp (gen) (mul x-0 alpha-1)) (5 1))
  (traces
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (send (enc a b group (exp (gen) (mul alpha x)) (privk a)))
      (recv
        (enc a b group (exp (gen) (mul y alpha))
          (exp (gen) (mul alpha x)) (privk b)))
      (send (enc n (exp (gen) (mul y alpha x)))) (recv n))
    ((send (enc "Group id" group (exp (gen) alpha) k-magic)))
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (recv (enc a b group (exp (gen) (mul alpha x)) (privk a)))
      (send
        (enc a b group (exp (gen) (mul y alpha))
          (exp (gen) (mul alpha x)) (privk b))))
    ((recv (exp (gen) (mul y alpha x)))
      (send (exp (gen) (mul y alpha x))))
    ((recv
       (cat (exp (gen) (mul y-0 alpha-0))
         (mul y (rec y-0) alpha (rec alpha-0) x)))
      (send
        (cat (exp (gen) (mul y-0 alpha-0))
          (mul y (rec y-0) alpha (rec alpha-0) x))))
    ((recv (enc "Group id" group-0 (exp (gen) alpha-0) k-magic-0))
      (recv (enc a-0 b-0 group-0 (exp (gen) (mul alpha x)) (privk a-0)))
      (send
        (enc a-0 b-0 group-0 (exp (gen) (mul y-0 alpha-0))
          (exp (gen) (mul alpha x)) (privk b-0))))
    ((send (enc "Group id" group-0 (exp (gen) alpha-0) k-magic-0))))
  (label 61)
  (parent 37)
  (unrealized (3 0) (4 0))
  (dead)
  (comment "empty cohort"))

(defskeleton dh_sig2
  (vars (k-magic k-magic-0 skey) (n group group-0 text)
    (a b a-0 b-0 name) (y alpha alpha-0 x y-0 rndx))
  (defstrand init 5 (k-magic k-magic) (n n) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (x x) (y y-0))
  (defstrand group-init 1 (k-magic k-magic) (group group) (alpha alpha))
  (defstrand resp 3 (k-magic k-magic) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (y y-0) (x x))
  (deflistener (exp (gen) (mul alpha x y-0)))
  (deflistener
    (cat (exp (gen) (mul y alpha-0))
      (mul (rec y) alpha (rec alpha-0) x y-0)))
  (defstrand resp 3 (k-magic k-magic-0) (group group-0) (a a-0) (b b-0)
    (g (exp (gen) alpha-0)) (y y) (x (mul alpha (rec alpha-0) y-0)))
  (defstrand group-init 1 (k-magic k-magic-0) (group group-0)
    (alpha alpha-0))
  (precedes ((0 1) (2 0)) ((1 0) (0 0)) ((2 2) (0 2)) ((2 2) (5 0))
    ((3 1) (0 4)) ((4 1) (3 0)) ((5 2) (4 0)) ((6 0) (5 0)))
  (non-orig k-magic k-magic-0 (privk a) (privk b))
  (uniq-gen n y alpha alpha-0 x y-0)
  (absent (y (mul alpha (rec alpha-0) y-0)) (y-0 x))
  (precur (4 0))
  (operation nonce-test (displaced 7 2 resp 3)
    (exp (gen) (mul x-0 alpha-1)) (5 1))
  (traces
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (send (enc a b group (exp (gen) (mul alpha x)) (privk a)))
      (recv
        (enc a b group (exp (gen) (mul alpha y-0))
          (exp (gen) (mul alpha x)) (privk b)))
      (send (enc n (exp (gen) (mul alpha x y-0)))) (recv n))
    ((send (enc "Group id" group (exp (gen) alpha) k-magic)))
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (recv (enc a b group (exp (gen) (mul alpha x)) (privk a)))
      (send
        (enc a b group (exp (gen) (mul alpha y-0))
          (exp (gen) (mul alpha x)) (privk b))))
    ((recv (exp (gen) (mul alpha x y-0)))
      (send (exp (gen) (mul alpha x y-0))))
    ((recv
       (cat (exp (gen) (mul y alpha-0))
         (mul (rec y) alpha (rec alpha-0) x y-0)))
      (send
        (cat (exp (gen) (mul y alpha-0))
          (mul (rec y) alpha (rec alpha-0) x y-0))))
    ((recv (enc "Group id" group-0 (exp (gen) alpha-0) k-magic-0))
      (recv
        (enc a-0 b-0 group-0 (exp (gen) (mul alpha y-0)) (privk a-0)))
      (send
        (enc a-0 b-0 group-0 (exp (gen) (mul y alpha-0))
          (exp (gen) (mul alpha y-0)) (privk b-0))))
    ((send (enc "Group id" group-0 (exp (gen) alpha-0) k-magic-0))))
  (label 62)
  (parent 37)
  (unrealized (3 0) (4 0))
  (dead)
  (comment "empty cohort"))

(defskeleton dh_sig2
  (vars (k-magic k-magic-0 k-magic-1 skey)
    (n group group-0 group-1 text) (a b a-0 b-0 a-1 b-1 name) (x expt)
    (y x-0 alpha y-0 alpha-0 y-1 rndx) (x-1 expt))
  (defstrand init 5 (k-magic k-magic) (n n) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (x x-0) (y y))
  (defstrand group-init 1 (k-magic k-magic) (group group) (alpha alpha))
  (defstrand resp 3 (k-magic k-magic) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (y y) (x x-0))
  (deflistener (exp (gen) (mul y x-0 alpha)))
  (deflistener
    (cat (exp (gen) (mul y-0 alpha-0))
      (mul y x-0 alpha (rec y-0) (rec alpha-0))))
  (defstrand resp 3 (k-magic k-magic-0) (group group-0) (a a-0) (b b-0)
    (g (exp (gen) alpha-0)) (y y-0) (x x))
  (defstrand group-init 1 (k-magic k-magic-0) (group group-0)
    (alpha alpha-0))
  (defstrand resp 3 (k-magic k-magic-1) (group group-1) (a a-1) (b b-1)
    (g (exp (gen) (mul x alpha-0 (rec y-1)))) (y y-1) (x x-1))
  (precedes ((0 1) (2 0)) ((1 0) (0 0)) ((2 2) (0 2)) ((2 2) (5 0))
    ((3 1) (0 4)) ((4 1) (3 0)) ((5 2) (4 0)) ((6 0) (5 0))
    ((6 0) (7 0)) ((7 2) (5 1)))
  (non-orig k-magic k-magic-0 k-magic-1 (privk a) (privk b))
  (uniq-gen n y x-0 alpha y-0 alpha-0 y-1)
  (absent (y x-0) (y-0 x) (y-1 x-1))
  (precur (4 0))
  (operation nonce-test (added-strand resp 3)
    (exp (gen) (mul x alpha-0)) (5 1))
  (traces
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (send (enc a b group (exp (gen) (mul x-0 alpha)) (privk a)))
      (recv
        (enc a b group (exp (gen) (mul y alpha))
          (exp (gen) (mul x-0 alpha)) (privk b)))
      (send (enc n (exp (gen) (mul y x-0 alpha)))) (recv n))
    ((send (enc "Group id" group (exp (gen) alpha) k-magic)))
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (recv (enc a b group (exp (gen) (mul x-0 alpha)) (privk a)))
      (send
        (enc a b group (exp (gen) (mul y alpha))
          (exp (gen) (mul x-0 alpha)) (privk b))))
    ((recv (exp (gen) (mul y x-0 alpha)))
      (send (exp (gen) (mul y x-0 alpha))))
    ((recv
       (cat (exp (gen) (mul y-0 alpha-0))
         (mul y x-0 alpha (rec y-0) (rec alpha-0))))
      (send
        (cat (exp (gen) (mul y-0 alpha-0))
          (mul y x-0 alpha (rec y-0) (rec alpha-0)))))
    ((recv (enc "Group id" group-0 (exp (gen) alpha-0) k-magic-0))
      (recv
        (enc a-0 b-0 group-0 (exp (gen) (mul x alpha-0)) (privk a-0)))
      (send
        (enc a-0 b-0 group-0 (exp (gen) (mul y-0 alpha-0))
          (exp (gen) (mul x alpha-0)) (privk b-0))))
    ((send (enc "Group id" group-0 (exp (gen) alpha-0) k-magic-0)))
    ((recv
       (enc "Group id" group-1 (exp (gen) (mul x alpha-0 (rec y-1)))
         k-magic-1))
      (recv
        (enc a-1 b-1 group-1 (exp (gen) (mul x alpha-0 (rec y-1) x-1))
          (privk a-1)))
      (send
        (enc a-1 b-1 group-1 (exp (gen) (mul x alpha-0))
          (exp (gen) (mul x alpha-0 (rec y-1) x-1)) (privk b-1)))))
  (label 63)
  (parent 37)
  (unrealized (3 0) (4 0) (7 0) (7 1))
  (comment "3 in cohort - 3 not yet seen"))

(defskeleton dh_sig2
  (vars (k-magic k-magic-0 skey) (n group group-0 text)
    (a b a-0 b-0 name) (x expt) (y x-0 alpha y-0 alpha-0 rndx) (w expt))
  (defstrand init 5 (k-magic k-magic) (n n) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (x x-0) (y y))
  (defstrand group-init 1 (k-magic k-magic) (group group) (alpha alpha))
  (defstrand resp 3 (k-magic k-magic) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (y y) (x x-0))
  (deflistener (exp (gen) (mul y x-0 alpha)))
  (deflistener
    (cat (exp (gen) (mul y-0 alpha-0))
      (mul y x-0 alpha (rec y-0) (rec alpha-0))))
  (defstrand resp 3 (k-magic k-magic-0) (group group-0) (a a-0) (b b-0)
    (g (exp (gen) alpha-0)) (y y-0) (x x))
  (defstrand group-init 1 (k-magic k-magic-0) (group group-0)
    (alpha alpha-0))
  (deflistener (cat (exp (gen) (mul x alpha-0 (rec w))) w))
  (precedes ((0 1) (2 0)) ((1 0) (0 0)) ((2 2) (0 2)) ((2 2) (5 0))
    ((3 1) (0 4)) ((4 1) (3 0)) ((5 2) (4 0)) ((6 0) (5 0))
    ((6 0) (7 0)) ((7 1) (5 1)))
  (non-orig k-magic k-magic-0 (privk a) (privk b))
  (uniq-gen n y x-0 alpha y-0 alpha-0)
  (absent (y x-0) (y-0 x))
  (precur (4 0) (7 0))
  (operation nonce-test
    (added-listener (cat (exp (gen) (mul x alpha-0 (rec w))) w))
    (exp (gen) (mul x alpha-0)) (5 1))
  (traces
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (send (enc a b group (exp (gen) (mul x-0 alpha)) (privk a)))
      (recv
        (enc a b group (exp (gen) (mul y alpha))
          (exp (gen) (mul x-0 alpha)) (privk b)))
      (send (enc n (exp (gen) (mul y x-0 alpha)))) (recv n))
    ((send (enc "Group id" group (exp (gen) alpha) k-magic)))
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (recv (enc a b group (exp (gen) (mul x-0 alpha)) (privk a)))
      (send
        (enc a b group (exp (gen) (mul y alpha))
          (exp (gen) (mul x-0 alpha)) (privk b))))
    ((recv (exp (gen) (mul y x-0 alpha)))
      (send (exp (gen) (mul y x-0 alpha))))
    ((recv
       (cat (exp (gen) (mul y-0 alpha-0))
         (mul y x-0 alpha (rec y-0) (rec alpha-0))))
      (send
        (cat (exp (gen) (mul y-0 alpha-0))
          (mul y x-0 alpha (rec y-0) (rec alpha-0)))))
    ((recv (enc "Group id" group-0 (exp (gen) alpha-0) k-magic-0))
      (recv
        (enc a-0 b-0 group-0 (exp (gen) (mul x alpha-0)) (privk a-0)))
      (send
        (enc a-0 b-0 group-0 (exp (gen) (mul y-0 alpha-0))
          (exp (gen) (mul x alpha-0)) (privk b-0))))
    ((send (enc "Group id" group-0 (exp (gen) alpha-0) k-magic-0)))
    ((recv (cat (exp (gen) (mul x alpha-0 (rec w))) w))
      (send (cat (exp (gen) (mul x alpha-0 (rec w))) w))))
  (label 64)
  (parent 37)
  (unrealized (3 0) (4 0) (7 0))
  (comment "8 in cohort - 8 not yet seen"))

(defskeleton dh_sig2
  (vars (k-magic k-magic-0 k-magic-1 skey) (n group group-0 text)
    (a b a-0 b-0 name) (y x alpha y-0 alpha-0 alpha-1 rndx))
  (defstrand init 5 (k-magic k-magic) (n n) (group group) (a a) (b b)
    (g (exp (gen) alpha-0)) (x x) (y (mul y alpha (rec alpha-0))))
  (defstrand group-init 1 (k-magic k-magic) (group group)
    (alpha alpha-0))
  (defstrand resp 3 (k-magic k-magic-0) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (y y) (x (mul x (rec alpha) alpha-0)))
  (defstrand group-init 1 (k-magic k-magic-0) (group group)
    (alpha alpha))
  (deflistener (exp (gen) (mul y x alpha)))
  (deflistener
    (cat (exp (gen) (mul y-0 alpha-0))
      (mul y x alpha (rec y-0) (rec alpha-0))))
  (defstrand resp 3 (k-magic k-magic) (group group) (a a-0) (b b-0)
    (g (exp (gen) alpha-0)) (y y-0) (x (mul (rec alpha-0) alpha-1)))
  (defstrand group-init 1 (k-magic k-magic-1) (group group-0)
    (alpha alpha-1))
  (precedes ((0 1) (2 0)) ((1 0) (0 0)) ((2 2) (0 2)) ((2 2) (6 0))
    ((3 0) (2 0)) ((4 1) (0 4)) ((5 1) (4 0)) ((6 2) (5 0))
    ((7 0) (6 1)))
  (non-orig k-magic k-magic-0 (privk a) (privk b))
  (uniq-gen n y x alpha y-0 alpha-0 alpha-1)
  (absent (y (mul x (rec alpha) alpha-0))
    (y-0 (mul (rec alpha-0) alpha-1)))
  (precur (5 0))
  (operation nonce-test (added-strand group-init 1) (exp (gen) alpha-1)
    (6 1))
  (traces
    ((recv (enc "Group id" group (exp (gen) alpha-0) k-magic))
      (send (enc a b group (exp (gen) (mul x alpha-0)) (privk a)))
      (recv
        (enc a b group (exp (gen) (mul y alpha))
          (exp (gen) (mul x alpha-0)) (privk b)))
      (send (enc n (exp (gen) (mul y x alpha)))) (recv n))
    ((send (enc "Group id" group (exp (gen) alpha-0) k-magic)))
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic-0))
      (recv (enc a b group (exp (gen) (mul x alpha-0)) (privk a)))
      (send
        (enc a b group (exp (gen) (mul y alpha))
          (exp (gen) (mul x alpha-0)) (privk b))))
    ((send (enc "Group id" group (exp (gen) alpha) k-magic-0)))
    ((recv (exp (gen) (mul y x alpha)))
      (send (exp (gen) (mul y x alpha))))
    ((recv
       (cat (exp (gen) (mul y-0 alpha-0))
         (mul y x alpha (rec y-0) (rec alpha-0))))
      (send
        (cat (exp (gen) (mul y-0 alpha-0))
          (mul y x alpha (rec y-0) (rec alpha-0)))))
    ((recv (enc "Group id" group (exp (gen) alpha-0) k-magic))
      (recv (enc a-0 b-0 group (exp (gen) alpha-1) (privk a-0)))
      (send
        (enc a-0 b-0 group (exp (gen) (mul y-0 alpha-0))
          (exp (gen) alpha-1) (privk b-0))))
    ((send (enc "Group id" group-0 (exp (gen) alpha-1) k-magic-1))))
  (label 65)
  (parent 45)
  (unrealized (4 0) (5 0))
  (dead)
  (comment "empty cohort"))

(defskeleton dh_sig2
  (vars (k-magic k-magic-0 skey) (n group text) (a b a-0 b-0 name)
    (y x y-0 alpha alpha-0 rndx))
  (defstrand init 5 (k-magic k-magic) (n n) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (x x) (y (mul y (rec alpha) alpha-0)))
  (defstrand group-init 1 (k-magic k-magic) (group group) (alpha alpha))
  (defstrand resp 3 (k-magic k-magic-0) (group group) (a a) (b b)
    (g (exp (gen) alpha-0)) (y y) (x (mul x alpha (rec alpha-0))))
  (defstrand group-init 1 (k-magic k-magic-0) (group group)
    (alpha alpha-0))
  (deflistener (exp (gen) (mul y x alpha-0)))
  (deflistener
    (cat (exp (gen) (mul y-0 alpha))
      (mul y x (rec y-0) (rec alpha) alpha-0)))
  (defstrand resp 3 (k-magic k-magic) (group group) (a a-0) (b b-0)
    (g (exp (gen) alpha)) (y y-0) (x (mul (rec alpha) alpha-0)))
  (precedes ((0 1) (2 0)) ((1 0) (0 0)) ((2 2) (0 2)) ((2 2) (6 0))
    ((3 0) (2 0)) ((4 1) (0 4)) ((5 1) (4 0)) ((6 2) (5 0)))
  (non-orig k-magic k-magic-0 (privk a) (privk b))
  (uniq-gen n y x y-0 alpha alpha-0)
  (absent (y (mul x alpha (rec alpha-0)))
    (y-0 (mul (rec alpha) alpha-0)))
  (precur (5 0))
  (operation nonce-test (displaced 7 3 group-init 1) (exp (gen) alpha-1)
    (6 1))
  (traces
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (send (enc a b group (exp (gen) (mul x alpha)) (privk a)))
      (recv
        (enc a b group (exp (gen) (mul y alpha-0))
          (exp (gen) (mul x alpha)) (privk b)))
      (send (enc n (exp (gen) (mul y x alpha-0)))) (recv n))
    ((send (enc "Group id" group (exp (gen) alpha) k-magic)))
    ((recv (enc "Group id" group (exp (gen) alpha-0) k-magic-0))
      (recv (enc a b group (exp (gen) (mul x alpha)) (privk a)))
      (send
        (enc a b group (exp (gen) (mul y alpha-0))
          (exp (gen) (mul x alpha)) (privk b))))
    ((send (enc "Group id" group (exp (gen) alpha-0) k-magic-0)))
    ((recv (exp (gen) (mul y x alpha-0)))
      (send (exp (gen) (mul y x alpha-0))))
    ((recv
       (cat (exp (gen) (mul y-0 alpha))
         (mul y x (rec y-0) (rec alpha) alpha-0)))
      (send
        (cat (exp (gen) (mul y-0 alpha))
          (mul y x (rec y-0) (rec alpha) alpha-0))))
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (recv (enc a-0 b-0 group (exp (gen) alpha-0) (privk a-0)))
      (send
        (enc a-0 b-0 group (exp (gen) (mul y-0 alpha))
          (exp (gen) alpha-0) (privk b-0)))))
  (label 66)
  (parent 45)
  (unrealized (4 0) (5 0) (6 1))
  (comment "3 in cohort - 3 not yet seen"))

(defskeleton dh_sig2
  (vars (k-magic k-magic-0 skey) (n group text) (a b a-0 b-0 name)
    (y x alpha y-0 alpha-0 rndx))
  (defstrand init 5 (k-magic k-magic) (n n) (group group) (a a) (b b)
    (g (exp (gen) alpha-0)) (x x) (y (mul y alpha (rec alpha-0))))
  (defstrand group-init 1 (k-magic k-magic) (group group)
    (alpha alpha-0))
  (defstrand resp 3 (k-magic k-magic-0) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (y y) (x (mul x (rec alpha) alpha-0)))
  (defstrand group-init 1 (k-magic k-magic-0) (group group)
    (alpha alpha))
  (deflistener (exp (gen) (mul y x alpha)))
  (deflistener
    (cat (exp (gen) (mul y-0 alpha-0))
      (mul y x alpha (rec y-0) (rec alpha-0))))
  (defstrand resp 3 (k-magic k-magic) (group group) (a a-0) (b b-0)
    (g (exp (gen) alpha-0)) (y y-0) (x (rec alpha-0)))
  (precedes ((0 1) (2 0)) ((1 0) (0 0)) ((2 2) (0 2)) ((2 2) (6 0))
    ((3 0) (2 0)) ((4 1) (0 4)) ((5 1) (4 0)) ((6 2) (5 0)))
  (non-orig k-magic k-magic-0 (privk a) (privk b))
  (uniq-gen n y x alpha y-0 alpha-0)
  (absent (y (mul x (rec alpha) alpha-0)) (y-0 (rec alpha-0)))
  (precur (5 0))
  (operation nonce-test
    (contracted (x-0 (rec alpha-0)) (alpha-1 alpha-0)) (gen) (6 1))
  (traces
    ((recv (enc "Group id" group (exp (gen) alpha-0) k-magic))
      (send (enc a b group (exp (gen) (mul x alpha-0)) (privk a)))
      (recv
        (enc a b group (exp (gen) (mul y alpha))
          (exp (gen) (mul x alpha-0)) (privk b)))
      (send (enc n (exp (gen) (mul y x alpha)))) (recv n))
    ((send (enc "Group id" group (exp (gen) alpha-0) k-magic)))
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic-0))
      (recv (enc a b group (exp (gen) (mul x alpha-0)) (privk a)))
      (send
        (enc a b group (exp (gen) (mul y alpha))
          (exp (gen) (mul x alpha-0)) (privk b))))
    ((send (enc "Group id" group (exp (gen) alpha) k-magic-0)))
    ((recv (exp (gen) (mul y x alpha)))
      (send (exp (gen) (mul y x alpha))))
    ((recv
       (cat (exp (gen) (mul y-0 alpha-0))
         (mul y x alpha (rec y-0) (rec alpha-0))))
      (send
        (cat (exp (gen) (mul y-0 alpha-0))
          (mul y x alpha (rec y-0) (rec alpha-0)))))
    ((recv (enc "Group id" group (exp (gen) alpha-0) k-magic))
      (recv (enc a-0 b-0 group (gen) (privk a-0)))
      (send
        (enc a-0 b-0 group (exp (gen) (mul y-0 alpha-0)) (gen)
          (privk b-0)))))
  (label 67)
  (parent 45)
  (unrealized (4 0) (5 0))
  (dead)
  (comment "empty cohort"))

(defskeleton dh_sig2
  (vars (k-magic k-magic-0 skey) (n group text) (a b a-0 b-0 name)
    (y x alpha y-0 alpha-0 rndx))
  (defstrand init 5 (k-magic k-magic) (n n) (group group) (a a) (b b)
    (g (exp (gen) alpha-0)) (x x) (y (mul y alpha (rec alpha-0))))
  (defstrand group-init 1 (k-magic k-magic) (group group)
    (alpha alpha-0))
  (defstrand resp 3 (k-magic k-magic-0) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (y y) (x (mul x (rec alpha) alpha-0)))
  (defstrand group-init 1 (k-magic k-magic-0) (group group)
    (alpha alpha))
  (deflistener (exp (gen) (mul y x alpha)))
  (deflistener
    (cat (exp (gen) (mul y-0 alpha-0))
      (mul y x alpha (rec y-0) (rec alpha-0))))
  (defstrand resp 3 (k-magic k-magic) (group group) (a a-0) (b b-0)
    (g (exp (gen) alpha-0)) (y y-0) (x (one)))
  (precedes ((0 1) (2 0)) ((1 0) (0 0)) ((2 2) (0 2)) ((2 2) (6 0))
    ((3 0) (2 0)) ((4 1) (0 4)) ((5 1) (4 0)) ((6 2) (5 0)))
  (non-orig k-magic k-magic-0 (privk a) (privk b))
  (uniq-gen n y x alpha y-0 alpha-0)
  (absent (y (mul x (rec alpha) alpha-0)) (y-0 (one)))
  (precur (5 0))
  (operation nonce-test (displaced 7 1 group-init 1) (exp (gen) alpha-1)
    (6 1))
  (traces
    ((recv (enc "Group id" group (exp (gen) alpha-0) k-magic))
      (send (enc a b group (exp (gen) (mul x alpha-0)) (privk a)))
      (recv
        (enc a b group (exp (gen) (mul y alpha))
          (exp (gen) (mul x alpha-0)) (privk b)))
      (send (enc n (exp (gen) (mul y x alpha)))) (recv n))
    ((send (enc "Group id" group (exp (gen) alpha-0) k-magic)))
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic-0))
      (recv (enc a b group (exp (gen) (mul x alpha-0)) (privk a)))
      (send
        (enc a b group (exp (gen) (mul y alpha))
          (exp (gen) (mul x alpha-0)) (privk b))))
    ((send (enc "Group id" group (exp (gen) alpha) k-magic-0)))
    ((recv (exp (gen) (mul y x alpha)))
      (send (exp (gen) (mul y x alpha))))
    ((recv
       (cat (exp (gen) (mul y-0 alpha-0))
         (mul y x alpha (rec y-0) (rec alpha-0))))
      (send
        (cat (exp (gen) (mul y-0 alpha-0))
          (mul y x alpha (rec y-0) (rec alpha-0)))))
    ((recv (enc "Group id" group (exp (gen) alpha-0) k-magic))
      (recv (enc a-0 b-0 group (exp (gen) alpha-0) (privk a-0)))
      (send
        (enc a-0 b-0 group (exp (gen) (mul y-0 alpha-0))
          (exp (gen) alpha-0) (privk b-0)))))
  (label 68)
  (parent 45)
  (unrealized (4 0) (5 0) (6 1))
  (comment "3 in cohort - 3 not yet seen"))

(defskeleton dh_sig2
  (vars (k-magic k-magic-0 k-magic-1 skey) (n group group-0 text)
    (a b a-0 b-0 a-1 b-1 name) (x expt)
    (y x-0 alpha y-0 alpha-0 x-1 rndx))
  (defstrand init 5 (k-magic k-magic) (n n) (group group) (a a) (b b)
    (g (exp (gen) alpha-0)) (x x-0) (y (mul y alpha (rec alpha-0))))
  (defstrand group-init 1 (k-magic k-magic) (group group)
    (alpha alpha-0))
  (defstrand resp 3 (k-magic k-magic-0) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (y y) (x (mul x-0 (rec alpha) alpha-0)))
  (defstrand group-init 1 (k-magic k-magic-0) (group group)
    (alpha alpha))
  (deflistener (exp (gen) (mul y x-0 alpha)))
  (deflistener
    (cat (exp (gen) (mul y-0 alpha-0))
      (mul y x-0 alpha (rec y-0) (rec alpha-0))))
  (defstrand resp 3 (k-magic k-magic) (group group) (a a-0) (b b-0)
    (g (exp (gen) alpha-0)) (y y-0) (x x))
  (defstrand init 2 (k-magic k-magic-1) (group group-0) (a a-1) (b b-1)
    (g (exp (gen) (mul x alpha-0 (rec x-1)))) (x x-1))
  (precedes ((0 1) (2 0)) ((1 0) (0 0)) ((1 0) (7 0)) ((2 2) (0 2))
    ((2 2) (6 0)) ((3 0) (2 0)) ((4 1) (0 4)) ((5 1) (4 0))
    ((6 2) (5 0)) ((7 1) (6 1)))
  (non-orig k-magic k-magic-0 k-magic-1 (privk a) (privk b))
  (uniq-gen n y x-0 alpha y-0 alpha-0 x-1)
  (absent (y (mul x-0 (rec alpha) alpha-0)) (y-0 x))
  (precur (5 0))
  (operation nonce-test (added-strand init 2)
    (exp (gen) (mul x alpha-0)) (6 1))
  (traces
    ((recv (enc "Group id" group (exp (gen) alpha-0) k-magic))
      (send (enc a b group (exp (gen) (mul x-0 alpha-0)) (privk a)))
      (recv
        (enc a b group (exp (gen) (mul y alpha))
          (exp (gen) (mul x-0 alpha-0)) (privk b)))
      (send (enc n (exp (gen) (mul y x-0 alpha)))) (recv n))
    ((send (enc "Group id" group (exp (gen) alpha-0) k-magic)))
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic-0))
      (recv (enc a b group (exp (gen) (mul x-0 alpha-0)) (privk a)))
      (send
        (enc a b group (exp (gen) (mul y alpha))
          (exp (gen) (mul x-0 alpha-0)) (privk b))))
    ((send (enc "Group id" group (exp (gen) alpha) k-magic-0)))
    ((recv (exp (gen) (mul y x-0 alpha)))
      (send (exp (gen) (mul y x-0 alpha))))
    ((recv
       (cat (exp (gen) (mul y-0 alpha-0))
         (mul y x-0 alpha (rec y-0) (rec alpha-0))))
      (send
        (cat (exp (gen) (mul y-0 alpha-0))
          (mul y x-0 alpha (rec y-0) (rec alpha-0)))))
    ((recv (enc "Group id" group (exp (gen) alpha-0) k-magic))
      (recv (enc a-0 b-0 group (exp (gen) (mul x alpha-0)) (privk a-0)))
      (send
        (enc a-0 b-0 group (exp (gen) (mul y-0 alpha-0))
          (exp (gen) (mul x alpha-0)) (privk b-0))))
    ((recv
       (enc "Group id" group-0 (exp (gen) (mul x alpha-0 (rec x-1)))
         k-magic-1))
      (send
        (enc a-1 b-1 group-0 (exp (gen) (mul x alpha-0)) (privk a-1)))))
  (label 69)
  (parent 45)
  (unrealized (4 0) (5 0) (7 0))
  (comment "3 in cohort - 3 not yet seen"))

(defskeleton dh_sig2
  (vars (k-magic k-magic-0 skey) (n group text) (a b a-0 b-0 name)
    (y alpha y-0 alpha-0 x rndx))
  (defstrand init 5 (k-magic k-magic) (n n) (group group) (a a) (b b)
    (g (exp (gen) alpha-0)) (x x) (y (mul y alpha (rec alpha-0))))
  (defstrand group-init 1 (k-magic k-magic) (group group)
    (alpha alpha-0))
  (defstrand resp 3 (k-magic k-magic-0) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (y y) (x (mul (rec alpha) alpha-0 x)))
  (defstrand group-init 1 (k-magic k-magic-0) (group group)
    (alpha alpha))
  (deflistener (exp (gen) (mul y alpha x)))
  (deflistener
    (cat (exp (gen) (mul y-0 alpha-0))
      (mul y alpha (rec y-0) (rec alpha-0) x)))
  (defstrand resp 3 (k-magic k-magic) (group group) (a a-0) (b b-0)
    (g (exp (gen) alpha-0)) (y y-0) (x x))
  (precedes ((0 1) (2 0)) ((1 0) (0 0)) ((2 2) (0 2)) ((2 2) (6 0))
    ((3 0) (2 0)) ((4 1) (0 4)) ((5 1) (4 0)) ((6 2) (5 0)))
  (non-orig k-magic k-magic-0 (privk a) (privk b))
  (uniq-gen n y alpha y-0 alpha-0 x)
  (absent (y (mul (rec alpha) alpha-0 x)) (y-0 x))
  (precur (5 0))
  (operation nonce-test (displaced 7 0 init 2)
    (exp (gen) (mul x-0 alpha-0)) (6 1))
  (traces
    ((recv (enc "Group id" group (exp (gen) alpha-0) k-magic))
      (send (enc a b group (exp (gen) (mul alpha-0 x)) (privk a)))
      (recv
        (enc a b group (exp (gen) (mul y alpha))
          (exp (gen) (mul alpha-0 x)) (privk b)))
      (send (enc n (exp (gen) (mul y alpha x)))) (recv n))
    ((send (enc "Group id" group (exp (gen) alpha-0) k-magic)))
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic-0))
      (recv (enc a b group (exp (gen) (mul alpha-0 x)) (privk a)))
      (send
        (enc a b group (exp (gen) (mul y alpha))
          (exp (gen) (mul alpha-0 x)) (privk b))))
    ((send (enc "Group id" group (exp (gen) alpha) k-magic-0)))
    ((recv (exp (gen) (mul y alpha x)))
      (send (exp (gen) (mul y alpha x))))
    ((recv
       (cat (exp (gen) (mul y-0 alpha-0))
         (mul y alpha (rec y-0) (rec alpha-0) x)))
      (send
        (cat (exp (gen) (mul y-0 alpha-0))
          (mul y alpha (rec y-0) (rec alpha-0) x))))
    ((recv (enc "Group id" group (exp (gen) alpha-0) k-magic))
      (recv (enc a-0 b-0 group (exp (gen) (mul alpha-0 x)) (privk a-0)))
      (send
        (enc a-0 b-0 group (exp (gen) (mul y-0 alpha-0))
          (exp (gen) (mul alpha-0 x)) (privk b-0)))))
  (label 70)
  (parent 45)
  (unrealized (4 0) (5 0))
  (dead)
  (comment "empty cohort"))

(defskeleton dh_sig2
  (vars (k-magic k-magic-0 skey) (n group text) (a b a-0 b-0 name)
    (y x alpha alpha-0 y-0 rndx))
  (defstrand init 5 (k-magic k-magic) (n n) (group group) (a a) (b b)
    (g (exp (gen) alpha-0)) (x x) (y (mul alpha (rec alpha-0) y-0)))
  (defstrand group-init 1 (k-magic k-magic) (group group)
    (alpha alpha-0))
  (defstrand resp 3 (k-magic k-magic-0) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (y y-0) (x (mul x (rec alpha) alpha-0)))
  (defstrand group-init 1 (k-magic k-magic-0) (group group)
    (alpha alpha))
  (deflistener (exp (gen) (mul x alpha y-0)))
  (deflistener
    (cat (exp (gen) (mul y alpha-0))
      (mul (rec y) x alpha (rec alpha-0) y-0)))
  (defstrand resp 3 (k-magic k-magic) (group group) (a a-0) (b b-0)
    (g (exp (gen) alpha-0)) (y y) (x (mul alpha (rec alpha-0) y-0)))
  (precedes ((0 1) (2 0)) ((1 0) (0 0)) ((2 2) (0 2)) ((2 2) (6 0))
    ((3 0) (2 0)) ((4 1) (0 4)) ((5 1) (4 0)) ((6 2) (5 0)))
  (non-orig k-magic k-magic-0 (privk a) (privk b))
  (uniq-gen n y x alpha alpha-0 y-0)
  (absent (y (mul alpha (rec alpha-0) y-0))
    (y-0 (mul x (rec alpha) alpha-0)))
  (precur (5 0))
  (operation nonce-test (displaced 7 2 resp 3)
    (exp (gen) (mul x-0 alpha-1)) (6 1))
  (traces
    ((recv (enc "Group id" group (exp (gen) alpha-0) k-magic))
      (send (enc a b group (exp (gen) (mul x alpha-0)) (privk a)))
      (recv
        (enc a b group (exp (gen) (mul alpha y-0))
          (exp (gen) (mul x alpha-0)) (privk b)))
      (send (enc n (exp (gen) (mul x alpha y-0)))) (recv n))
    ((send (enc "Group id" group (exp (gen) alpha-0) k-magic)))
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic-0))
      (recv (enc a b group (exp (gen) (mul x alpha-0)) (privk a)))
      (send
        (enc a b group (exp (gen) (mul alpha y-0))
          (exp (gen) (mul x alpha-0)) (privk b))))
    ((send (enc "Group id" group (exp (gen) alpha) k-magic-0)))
    ((recv (exp (gen) (mul x alpha y-0)))
      (send (exp (gen) (mul x alpha y-0))))
    ((recv
       (cat (exp (gen) (mul y alpha-0))
         (mul (rec y) x alpha (rec alpha-0) y-0)))
      (send
        (cat (exp (gen) (mul y alpha-0))
          (mul (rec y) x alpha (rec alpha-0) y-0))))
    ((recv (enc "Group id" group (exp (gen) alpha-0) k-magic))
      (recv (enc a-0 b-0 group (exp (gen) (mul alpha y-0)) (privk a-0)))
      (send
        (enc a-0 b-0 group (exp (gen) (mul y alpha-0))
          (exp (gen) (mul alpha y-0)) (privk b-0)))))
  (label 71)
  (parent 45)
  (unrealized (4 0) (5 0))
  (dead)
  (comment "empty cohort"))

(defskeleton dh_sig2
  (vars (k-magic k-magic-0 k-magic-1 skey) (n group group-0 text)
    (a b a-0 b-0 a-1 b-1 name) (x expt)
    (y x-0 alpha y-0 alpha-0 y-1 rndx) (x-1 expt))
  (defstrand init 5 (k-magic k-magic) (n n) (group group) (a a) (b b)
    (g (exp (gen) alpha-0)) (x x-0) (y (mul y alpha (rec alpha-0))))
  (defstrand group-init 1 (k-magic k-magic) (group group)
    (alpha alpha-0))
  (defstrand resp 3 (k-magic k-magic-0) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (y y) (x (mul x-0 (rec alpha) alpha-0)))
  (defstrand group-init 1 (k-magic k-magic-0) (group group)
    (alpha alpha))
  (deflistener (exp (gen) (mul y x-0 alpha)))
  (deflistener
    (cat (exp (gen) (mul y-0 alpha-0))
      (mul y x-0 alpha (rec y-0) (rec alpha-0))))
  (defstrand resp 3 (k-magic k-magic) (group group) (a a-0) (b b-0)
    (g (exp (gen) alpha-0)) (y y-0) (x x))
  (defstrand resp 3 (k-magic k-magic-1) (group group-0) (a a-1) (b b-1)
    (g (exp (gen) (mul x alpha-0 (rec y-1)))) (y y-1) (x x-1))
  (precedes ((0 1) (2 0)) ((1 0) (0 0)) ((1 0) (7 0)) ((2 2) (0 2))
    ((2 2) (6 0)) ((3 0) (2 0)) ((4 1) (0 4)) ((5 1) (4 0))
    ((6 2) (5 0)) ((7 2) (6 1)))
  (non-orig k-magic k-magic-0 k-magic-1 (privk a) (privk b))
  (uniq-gen n y x-0 alpha y-0 alpha-0 y-1)
  (absent (y (mul x-0 (rec alpha) alpha-0)) (y-0 x) (y-1 x-1))
  (precur (5 0))
  (operation nonce-test (added-strand resp 3)
    (exp (gen) (mul x alpha-0)) (6 1))
  (traces
    ((recv (enc "Group id" group (exp (gen) alpha-0) k-magic))
      (send (enc a b group (exp (gen) (mul x-0 alpha-0)) (privk a)))
      (recv
        (enc a b group (exp (gen) (mul y alpha))
          (exp (gen) (mul x-0 alpha-0)) (privk b)))
      (send (enc n (exp (gen) (mul y x-0 alpha)))) (recv n))
    ((send (enc "Group id" group (exp (gen) alpha-0) k-magic)))
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic-0))
      (recv (enc a b group (exp (gen) (mul x-0 alpha-0)) (privk a)))
      (send
        (enc a b group (exp (gen) (mul y alpha))
          (exp (gen) (mul x-0 alpha-0)) (privk b))))
    ((send (enc "Group id" group (exp (gen) alpha) k-magic-0)))
    ((recv (exp (gen) (mul y x-0 alpha)))
      (send (exp (gen) (mul y x-0 alpha))))
    ((recv
       (cat (exp (gen) (mul y-0 alpha-0))
         (mul y x-0 alpha (rec y-0) (rec alpha-0))))
      (send
        (cat (exp (gen) (mul y-0 alpha-0))
          (mul y x-0 alpha (rec y-0) (rec alpha-0)))))
    ((recv (enc "Group id" group (exp (gen) alpha-0) k-magic))
      (recv (enc a-0 b-0 group (exp (gen) (mul x alpha-0)) (privk a-0)))
      (send
        (enc a-0 b-0 group (exp (gen) (mul y-0 alpha-0))
          (exp (gen) (mul x alpha-0)) (privk b-0))))
    ((recv
       (enc "Group id" group-0 (exp (gen) (mul x alpha-0 (rec y-1)))
         k-magic-1))
      (recv
        (enc a-1 b-1 group-0 (exp (gen) (mul x alpha-0 (rec y-1) x-1))
          (privk a-1)))
      (send
        (enc a-1 b-1 group-0 (exp (gen) (mul x alpha-0))
          (exp (gen) (mul x alpha-0 (rec y-1) x-1)) (privk b-1)))))
  (label 72)
  (parent 45)
  (unrealized (4 0) (5 0) (7 0) (7 1))
  (comment "3 in cohort - 3 not yet seen"))

(defskeleton dh_sig2
  (vars (k-magic k-magic-0 skey) (n group text) (a b a-0 b-0 name)
    (x expt) (y x-0 alpha y-0 alpha-0 rndx) (w expt))
  (defstrand init 5 (k-magic k-magic) (n n) (group group) (a a) (b b)
    (g (exp (gen) alpha-0)) (x x-0) (y (mul y alpha (rec alpha-0))))
  (defstrand group-init 1 (k-magic k-magic) (group group)
    (alpha alpha-0))
  (defstrand resp 3 (k-magic k-magic-0) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (y y) (x (mul x-0 (rec alpha) alpha-0)))
  (defstrand group-init 1 (k-magic k-magic-0) (group group)
    (alpha alpha))
  (deflistener (exp (gen) (mul y x-0 alpha)))
  (deflistener
    (cat (exp (gen) (mul y-0 alpha-0))
      (mul y x-0 alpha (rec y-0) (rec alpha-0))))
  (defstrand resp 3 (k-magic k-magic) (group group) (a a-0) (b b-0)
    (g (exp (gen) alpha-0)) (y y-0) (x x))
  (deflistener (cat (exp (gen) (mul x alpha-0 (rec w))) w))
  (precedes ((0 1) (2 0)) ((1 0) (0 0)) ((1 0) (7 0)) ((2 2) (0 2))
    ((2 2) (6 0)) ((3 0) (2 0)) ((4 1) (0 4)) ((5 1) (4 0))
    ((6 2) (5 0)) ((7 1) (6 1)))
  (non-orig k-magic k-magic-0 (privk a) (privk b))
  (uniq-gen n y x-0 alpha y-0 alpha-0)
  (absent (y (mul x-0 (rec alpha) alpha-0)) (y-0 x))
  (precur (5 0) (7 0))
  (operation nonce-test
    (added-listener (cat (exp (gen) (mul x alpha-0 (rec w))) w))
    (exp (gen) (mul x alpha-0)) (6 1))
  (traces
    ((recv (enc "Group id" group (exp (gen) alpha-0) k-magic))
      (send (enc a b group (exp (gen) (mul x-0 alpha-0)) (privk a)))
      (recv
        (enc a b group (exp (gen) (mul y alpha))
          (exp (gen) (mul x-0 alpha-0)) (privk b)))
      (send (enc n (exp (gen) (mul y x-0 alpha)))) (recv n))
    ((send (enc "Group id" group (exp (gen) alpha-0) k-magic)))
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic-0))
      (recv (enc a b group (exp (gen) (mul x-0 alpha-0)) (privk a)))
      (send
        (enc a b group (exp (gen) (mul y alpha))
          (exp (gen) (mul x-0 alpha-0)) (privk b))))
    ((send (enc "Group id" group (exp (gen) alpha) k-magic-0)))
    ((recv (exp (gen) (mul y x-0 alpha)))
      (send (exp (gen) (mul y x-0 alpha))))
    ((recv
       (cat (exp (gen) (mul y-0 alpha-0))
         (mul y x-0 alpha (rec y-0) (rec alpha-0))))
      (send
        (cat (exp (gen) (mul y-0 alpha-0))
          (mul y x-0 alpha (rec y-0) (rec alpha-0)))))
    ((recv (enc "Group id" group (exp (gen) alpha-0) k-magic))
      (recv (enc a-0 b-0 group (exp (gen) (mul x alpha-0)) (privk a-0)))
      (send
        (enc a-0 b-0 group (exp (gen) (mul y-0 alpha-0))
          (exp (gen) (mul x alpha-0)) (privk b-0))))
    ((recv (cat (exp (gen) (mul x alpha-0 (rec w))) w))
      (send (cat (exp (gen) (mul x alpha-0 (rec w))) w))))
  (label 73)
  (parent 45)
  (unrealized (4 0) (5 0) (7 0))
  (comment "8 in cohort - 8 not yet seen"))

(defskeleton dh_sig2
  (vars (k-magic k-magic-0 k-magic-1 skey) (n group group-0 text)
    (a b a-0 b-0 name) (alpha y x y-0 alpha-0 alpha-1 rndx))
  (defstrand init 5 (k-magic k-magic) (n n) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (x x) (y (mul (rec alpha) y alpha-0)))
  (defstrand group-init 1 (k-magic k-magic) (group group) (alpha alpha))
  (defstrand resp 3 (k-magic k-magic-0) (group group) (a a) (b b)
    (g (exp (gen) alpha-0)) (y y) (x (mul alpha x (rec alpha-0))))
  (defstrand group-init 1 (k-magic k-magic-0) (group group)
    (alpha alpha-0))
  (deflistener (exp (gen) (mul y x alpha-0)))
  (deflistener (cat (exp (gen) (mul y-0 alpha-0)) (mul y x (rec y-0))))
  (defstrand resp 3 (k-magic k-magic-0) (group group) (a a-0) (b b-0)
    (g (exp (gen) alpha-0)) (y y-0) (x (mul (rec alpha-0) alpha-1)))
  (defstrand group-init 1 (k-magic k-magic-1) (group group-0)
    (alpha alpha-1))
  (precedes ((0 1) (2 0)) ((1 0) (0 0)) ((2 2) (0 2)) ((2 2) (6 0))
    ((3 0) (2 0)) ((4 1) (0 4)) ((5 1) (4 0)) ((6 2) (5 0))
    ((7 0) (6 1)))
  (non-orig k-magic k-magic-0 (privk a) (privk b))
  (uniq-gen n alpha y x y-0 alpha-0 alpha-1)
  (absent (y (mul alpha x (rec alpha-0)))
    (y-0 (mul (rec alpha-0) alpha-1)))
  (precur (5 0))
  (operation nonce-test (added-strand group-init 1) (exp (gen) alpha-1)
    (6 1))
  (traces
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (send (enc a b group (exp (gen) (mul alpha x)) (privk a)))
      (recv
        (enc a b group (exp (gen) (mul y alpha-0))
          (exp (gen) (mul alpha x)) (privk b)))
      (send (enc n (exp (gen) (mul y x alpha-0)))) (recv n))
    ((send (enc "Group id" group (exp (gen) alpha) k-magic)))
    ((recv (enc "Group id" group (exp (gen) alpha-0) k-magic-0))
      (recv (enc a b group (exp (gen) (mul alpha x)) (privk a)))
      (send
        (enc a b group (exp (gen) (mul y alpha-0))
          (exp (gen) (mul alpha x)) (privk b))))
    ((send (enc "Group id" group (exp (gen) alpha-0) k-magic-0)))
    ((recv (exp (gen) (mul y x alpha-0)))
      (send (exp (gen) (mul y x alpha-0))))
    ((recv (cat (exp (gen) (mul y-0 alpha-0)) (mul y x (rec y-0))))
      (send (cat (exp (gen) (mul y-0 alpha-0)) (mul y x (rec y-0)))))
    ((recv (enc "Group id" group (exp (gen) alpha-0) k-magic-0))
      (recv (enc a-0 b-0 group (exp (gen) alpha-1) (privk a-0)))
      (send
        (enc a-0 b-0 group (exp (gen) (mul y-0 alpha-0))
          (exp (gen) alpha-1) (privk b-0))))
    ((send (enc "Group id" group-0 (exp (gen) alpha-1) k-magic-1))))
  (label 74)
  (parent 46)
  (unrealized (4 0) (5 0))
  (dead)
  (comment "empty cohort"))

(defskeleton dh_sig2
  (vars (k-magic k-magic-0 skey) (n group text) (a b a-0 b-0 name)
    (alpha y x y-0 alpha-0 rndx))
  (defstrand init 5 (k-magic k-magic) (n n) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (x x) (y (mul (rec alpha) y alpha-0)))
  (defstrand group-init 1 (k-magic k-magic) (group group) (alpha alpha))
  (defstrand resp 3 (k-magic k-magic-0) (group group) (a a) (b b)
    (g (exp (gen) alpha-0)) (y y) (x (mul alpha x (rec alpha-0))))
  (defstrand group-init 1 (k-magic k-magic-0) (group group)
    (alpha alpha-0))
  (deflistener (exp (gen) (mul y x alpha-0)))
  (deflistener (cat (exp (gen) (mul y-0 alpha-0)) (mul y x (rec y-0))))
  (defstrand resp 3 (k-magic k-magic-0) (group group) (a a-0) (b b-0)
    (g (exp (gen) alpha-0)) (y y-0) (x (one)))
  (precedes ((0 1) (2 0)) ((1 0) (0 0)) ((2 2) (0 2)) ((2 2) (6 0))
    ((3 0) (2 0)) ((4 1) (0 4)) ((5 1) (4 0)) ((6 2) (5 0)))
  (non-orig k-magic k-magic-0 (privk a) (privk b))
  (uniq-gen n alpha y x y-0 alpha-0)
  (absent (y (mul alpha x (rec alpha-0))) (y-0 (one)))
  (precur (5 0))
  (operation nonce-test (displaced 7 3 group-init 1) (exp (gen) alpha-1)
    (6 1))
  (traces
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (send (enc a b group (exp (gen) (mul alpha x)) (privk a)))
      (recv
        (enc a b group (exp (gen) (mul y alpha-0))
          (exp (gen) (mul alpha x)) (privk b)))
      (send (enc n (exp (gen) (mul y x alpha-0)))) (recv n))
    ((send (enc "Group id" group (exp (gen) alpha) k-magic)))
    ((recv (enc "Group id" group (exp (gen) alpha-0) k-magic-0))
      (recv (enc a b group (exp (gen) (mul alpha x)) (privk a)))
      (send
        (enc a b group (exp (gen) (mul y alpha-0))
          (exp (gen) (mul alpha x)) (privk b))))
    ((send (enc "Group id" group (exp (gen) alpha-0) k-magic-0)))
    ((recv (exp (gen) (mul y x alpha-0)))
      (send (exp (gen) (mul y x alpha-0))))
    ((recv (cat (exp (gen) (mul y-0 alpha-0)) (mul y x (rec y-0))))
      (send (cat (exp (gen) (mul y-0 alpha-0)) (mul y x (rec y-0)))))
    ((recv (enc "Group id" group (exp (gen) alpha-0) k-magic-0))
      (recv (enc a-0 b-0 group (exp (gen) alpha-0) (privk a-0)))
      (send
        (enc a-0 b-0 group (exp (gen) (mul y-0 alpha-0))
          (exp (gen) alpha-0) (privk b-0)))))
  (label 75)
  (parent 46)
  (unrealized (4 0) (5 0) (6 1))
  (comment "3 in cohort - 3 not yet seen"))

(defskeleton dh_sig2
  (vars (k-magic k-magic-0 skey) (n group text) (a b a-0 b-0 name)
    (alpha y x y-0 alpha-0 rndx))
  (defstrand init 5 (k-magic k-magic) (n n) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (x x) (y (mul (rec alpha) y alpha-0)))
  (defstrand group-init 1 (k-magic k-magic) (group group) (alpha alpha))
  (defstrand resp 3 (k-magic k-magic-0) (group group) (a a) (b b)
    (g (exp (gen) alpha-0)) (y y) (x (mul alpha x (rec alpha-0))))
  (defstrand group-init 1 (k-magic k-magic-0) (group group)
    (alpha alpha-0))
  (deflistener (exp (gen) (mul y x alpha-0)))
  (deflistener (cat (exp (gen) (mul y-0 alpha-0)) (mul y x (rec y-0))))
  (defstrand resp 3 (k-magic k-magic-0) (group group) (a a-0) (b b-0)
    (g (exp (gen) alpha-0)) (y y-0) (x (rec alpha-0)))
  (precedes ((0 1) (2 0)) ((1 0) (0 0)) ((2 2) (0 2)) ((2 2) (6 0))
    ((3 0) (2 0)) ((4 1) (0 4)) ((5 1) (4 0)) ((6 2) (5 0)))
  (non-orig k-magic k-magic-0 (privk a) (privk b))
  (uniq-gen n alpha y x y-0 alpha-0)
  (absent (y (mul alpha x (rec alpha-0))) (y-0 (rec alpha-0)))
  (precur (5 0))
  (operation nonce-test
    (contracted (x-0 (rec alpha-0)) (alpha-1 alpha-0)) (gen) (6 1))
  (traces
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (send (enc a b group (exp (gen) (mul alpha x)) (privk a)))
      (recv
        (enc a b group (exp (gen) (mul y alpha-0))
          (exp (gen) (mul alpha x)) (privk b)))
      (send (enc n (exp (gen) (mul y x alpha-0)))) (recv n))
    ((send (enc "Group id" group (exp (gen) alpha) k-magic)))
    ((recv (enc "Group id" group (exp (gen) alpha-0) k-magic-0))
      (recv (enc a b group (exp (gen) (mul alpha x)) (privk a)))
      (send
        (enc a b group (exp (gen) (mul y alpha-0))
          (exp (gen) (mul alpha x)) (privk b))))
    ((send (enc "Group id" group (exp (gen) alpha-0) k-magic-0)))
    ((recv (exp (gen) (mul y x alpha-0)))
      (send (exp (gen) (mul y x alpha-0))))
    ((recv (cat (exp (gen) (mul y-0 alpha-0)) (mul y x (rec y-0))))
      (send (cat (exp (gen) (mul y-0 alpha-0)) (mul y x (rec y-0)))))
    ((recv (enc "Group id" group (exp (gen) alpha-0) k-magic-0))
      (recv (enc a-0 b-0 group (gen) (privk a-0)))
      (send
        (enc a-0 b-0 group (exp (gen) (mul y-0 alpha-0)) (gen)
          (privk b-0)))))
  (label 76)
  (parent 46)
  (unrealized (4 0) (5 0))
  (dead)
  (comment "empty cohort"))

(defskeleton dh_sig2
  (vars (k-magic k-magic-0 skey) (n group text) (a b a-0 b-0 name)
    (y x y-0 alpha alpha-0 rndx))
  (defstrand init 5 (k-magic k-magic) (n n) (group group) (a a) (b b)
    (g (exp (gen) alpha-0)) (x x) (y (mul y alpha (rec alpha-0))))
  (defstrand group-init 1 (k-magic k-magic) (group group)
    (alpha alpha-0))
  (defstrand resp 3 (k-magic k-magic-0) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (y y) (x (mul x (rec alpha) alpha-0)))
  (defstrand group-init 1 (k-magic k-magic-0) (group group)
    (alpha alpha))
  (deflistener (exp (gen) (mul y x alpha)))
  (deflistener (cat (exp (gen) (mul y-0 alpha)) (mul y x (rec y-0))))
  (defstrand resp 3 (k-magic k-magic-0) (group group) (a a-0) (b b-0)
    (g (exp (gen) alpha)) (y y-0) (x (mul (rec alpha) alpha-0)))
  (precedes ((0 1) (2 0)) ((1 0) (0 0)) ((2 2) (0 2)) ((2 2) (6 0))
    ((3 0) (2 0)) ((4 1) (0 4)) ((5 1) (4 0)) ((6 2) (5 0)))
  (non-orig k-magic k-magic-0 (privk a) (privk b))
  (uniq-gen n y x y-0 alpha alpha-0)
  (absent (y (mul x (rec alpha) alpha-0))
    (y-0 (mul (rec alpha) alpha-0)))
  (precur (5 0))
  (operation nonce-test (displaced 7 1 group-init 1) (exp (gen) alpha-1)
    (6 1))
  (traces
    ((recv (enc "Group id" group (exp (gen) alpha-0) k-magic))
      (send (enc a b group (exp (gen) (mul x alpha-0)) (privk a)))
      (recv
        (enc a b group (exp (gen) (mul y alpha))
          (exp (gen) (mul x alpha-0)) (privk b)))
      (send (enc n (exp (gen) (mul y x alpha)))) (recv n))
    ((send (enc "Group id" group (exp (gen) alpha-0) k-magic)))
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic-0))
      (recv (enc a b group (exp (gen) (mul x alpha-0)) (privk a)))
      (send
        (enc a b group (exp (gen) (mul y alpha))
          (exp (gen) (mul x alpha-0)) (privk b))))
    ((send (enc "Group id" group (exp (gen) alpha) k-magic-0)))
    ((recv (exp (gen) (mul y x alpha)))
      (send (exp (gen) (mul y x alpha))))
    ((recv (cat (exp (gen) (mul y-0 alpha)) (mul y x (rec y-0))))
      (send (cat (exp (gen) (mul y-0 alpha)) (mul y x (rec y-0)))))
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic-0))
      (recv (enc a-0 b-0 group (exp (gen) alpha-0) (privk a-0)))
      (send
        (enc a-0 b-0 group (exp (gen) (mul y-0 alpha))
          (exp (gen) alpha-0) (privk b-0)))))
  (label 77)
  (parent 46)
  (unrealized (4 0) (5 0) (6 1))
  (comment "3 in cohort - 3 not yet seen"))

(defskeleton dh_sig2
  (vars (k-magic k-magic-0 k-magic-1 skey) (n group group-0 text)
    (a b a-0 b-0 a-1 b-1 name) (alpha rndx) (x expt)
    (y x-0 y-0 alpha-0 x-1 rndx))
  (defstrand init 5 (k-magic k-magic) (n n) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (x x-0) (y (mul (rec alpha) y alpha-0)))
  (defstrand group-init 1 (k-magic k-magic) (group group) (alpha alpha))
  (defstrand resp 3 (k-magic k-magic-0) (group group) (a a) (b b)
    (g (exp (gen) alpha-0)) (y y) (x (mul alpha x-0 (rec alpha-0))))
  (defstrand group-init 1 (k-magic k-magic-0) (group group)
    (alpha alpha-0))
  (deflistener (exp (gen) (mul y x-0 alpha-0)))
  (deflistener
    (cat (exp (gen) (mul y-0 alpha-0)) (mul y x-0 (rec y-0))))
  (defstrand resp 3 (k-magic k-magic-0) (group group) (a a-0) (b b-0)
    (g (exp (gen) alpha-0)) (y y-0) (x x))
  (defstrand init 2 (k-magic k-magic-1) (group group-0) (a a-1) (b b-1)
    (g (exp (gen) (mul x alpha-0 (rec x-1)))) (x x-1))
  (precedes ((0 1) (2 0)) ((1 0) (0 0)) ((2 2) (0 2)) ((2 2) (6 0))
    ((3 0) (2 0)) ((3 0) (7 0)) ((4 1) (0 4)) ((5 1) (4 0))
    ((6 2) (5 0)) ((7 1) (6 1)))
  (non-orig k-magic k-magic-0 k-magic-1 (privk a) (privk b))
  (uniq-gen n alpha y x-0 y-0 alpha-0 x-1)
  (absent (y (mul alpha x-0 (rec alpha-0))) (y-0 x))
  (precur (5 0))
  (operation nonce-test (added-strand init 2)
    (exp (gen) (mul x alpha-0)) (6 1))
  (traces
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (send (enc a b group (exp (gen) (mul alpha x-0)) (privk a)))
      (recv
        (enc a b group (exp (gen) (mul y alpha-0))
          (exp (gen) (mul alpha x-0)) (privk b)))
      (send (enc n (exp (gen) (mul y x-0 alpha-0)))) (recv n))
    ((send (enc "Group id" group (exp (gen) alpha) k-magic)))
    ((recv (enc "Group id" group (exp (gen) alpha-0) k-magic-0))
      (recv (enc a b group (exp (gen) (mul alpha x-0)) (privk a)))
      (send
        (enc a b group (exp (gen) (mul y alpha-0))
          (exp (gen) (mul alpha x-0)) (privk b))))
    ((send (enc "Group id" group (exp (gen) alpha-0) k-magic-0)))
    ((recv (exp (gen) (mul y x-0 alpha-0)))
      (send (exp (gen) (mul y x-0 alpha-0))))
    ((recv (cat (exp (gen) (mul y-0 alpha-0)) (mul y x-0 (rec y-0))))
      (send (cat (exp (gen) (mul y-0 alpha-0)) (mul y x-0 (rec y-0)))))
    ((recv (enc "Group id" group (exp (gen) alpha-0) k-magic-0))
      (recv (enc a-0 b-0 group (exp (gen) (mul x alpha-0)) (privk a-0)))
      (send
        (enc a-0 b-0 group (exp (gen) (mul y-0 alpha-0))
          (exp (gen) (mul x alpha-0)) (privk b-0))))
    ((recv
       (enc "Group id" group-0 (exp (gen) (mul x alpha-0 (rec x-1)))
         k-magic-1))
      (send
        (enc a-1 b-1 group-0 (exp (gen) (mul x alpha-0)) (privk a-1)))))
  (label 78)
  (parent 46)
  (unrealized (4 0) (5 0) (7 0))
  (comment "3 in cohort - 3 not yet seen"))

(defskeleton dh_sig2
  (vars (k-magic k-magic-0 skey) (n group text) (a b a-0 b-0 name)
    (y y-0 alpha alpha-0 x rndx))
  (defstrand init 5 (k-magic k-magic) (n n) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (x x) (y (mul y (rec alpha) alpha-0)))
  (defstrand group-init 1 (k-magic k-magic) (group group) (alpha alpha))
  (defstrand resp 3 (k-magic k-magic-0) (group group) (a a) (b b)
    (g (exp (gen) alpha-0)) (y y) (x (mul alpha (rec alpha-0) x)))
  (defstrand group-init 1 (k-magic k-magic-0) (group group)
    (alpha alpha-0))
  (deflistener (exp (gen) (mul y alpha-0 x)))
  (deflistener (cat (exp (gen) (mul y-0 alpha-0)) (mul y (rec y-0) x)))
  (defstrand resp 3 (k-magic k-magic-0) (group group) (a a-0) (b b-0)
    (g (exp (gen) alpha-0)) (y y-0) (x (mul alpha (rec alpha-0) x)))
  (precedes ((0 1) (2 0)) ((1 0) (0 0)) ((2 2) (0 2)) ((2 2) (6 0))
    ((3 0) (2 0)) ((4 1) (0 4)) ((5 1) (4 0)) ((6 2) (5 0)))
  (non-orig k-magic k-magic-0 (privk a) (privk b))
  (uniq-gen n y y-0 alpha alpha-0 x)
  (absent (y (mul alpha (rec alpha-0) x))
    (y-0 (mul alpha (rec alpha-0) x)))
  (precur (5 0))
  (operation nonce-test (displaced 7 0 init 2)
    (exp (gen) (mul x-0 alpha-1)) (6 1))
  (traces
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (send (enc a b group (exp (gen) (mul alpha x)) (privk a)))
      (recv
        (enc a b group (exp (gen) (mul y alpha-0))
          (exp (gen) (mul alpha x)) (privk b)))
      (send (enc n (exp (gen) (mul y alpha-0 x)))) (recv n))
    ((send (enc "Group id" group (exp (gen) alpha) k-magic)))
    ((recv (enc "Group id" group (exp (gen) alpha-0) k-magic-0))
      (recv (enc a b group (exp (gen) (mul alpha x)) (privk a)))
      (send
        (enc a b group (exp (gen) (mul y alpha-0))
          (exp (gen) (mul alpha x)) (privk b))))
    ((send (enc "Group id" group (exp (gen) alpha-0) k-magic-0)))
    ((recv (exp (gen) (mul y alpha-0 x)))
      (send (exp (gen) (mul y alpha-0 x))))
    ((recv (cat (exp (gen) (mul y-0 alpha-0)) (mul y (rec y-0) x)))
      (send (cat (exp (gen) (mul y-0 alpha-0)) (mul y (rec y-0) x))))
    ((recv (enc "Group id" group (exp (gen) alpha-0) k-magic-0))
      (recv (enc a-0 b-0 group (exp (gen) (mul alpha x)) (privk a-0)))
      (send
        (enc a-0 b-0 group (exp (gen) (mul y-0 alpha-0))
          (exp (gen) (mul alpha x)) (privk b-0)))))
  (label 79)
  (parent 46)
  (unrealized (4 0) (5 0))
  (dead)
  (comment "empty cohort"))

(defskeleton dh_sig2
  (vars (k-magic k-magic-0 skey) (n group text) (a b a-0 b-0 name)
    (y alpha x alpha-0 y-0 rndx))
  (defstrand init 5 (k-magic k-magic) (n n) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (x x) (y (mul (rec alpha) alpha-0 y-0)))
  (defstrand group-init 1 (k-magic k-magic) (group group) (alpha alpha))
  (defstrand resp 3 (k-magic k-magic-0) (group group) (a a) (b b)
    (g (exp (gen) alpha-0)) (y y-0) (x (mul alpha x (rec alpha-0))))
  (defstrand group-init 1 (k-magic k-magic-0) (group group)
    (alpha alpha-0))
  (deflistener (exp (gen) (mul x alpha-0 y-0)))
  (deflistener (cat (exp (gen) (mul y alpha-0)) (mul (rec y) x y-0)))
  (defstrand resp 3 (k-magic k-magic-0) (group group) (a a-0) (b b-0)
    (g (exp (gen) alpha-0)) (y y) (x y-0))
  (precedes ((0 1) (2 0)) ((1 0) (0 0)) ((2 2) (0 2)) ((2 2) (6 0))
    ((3 0) (2 0)) ((4 1) (0 4)) ((5 1) (4 0)) ((6 2) (5 0)))
  (non-orig k-magic k-magic-0 (privk a) (privk b))
  (uniq-gen n y alpha x alpha-0 y-0)
  (absent (y y-0) (y-0 (mul alpha x (rec alpha-0))))
  (precur (5 0))
  (operation nonce-test (displaced 7 2 resp 3)
    (exp (gen) (mul x-0 alpha-1)) (6 1))
  (traces
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (send (enc a b group (exp (gen) (mul alpha x)) (privk a)))
      (recv
        (enc a b group (exp (gen) (mul alpha-0 y-0))
          (exp (gen) (mul alpha x)) (privk b)))
      (send (enc n (exp (gen) (mul x alpha-0 y-0)))) (recv n))
    ((send (enc "Group id" group (exp (gen) alpha) k-magic)))
    ((recv (enc "Group id" group (exp (gen) alpha-0) k-magic-0))
      (recv (enc a b group (exp (gen) (mul alpha x)) (privk a)))
      (send
        (enc a b group (exp (gen) (mul alpha-0 y-0))
          (exp (gen) (mul alpha x)) (privk b))))
    ((send (enc "Group id" group (exp (gen) alpha-0) k-magic-0)))
    ((recv (exp (gen) (mul x alpha-0 y-0)))
      (send (exp (gen) (mul x alpha-0 y-0))))
    ((recv (cat (exp (gen) (mul y alpha-0)) (mul (rec y) x y-0)))
      (send (cat (exp (gen) (mul y alpha-0)) (mul (rec y) x y-0))))
    ((recv (enc "Group id" group (exp (gen) alpha-0) k-magic-0))
      (recv
        (enc a-0 b-0 group (exp (gen) (mul alpha-0 y-0)) (privk a-0)))
      (send
        (enc a-0 b-0 group (exp (gen) (mul y alpha-0))
          (exp (gen) (mul alpha-0 y-0)) (privk b-0)))))
  (label 80)
  (parent 46)
  (unrealized (4 0) (5 0))
  (dead)
  (comment "empty cohort"))

(defskeleton dh_sig2
  (vars (k-magic k-magic-0 k-magic-1 skey) (n group group-0 text)
    (a b a-0 b-0 a-1 b-1 name) (alpha rndx) (x expt)
    (y x-0 y-0 alpha-0 y-1 rndx) (x-1 expt))
  (defstrand init 5 (k-magic k-magic) (n n) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (x x-0) (y (mul (rec alpha) y alpha-0)))
  (defstrand group-init 1 (k-magic k-magic) (group group) (alpha alpha))
  (defstrand resp 3 (k-magic k-magic-0) (group group) (a a) (b b)
    (g (exp (gen) alpha-0)) (y y) (x (mul alpha x-0 (rec alpha-0))))
  (defstrand group-init 1 (k-magic k-magic-0) (group group)
    (alpha alpha-0))
  (deflistener (exp (gen) (mul y x-0 alpha-0)))
  (deflistener
    (cat (exp (gen) (mul y-0 alpha-0)) (mul y x-0 (rec y-0))))
  (defstrand resp 3 (k-magic k-magic-0) (group group) (a a-0) (b b-0)
    (g (exp (gen) alpha-0)) (y y-0) (x x))
  (defstrand resp 3 (k-magic k-magic-1) (group group-0) (a a-1) (b b-1)
    (g (exp (gen) (mul x alpha-0 (rec y-1)))) (y y-1) (x x-1))
  (precedes ((0 1) (2 0)) ((1 0) (0 0)) ((2 2) (0 2)) ((2 2) (6 0))
    ((3 0) (2 0)) ((3 0) (7 0)) ((4 1) (0 4)) ((5 1) (4 0))
    ((6 2) (5 0)) ((7 2) (6 1)))
  (non-orig k-magic k-magic-0 k-magic-1 (privk a) (privk b))
  (uniq-gen n alpha y x-0 y-0 alpha-0 y-1)
  (absent (y (mul alpha x-0 (rec alpha-0))) (y-0 x) (y-1 x-1))
  (precur (5 0))
  (operation nonce-test (added-strand resp 3)
    (exp (gen) (mul x alpha-0)) (6 1))
  (traces
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (send (enc a b group (exp (gen) (mul alpha x-0)) (privk a)))
      (recv
        (enc a b group (exp (gen) (mul y alpha-0))
          (exp (gen) (mul alpha x-0)) (privk b)))
      (send (enc n (exp (gen) (mul y x-0 alpha-0)))) (recv n))
    ((send (enc "Group id" group (exp (gen) alpha) k-magic)))
    ((recv (enc "Group id" group (exp (gen) alpha-0) k-magic-0))
      (recv (enc a b group (exp (gen) (mul alpha x-0)) (privk a)))
      (send
        (enc a b group (exp (gen) (mul y alpha-0))
          (exp (gen) (mul alpha x-0)) (privk b))))
    ((send (enc "Group id" group (exp (gen) alpha-0) k-magic-0)))
    ((recv (exp (gen) (mul y x-0 alpha-0)))
      (send (exp (gen) (mul y x-0 alpha-0))))
    ((recv (cat (exp (gen) (mul y-0 alpha-0)) (mul y x-0 (rec y-0))))
      (send (cat (exp (gen) (mul y-0 alpha-0)) (mul y x-0 (rec y-0)))))
    ((recv (enc "Group id" group (exp (gen) alpha-0) k-magic-0))
      (recv (enc a-0 b-0 group (exp (gen) (mul x alpha-0)) (privk a-0)))
      (send
        (enc a-0 b-0 group (exp (gen) (mul y-0 alpha-0))
          (exp (gen) (mul x alpha-0)) (privk b-0))))
    ((recv
       (enc "Group id" group-0 (exp (gen) (mul x alpha-0 (rec y-1)))
         k-magic-1))
      (recv
        (enc a-1 b-1 group-0 (exp (gen) (mul x alpha-0 (rec y-1) x-1))
          (privk a-1)))
      (send
        (enc a-1 b-1 group-0 (exp (gen) (mul x alpha-0))
          (exp (gen) (mul x alpha-0 (rec y-1) x-1)) (privk b-1)))))
  (label 81)
  (parent 46)
  (unrealized (4 0) (5 0) (7 0) (7 1))
  (comment "3 in cohort - 3 not yet seen"))

(defskeleton dh_sig2
  (vars (k-magic k-magic-0 skey) (n group text) (a b a-0 b-0 name)
    (alpha rndx) (x expt) (y x-0 y-0 alpha-0 rndx) (w expt))
  (defstrand init 5 (k-magic k-magic) (n n) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (x x-0) (y (mul (rec alpha) y alpha-0)))
  (defstrand group-init 1 (k-magic k-magic) (group group) (alpha alpha))
  (defstrand resp 3 (k-magic k-magic-0) (group group) (a a) (b b)
    (g (exp (gen) alpha-0)) (y y) (x (mul alpha x-0 (rec alpha-0))))
  (defstrand group-init 1 (k-magic k-magic-0) (group group)
    (alpha alpha-0))
  (deflistener (exp (gen) (mul y x-0 alpha-0)))
  (deflistener
    (cat (exp (gen) (mul y-0 alpha-0)) (mul y x-0 (rec y-0))))
  (defstrand resp 3 (k-magic k-magic-0) (group group) (a a-0) (b b-0)
    (g (exp (gen) alpha-0)) (y y-0) (x x))
  (deflistener (cat (exp (gen) (mul x alpha-0 (rec w))) w))
  (precedes ((0 1) (2 0)) ((1 0) (0 0)) ((2 2) (0 2)) ((2 2) (6 0))
    ((3 0) (2 0)) ((3 0) (7 0)) ((4 1) (0 4)) ((5 1) (4 0))
    ((6 2) (5 0)) ((7 1) (6 1)))
  (non-orig k-magic k-magic-0 (privk a) (privk b))
  (uniq-gen n alpha y x-0 y-0 alpha-0)
  (absent (y (mul alpha x-0 (rec alpha-0))) (y-0 x))
  (precur (5 0) (7 0))
  (operation nonce-test
    (added-listener (cat (exp (gen) (mul x alpha-0 (rec w))) w))
    (exp (gen) (mul x alpha-0)) (6 1))
  (traces
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (send (enc a b group (exp (gen) (mul alpha x-0)) (privk a)))
      (recv
        (enc a b group (exp (gen) (mul y alpha-0))
          (exp (gen) (mul alpha x-0)) (privk b)))
      (send (enc n (exp (gen) (mul y x-0 alpha-0)))) (recv n))
    ((send (enc "Group id" group (exp (gen) alpha) k-magic)))
    ((recv (enc "Group id" group (exp (gen) alpha-0) k-magic-0))
      (recv (enc a b group (exp (gen) (mul alpha x-0)) (privk a)))
      (send
        (enc a b group (exp (gen) (mul y alpha-0))
          (exp (gen) (mul alpha x-0)) (privk b))))
    ((send (enc "Group id" group (exp (gen) alpha-0) k-magic-0)))
    ((recv (exp (gen) (mul y x-0 alpha-0)))
      (send (exp (gen) (mul y x-0 alpha-0))))
    ((recv (cat (exp (gen) (mul y-0 alpha-0)) (mul y x-0 (rec y-0))))
      (send (cat (exp (gen) (mul y-0 alpha-0)) (mul y x-0 (rec y-0)))))
    ((recv (enc "Group id" group (exp (gen) alpha-0) k-magic-0))
      (recv (enc a-0 b-0 group (exp (gen) (mul x alpha-0)) (privk a-0)))
      (send
        (enc a-0 b-0 group (exp (gen) (mul y-0 alpha-0))
          (exp (gen) (mul x alpha-0)) (privk b-0))))
    ((recv (cat (exp (gen) (mul x alpha-0 (rec w))) w))
      (send (cat (exp (gen) (mul x alpha-0 (rec w))) w))))
  (label 82)
  (parent 46)
  (unrealized (4 0) (5 0) (7 0))
  (comment "8 in cohort - 8 not yet seen"))

(defskeleton dh_sig2
  (vars (k-magic k-magic-0 k-magic-1 k-magic-2 skey)
    (n group group-0 group-1 text) (a b a-0 b-0 name)
    (alpha y x alpha-0 y-0 alpha-1 alpha-2 rndx))
  (defstrand init 5 (k-magic k-magic) (n n) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (x x) (y (mul (rec alpha) y alpha-0)))
  (defstrand group-init 1 (k-magic k-magic) (group group) (alpha alpha))
  (defstrand resp 3 (k-magic k-magic-0) (group group) (a a) (b b)
    (g (exp (gen) alpha-0)) (y y) (x (mul alpha x (rec alpha-0))))
  (defstrand group-init 1 (k-magic k-magic-0) (group group)
    (alpha alpha-0))
  (deflistener (exp (gen) (mul y x alpha-0)))
  (deflistener
    (cat (exp (gen) (mul y-0 alpha-1))
      (mul y x alpha-0 (rec y-0) (rec alpha-1))))
  (defstrand resp 3 (k-magic k-magic-1) (group group-0) (a a-0) (b b-0)
    (g (exp (gen) alpha-1)) (y y-0) (x (mul (rec alpha-1) alpha-2)))
  (defstrand group-init 1 (k-magic k-magic-1) (group group-0)
    (alpha alpha-1))
  (defstrand group-init 1 (k-magic k-magic-2) (group group-1)
    (alpha alpha-2))
  (precedes ((0 1) (2 0)) ((1 0) (0 0)) ((2 2) (0 2)) ((2 2) (6 0))
    ((3 0) (2 0)) ((4 1) (0 4)) ((5 1) (4 0)) ((6 2) (5 0))
    ((7 0) (6 0)) ((8 0) (6 1)))
  (non-orig k-magic k-magic-0 k-magic-1 (privk a) (privk b))
  (uniq-gen n alpha y x alpha-0 y-0 alpha-1 alpha-2)
  (absent (y (mul alpha x (rec alpha-0)))
    (y-0 (mul (rec alpha-1) alpha-2)))
  (precur (5 0))
  (operation nonce-test (added-strand group-init 1) (exp (gen) alpha-2)
    (6 1))
  (traces
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (send (enc a b group (exp (gen) (mul alpha x)) (privk a)))
      (recv
        (enc a b group (exp (gen) (mul y alpha-0))
          (exp (gen) (mul alpha x)) (privk b)))
      (send (enc n (exp (gen) (mul y x alpha-0)))) (recv n))
    ((send (enc "Group id" group (exp (gen) alpha) k-magic)))
    ((recv (enc "Group id" group (exp (gen) alpha-0) k-magic-0))
      (recv (enc a b group (exp (gen) (mul alpha x)) (privk a)))
      (send
        (enc a b group (exp (gen) (mul y alpha-0))
          (exp (gen) (mul alpha x)) (privk b))))
    ((send (enc "Group id" group (exp (gen) alpha-0) k-magic-0)))
    ((recv (exp (gen) (mul y x alpha-0)))
      (send (exp (gen) (mul y x alpha-0))))
    ((recv
       (cat (exp (gen) (mul y-0 alpha-1))
         (mul y x alpha-0 (rec y-0) (rec alpha-1))))
      (send
        (cat (exp (gen) (mul y-0 alpha-1))
          (mul y x alpha-0 (rec y-0) (rec alpha-1)))))
    ((recv (enc "Group id" group-0 (exp (gen) alpha-1) k-magic-1))
      (recv (enc a-0 b-0 group-0 (exp (gen) alpha-2) (privk a-0)))
      (send
        (enc a-0 b-0 group-0 (exp (gen) (mul y-0 alpha-1))
          (exp (gen) alpha-2) (privk b-0))))
    ((send (enc "Group id" group-0 (exp (gen) alpha-1) k-magic-1)))
    ((send (enc "Group id" group-1 (exp (gen) alpha-2) k-magic-2))))
  (label 83)
  (parent 47)
  (unrealized (4 0) (5 0))
  (dead)
  (comment "empty cohort"))

(defskeleton dh_sig2
  (vars (k-magic k-magic-0 k-magic-1 skey) (n group group-0 text)
    (a b a-0 b-0 name) (alpha y x alpha-0 y-0 alpha-1 rndx))
  (defstrand init 5 (k-magic k-magic) (n n) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (x x) (y (mul (rec alpha) y alpha-0)))
  (defstrand group-init 1 (k-magic k-magic) (group group) (alpha alpha))
  (defstrand resp 3 (k-magic k-magic-0) (group group) (a a) (b b)
    (g (exp (gen) alpha-0)) (y y) (x (mul alpha x (rec alpha-0))))
  (defstrand group-init 1 (k-magic k-magic-0) (group group)
    (alpha alpha-0))
  (deflistener (exp (gen) (mul y x alpha-0)))
  (deflistener
    (cat (exp (gen) (mul y-0 alpha-1))
      (mul y x alpha-0 (rec y-0) (rec alpha-1))))
  (defstrand resp 3 (k-magic k-magic-1) (group group-0) (a a-0) (b b-0)
    (g (exp (gen) alpha-1)) (y y-0) (x (one)))
  (defstrand group-init 1 (k-magic k-magic-1) (group group-0)
    (alpha alpha-1))
  (precedes ((0 1) (2 0)) ((1 0) (0 0)) ((2 2) (0 2)) ((2 2) (6 0))
    ((3 0) (2 0)) ((4 1) (0 4)) ((5 1) (4 0)) ((6 2) (5 0))
    ((7 0) (6 0)))
  (non-orig k-magic k-magic-0 k-magic-1 (privk a) (privk b))
  (uniq-gen n alpha y x alpha-0 y-0 alpha-1)
  (absent (y (mul alpha x (rec alpha-0))) (y-0 (one)))
  (precur (5 0))
  (operation nonce-test (displaced 8 7 group-init 1) (exp (gen) alpha-2)
    (6 1))
  (traces
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (send (enc a b group (exp (gen) (mul alpha x)) (privk a)))
      (recv
        (enc a b group (exp (gen) (mul y alpha-0))
          (exp (gen) (mul alpha x)) (privk b)))
      (send (enc n (exp (gen) (mul y x alpha-0)))) (recv n))
    ((send (enc "Group id" group (exp (gen) alpha) k-magic)))
    ((recv (enc "Group id" group (exp (gen) alpha-0) k-magic-0))
      (recv (enc a b group (exp (gen) (mul alpha x)) (privk a)))
      (send
        (enc a b group (exp (gen) (mul y alpha-0))
          (exp (gen) (mul alpha x)) (privk b))))
    ((send (enc "Group id" group (exp (gen) alpha-0) k-magic-0)))
    ((recv (exp (gen) (mul y x alpha-0)))
      (send (exp (gen) (mul y x alpha-0))))
    ((recv
       (cat (exp (gen) (mul y-0 alpha-1))
         (mul y x alpha-0 (rec y-0) (rec alpha-1))))
      (send
        (cat (exp (gen) (mul y-0 alpha-1))
          (mul y x alpha-0 (rec y-0) (rec alpha-1)))))
    ((recv (enc "Group id" group-0 (exp (gen) alpha-1) k-magic-1))
      (recv (enc a-0 b-0 group-0 (exp (gen) alpha-1) (privk a-0)))
      (send
        (enc a-0 b-0 group-0 (exp (gen) (mul y-0 alpha-1))
          (exp (gen) alpha-1) (privk b-0))))
    ((send (enc "Group id" group-0 (exp (gen) alpha-1) k-magic-1))))
  (label 84)
  (parent 47)
  (unrealized (4 0) (5 0) (6 1))
  (comment "3 in cohort - 3 not yet seen"))

(defskeleton dh_sig2
  (vars (k-magic k-magic-0 k-magic-1 skey) (n group group-0 text)
    (a b a-0 b-0 name) (alpha y x y-0 alpha-0 alpha-1 rndx))
  (defstrand init 5 (k-magic k-magic) (n n) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (x x) (y (mul (rec alpha) y alpha-1)))
  (defstrand group-init 1 (k-magic k-magic) (group group) (alpha alpha))
  (defstrand resp 3 (k-magic k-magic-0) (group group) (a a) (b b)
    (g (exp (gen) alpha-1)) (y y) (x (mul alpha x (rec alpha-1))))
  (defstrand group-init 1 (k-magic k-magic-0) (group group)
    (alpha alpha-1))
  (deflistener (exp (gen) (mul y x alpha-1)))
  (deflistener
    (cat (exp (gen) (mul y-0 alpha-0))
      (mul y x (rec y-0) (rec alpha-0) alpha-1)))
  (defstrand resp 3 (k-magic k-magic-1) (group group-0) (a a-0) (b b-0)
    (g (exp (gen) alpha-0)) (y y-0) (x (mul (rec alpha-0) alpha-1)))
  (defstrand group-init 1 (k-magic k-magic-1) (group group-0)
    (alpha alpha-0))
  (precedes ((0 1) (2 0)) ((1 0) (0 0)) ((2 2) (0 2)) ((2 2) (6 0))
    ((3 0) (2 0)) ((4 1) (0 4)) ((5 1) (4 0)) ((6 2) (5 0))
    ((7 0) (6 0)))
  (non-orig k-magic k-magic-0 k-magic-1 (privk a) (privk b))
  (uniq-gen n alpha y x y-0 alpha-0 alpha-1)
  (absent (y (mul alpha x (rec alpha-1)))
    (y-0 (mul (rec alpha-0) alpha-1)))
  (precur (5 0))
  (operation nonce-test (displaced 8 3 group-init 1) (exp (gen) alpha-2)
    (6 1))
  (traces
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (send (enc a b group (exp (gen) (mul alpha x)) (privk a)))
      (recv
        (enc a b group (exp (gen) (mul y alpha-1))
          (exp (gen) (mul alpha x)) (privk b)))
      (send (enc n (exp (gen) (mul y x alpha-1)))) (recv n))
    ((send (enc "Group id" group (exp (gen) alpha) k-magic)))
    ((recv (enc "Group id" group (exp (gen) alpha-1) k-magic-0))
      (recv (enc a b group (exp (gen) (mul alpha x)) (privk a)))
      (send
        (enc a b group (exp (gen) (mul y alpha-1))
          (exp (gen) (mul alpha x)) (privk b))))
    ((send (enc "Group id" group (exp (gen) alpha-1) k-magic-0)))
    ((recv (exp (gen) (mul y x alpha-1)))
      (send (exp (gen) (mul y x alpha-1))))
    ((recv
       (cat (exp (gen) (mul y-0 alpha-0))
         (mul y x (rec y-0) (rec alpha-0) alpha-1)))
      (send
        (cat (exp (gen) (mul y-0 alpha-0))
          (mul y x (rec y-0) (rec alpha-0) alpha-1))))
    ((recv (enc "Group id" group-0 (exp (gen) alpha-0) k-magic-1))
      (recv (enc a-0 b-0 group-0 (exp (gen) alpha-1) (privk a-0)))
      (send
        (enc a-0 b-0 group-0 (exp (gen) (mul y-0 alpha-0))
          (exp (gen) alpha-1) (privk b-0))))
    ((send (enc "Group id" group-0 (exp (gen) alpha-0) k-magic-1))))
  (label 85)
  (parent 47)
  (unrealized (4 0) (5 0) (6 1))
  (comment "3 in cohort - 3 not yet seen"))

(defskeleton dh_sig2
  (vars (k-magic k-magic-0 k-magic-1 skey) (n group group-0 text)
    (a b a-0 b-0 name) (alpha y x alpha-0 y-0 alpha-1 rndx))
  (defstrand init 5 (k-magic k-magic) (n n) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (x x) (y (mul (rec alpha) y alpha-0)))
  (defstrand group-init 1 (k-magic k-magic) (group group) (alpha alpha))
  (defstrand resp 3 (k-magic k-magic-0) (group group) (a a) (b b)
    (g (exp (gen) alpha-0)) (y y) (x (mul alpha x (rec alpha-0))))
  (defstrand group-init 1 (k-magic k-magic-0) (group group)
    (alpha alpha-0))
  (deflistener (exp (gen) (mul y x alpha-0)))
  (deflistener
    (cat (exp (gen) (mul y-0 alpha-1))
      (mul y x alpha-0 (rec y-0) (rec alpha-1))))
  (defstrand resp 3 (k-magic k-magic-1) (group group-0) (a a-0) (b b-0)
    (g (exp (gen) alpha-1)) (y y-0) (x (rec alpha-1)))
  (defstrand group-init 1 (k-magic k-magic-1) (group group-0)
    (alpha alpha-1))
  (precedes ((0 1) (2 0)) ((1 0) (0 0)) ((2 2) (0 2)) ((2 2) (6 0))
    ((3 0) (2 0)) ((4 1) (0 4)) ((5 1) (4 0)) ((6 2) (5 0))
    ((7 0) (6 0)))
  (non-orig k-magic k-magic-0 k-magic-1 (privk a) (privk b))
  (uniq-gen n alpha y x alpha-0 y-0 alpha-1)
  (absent (y (mul alpha x (rec alpha-0))) (y-0 (rec alpha-1)))
  (precur (5 0))
  (operation nonce-test
    (contracted (x-0 (rec alpha-1)) (alpha-2 alpha-1)) (gen) (6 1))
  (traces
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (send (enc a b group (exp (gen) (mul alpha x)) (privk a)))
      (recv
        (enc a b group (exp (gen) (mul y alpha-0))
          (exp (gen) (mul alpha x)) (privk b)))
      (send (enc n (exp (gen) (mul y x alpha-0)))) (recv n))
    ((send (enc "Group id" group (exp (gen) alpha) k-magic)))
    ((recv (enc "Group id" group (exp (gen) alpha-0) k-magic-0))
      (recv (enc a b group (exp (gen) (mul alpha x)) (privk a)))
      (send
        (enc a b group (exp (gen) (mul y alpha-0))
          (exp (gen) (mul alpha x)) (privk b))))
    ((send (enc "Group id" group (exp (gen) alpha-0) k-magic-0)))
    ((recv (exp (gen) (mul y x alpha-0)))
      (send (exp (gen) (mul y x alpha-0))))
    ((recv
       (cat (exp (gen) (mul y-0 alpha-1))
         (mul y x alpha-0 (rec y-0) (rec alpha-1))))
      (send
        (cat (exp (gen) (mul y-0 alpha-1))
          (mul y x alpha-0 (rec y-0) (rec alpha-1)))))
    ((recv (enc "Group id" group-0 (exp (gen) alpha-1) k-magic-1))
      (recv (enc a-0 b-0 group-0 (gen) (privk a-0)))
      (send
        (enc a-0 b-0 group-0 (exp (gen) (mul y-0 alpha-1)) (gen)
          (privk b-0))))
    ((send (enc "Group id" group-0 (exp (gen) alpha-1) k-magic-1))))
  (label 86)
  (parent 47)
  (unrealized (4 0) (5 0))
  (dead)
  (comment "empty cohort"))

(defskeleton dh_sig2
  (vars (k-magic k-magic-0 k-magic-1 skey) (n group group-0 text)
    (a b a-0 b-0 name) (y x alpha y-0 alpha-0 alpha-1 rndx))
  (defstrand init 5 (k-magic k-magic) (n n) (group group) (a a) (b b)
    (g (exp (gen) alpha-1)) (x x) (y (mul y alpha (rec alpha-1))))
  (defstrand group-init 1 (k-magic k-magic) (group group)
    (alpha alpha-1))
  (defstrand resp 3 (k-magic k-magic-0) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (y y) (x (mul x (rec alpha) alpha-1)))
  (defstrand group-init 1 (k-magic k-magic-0) (group group)
    (alpha alpha))
  (deflistener (exp (gen) (mul y x alpha)))
  (deflistener
    (cat (exp (gen) (mul y-0 alpha-0))
      (mul y x alpha (rec y-0) (rec alpha-0))))
  (defstrand resp 3 (k-magic k-magic-1) (group group-0) (a a-0) (b b-0)
    (g (exp (gen) alpha-0)) (y y-0) (x (mul (rec alpha-0) alpha-1)))
  (defstrand group-init 1 (k-magic k-magic-1) (group group-0)
    (alpha alpha-0))
  (precedes ((0 1) (2 0)) ((1 0) (0 0)) ((2 2) (0 2)) ((2 2) (6 0))
    ((3 0) (2 0)) ((4 1) (0 4)) ((5 1) (4 0)) ((6 2) (5 0))
    ((7 0) (6 0)))
  (non-orig k-magic k-magic-0 k-magic-1 (privk a) (privk b))
  (uniq-gen n y x alpha y-0 alpha-0 alpha-1)
  (absent (y (mul x (rec alpha) alpha-1))
    (y-0 (mul (rec alpha-0) alpha-1)))
  (precur (5 0))
  (operation nonce-test (displaced 8 1 group-init 1) (exp (gen) alpha-2)
    (6 1))
  (traces
    ((recv (enc "Group id" group (exp (gen) alpha-1) k-magic))
      (send (enc a b group (exp (gen) (mul x alpha-1)) (privk a)))
      (recv
        (enc a b group (exp (gen) (mul y alpha))
          (exp (gen) (mul x alpha-1)) (privk b)))
      (send (enc n (exp (gen) (mul y x alpha)))) (recv n))
    ((send (enc "Group id" group (exp (gen) alpha-1) k-magic)))
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic-0))
      (recv (enc a b group (exp (gen) (mul x alpha-1)) (privk a)))
      (send
        (enc a b group (exp (gen) (mul y alpha))
          (exp (gen) (mul x alpha-1)) (privk b))))
    ((send (enc "Group id" group (exp (gen) alpha) k-magic-0)))
    ((recv (exp (gen) (mul y x alpha)))
      (send (exp (gen) (mul y x alpha))))
    ((recv
       (cat (exp (gen) (mul y-0 alpha-0))
         (mul y x alpha (rec y-0) (rec alpha-0))))
      (send
        (cat (exp (gen) (mul y-0 alpha-0))
          (mul y x alpha (rec y-0) (rec alpha-0)))))
    ((recv (enc "Group id" group-0 (exp (gen) alpha-0) k-magic-1))
      (recv (enc a-0 b-0 group-0 (exp (gen) alpha-1) (privk a-0)))
      (send
        (enc a-0 b-0 group-0 (exp (gen) (mul y-0 alpha-0))
          (exp (gen) alpha-1) (privk b-0))))
    ((send (enc "Group id" group-0 (exp (gen) alpha-0) k-magic-1))))
  (label 87)
  (parent 47)
  (unrealized (4 0) (5 0) (6 1))
  (comment "3 in cohort - 3 not yet seen"))

(defskeleton dh_sig2
  (vars (k-magic k-magic-0 k-magic-1 k-magic-2 skey)
    (n group group-0 group-1 text) (a b a-0 b-0 a-1 b-1 name)
    (alpha rndx) (x expt) (y x-0 alpha-0 y-0 alpha-1 x-1 rndx))
  (defstrand init 5 (k-magic k-magic) (n n) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (x x-0) (y (mul (rec alpha) y alpha-0)))
  (defstrand group-init 1 (k-magic k-magic) (group group) (alpha alpha))
  (defstrand resp 3 (k-magic k-magic-0) (group group) (a a) (b b)
    (g (exp (gen) alpha-0)) (y y) (x (mul alpha x-0 (rec alpha-0))))
  (defstrand group-init 1 (k-magic k-magic-0) (group group)
    (alpha alpha-0))
  (deflistener (exp (gen) (mul y x-0 alpha-0)))
  (deflistener
    (cat (exp (gen) (mul y-0 alpha-1))
      (mul y x-0 alpha-0 (rec y-0) (rec alpha-1))))
  (defstrand resp 3 (k-magic k-magic-1) (group group-0) (a a-0) (b b-0)
    (g (exp (gen) alpha-1)) (y y-0) (x x))
  (defstrand group-init 1 (k-magic k-magic-1) (group group-0)
    (alpha alpha-1))
  (defstrand init 2 (k-magic k-magic-2) (group group-1) (a a-1) (b b-1)
    (g (exp (gen) (mul x alpha-1 (rec x-1)))) (x x-1))
  (precedes ((0 1) (2 0)) ((1 0) (0 0)) ((2 2) (0 2)) ((2 2) (6 0))
    ((3 0) (2 0)) ((4 1) (0 4)) ((5 1) (4 0)) ((6 2) (5 0))
    ((7 0) (6 0)) ((7 0) (8 0)) ((8 1) (6 1)))
  (non-orig k-magic k-magic-0 k-magic-1 k-magic-2 (privk a) (privk b))
  (uniq-gen n alpha y x-0 alpha-0 y-0 alpha-1 x-1)
  (absent (y (mul alpha x-0 (rec alpha-0))) (y-0 x))
  (precur (5 0))
  (operation nonce-test (added-strand init 2)
    (exp (gen) (mul x alpha-1)) (6 1))
  (traces
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (send (enc a b group (exp (gen) (mul alpha x-0)) (privk a)))
      (recv
        (enc a b group (exp (gen) (mul y alpha-0))
          (exp (gen) (mul alpha x-0)) (privk b)))
      (send (enc n (exp (gen) (mul y x-0 alpha-0)))) (recv n))
    ((send (enc "Group id" group (exp (gen) alpha) k-magic)))
    ((recv (enc "Group id" group (exp (gen) alpha-0) k-magic-0))
      (recv (enc a b group (exp (gen) (mul alpha x-0)) (privk a)))
      (send
        (enc a b group (exp (gen) (mul y alpha-0))
          (exp (gen) (mul alpha x-0)) (privk b))))
    ((send (enc "Group id" group (exp (gen) alpha-0) k-magic-0)))
    ((recv (exp (gen) (mul y x-0 alpha-0)))
      (send (exp (gen) (mul y x-0 alpha-0))))
    ((recv
       (cat (exp (gen) (mul y-0 alpha-1))
         (mul y x-0 alpha-0 (rec y-0) (rec alpha-1))))
      (send
        (cat (exp (gen) (mul y-0 alpha-1))
          (mul y x-0 alpha-0 (rec y-0) (rec alpha-1)))))
    ((recv (enc "Group id" group-0 (exp (gen) alpha-1) k-magic-1))
      (recv
        (enc a-0 b-0 group-0 (exp (gen) (mul x alpha-1)) (privk a-0)))
      (send
        (enc a-0 b-0 group-0 (exp (gen) (mul y-0 alpha-1))
          (exp (gen) (mul x alpha-1)) (privk b-0))))
    ((send (enc "Group id" group-0 (exp (gen) alpha-1) k-magic-1)))
    ((recv
       (enc "Group id" group-1 (exp (gen) (mul x alpha-1 (rec x-1)))
         k-magic-2))
      (send
        (enc a-1 b-1 group-1 (exp (gen) (mul x alpha-1)) (privk a-1)))))
  (label 88)
  (parent 47)
  (unrealized (4 0) (5 0) (8 0))
  (comment "4 in cohort - 4 not yet seen"))

(defskeleton dh_sig2
  (vars (k-magic k-magic-0 k-magic-1 skey) (n group group-0 text)
    (a b a-0 b-0 name) (y alpha y-0 alpha-0 alpha-1 x rndx))
  (defstrand init 5 (k-magic k-magic) (n n) (group group) (a a) (b b)
    (g (exp (gen) alpha-0)) (x x) (y (mul y alpha (rec alpha-0))))
  (defstrand group-init 1 (k-magic k-magic) (group group)
    (alpha alpha-0))
  (defstrand resp 3 (k-magic k-magic-0) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (y y) (x (mul (rec alpha) alpha-0 x)))
  (defstrand group-init 1 (k-magic k-magic-0) (group group)
    (alpha alpha))
  (deflistener (exp (gen) (mul y alpha x)))
  (deflistener
    (cat (exp (gen) (mul y-0 alpha-1))
      (mul y alpha (rec y-0) (rec alpha-1) x)))
  (defstrand resp 3 (k-magic k-magic-1) (group group-0) (a a-0) (b b-0)
    (g (exp (gen) alpha-1)) (y y-0) (x (mul alpha-0 (rec alpha-1) x)))
  (defstrand group-init 1 (k-magic k-magic-1) (group group-0)
    (alpha alpha-1))
  (precedes ((0 1) (2 0)) ((1 0) (0 0)) ((2 2) (0 2)) ((2 2) (6 0))
    ((3 0) (2 0)) ((4 1) (0 4)) ((5 1) (4 0)) ((6 2) (5 0))
    ((7 0) (6 0)))
  (non-orig k-magic k-magic-0 k-magic-1 (privk a) (privk b))
  (uniq-gen n y alpha y-0 alpha-0 alpha-1 x)
  (absent (y (mul (rec alpha) alpha-0 x))
    (y-0 (mul alpha-0 (rec alpha-1) x)))
  (precur (5 0))
  (operation nonce-test (displaced 8 0 init 2)
    (exp (gen) (mul x-0 alpha-2)) (6 1))
  (traces
    ((recv (enc "Group id" group (exp (gen) alpha-0) k-magic))
      (send (enc a b group (exp (gen) (mul alpha-0 x)) (privk a)))
      (recv
        (enc a b group (exp (gen) (mul y alpha))
          (exp (gen) (mul alpha-0 x)) (privk b)))
      (send (enc n (exp (gen) (mul y alpha x)))) (recv n))
    ((send (enc "Group id" group (exp (gen) alpha-0) k-magic)))
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic-0))
      (recv (enc a b group (exp (gen) (mul alpha-0 x)) (privk a)))
      (send
        (enc a b group (exp (gen) (mul y alpha))
          (exp (gen) (mul alpha-0 x)) (privk b))))
    ((send (enc "Group id" group (exp (gen) alpha) k-magic-0)))
    ((recv (exp (gen) (mul y alpha x)))
      (send (exp (gen) (mul y alpha x))))
    ((recv
       (cat (exp (gen) (mul y-0 alpha-1))
         (mul y alpha (rec y-0) (rec alpha-1) x)))
      (send
        (cat (exp (gen) (mul y-0 alpha-1))
          (mul y alpha (rec y-0) (rec alpha-1) x))))
    ((recv (enc "Group id" group-0 (exp (gen) alpha-1) k-magic-1))
      (recv
        (enc a-0 b-0 group-0 (exp (gen) (mul alpha-0 x)) (privk a-0)))
      (send
        (enc a-0 b-0 group-0 (exp (gen) (mul y-0 alpha-1))
          (exp (gen) (mul alpha-0 x)) (privk b-0))))
    ((send (enc "Group id" group-0 (exp (gen) alpha-1) k-magic-1))))
  (label 89)
  (parent 47)
  (unrealized (4 0) (5 0))
  (dead)
  (comment "empty cohort"))

(defskeleton dh_sig2
  (vars (k-magic k-magic-0 k-magic-1 skey) (n group group-0 text)
    (a b a-0 b-0 name) (y alpha alpha-0 x alpha-1 y-0 rndx))
  (defstrand init 5 (k-magic k-magic) (n n) (group group) (a a) (b b)
    (g (exp (gen) alpha-0)) (x x) (y (mul (rec alpha-0) alpha-1 y-0)))
  (defstrand group-init 1 (k-magic k-magic) (group group)
    (alpha alpha-0))
  (defstrand resp 3 (k-magic k-magic-0) (group group) (a a) (b b)
    (g (exp (gen) alpha-1)) (y y-0) (x (mul alpha-0 x (rec alpha-1))))
  (defstrand group-init 1 (k-magic k-magic-0) (group group)
    (alpha alpha-1))
  (deflistener (exp (gen) (mul x alpha-1 y-0)))
  (deflistener
    (cat (exp (gen) (mul y alpha))
      (mul (rec y) (rec alpha) x alpha-1 y-0)))
  (defstrand resp 3 (k-magic k-magic-1) (group group-0) (a a-0) (b b-0)
    (g (exp (gen) alpha)) (y y) (x (mul (rec alpha) alpha-1 y-0)))
  (defstrand group-init 1 (k-magic k-magic-1) (group group-0)
    (alpha alpha))
  (precedes ((0 1) (2 0)) ((1 0) (0 0)) ((2 2) (0 2)) ((2 2) (6 0))
    ((3 0) (2 0)) ((4 1) (0 4)) ((5 1) (4 0)) ((6 2) (5 0))
    ((7 0) (6 0)))
  (non-orig k-magic k-magic-0 k-magic-1 (privk a) (privk b))
  (uniq-gen n y alpha alpha-0 x alpha-1 y-0)
  (absent (y (mul (rec alpha) alpha-1 y-0))
    (y-0 (mul alpha-0 x (rec alpha-1))))
  (precur (5 0))
  (operation nonce-test (displaced 8 2 resp 3)
    (exp (gen) (mul x-0 alpha-2)) (6 1))
  (traces
    ((recv (enc "Group id" group (exp (gen) alpha-0) k-magic))
      (send (enc a b group (exp (gen) (mul alpha-0 x)) (privk a)))
      (recv
        (enc a b group (exp (gen) (mul alpha-1 y-0))
          (exp (gen) (mul alpha-0 x)) (privk b)))
      (send (enc n (exp (gen) (mul x alpha-1 y-0)))) (recv n))
    ((send (enc "Group id" group (exp (gen) alpha-0) k-magic)))
    ((recv (enc "Group id" group (exp (gen) alpha-1) k-magic-0))
      (recv (enc a b group (exp (gen) (mul alpha-0 x)) (privk a)))
      (send
        (enc a b group (exp (gen) (mul alpha-1 y-0))
          (exp (gen) (mul alpha-0 x)) (privk b))))
    ((send (enc "Group id" group (exp (gen) alpha-1) k-magic-0)))
    ((recv (exp (gen) (mul x alpha-1 y-0)))
      (send (exp (gen) (mul x alpha-1 y-0))))
    ((recv
       (cat (exp (gen) (mul y alpha))
         (mul (rec y) (rec alpha) x alpha-1 y-0)))
      (send
        (cat (exp (gen) (mul y alpha))
          (mul (rec y) (rec alpha) x alpha-1 y-0))))
    ((recv (enc "Group id" group-0 (exp (gen) alpha) k-magic-1))
      (recv
        (enc a-0 b-0 group-0 (exp (gen) (mul alpha-1 y-0)) (privk a-0)))
      (send
        (enc a-0 b-0 group-0 (exp (gen) (mul y alpha))
          (exp (gen) (mul alpha-1 y-0)) (privk b-0))))
    ((send (enc "Group id" group-0 (exp (gen) alpha) k-magic-1))))
  (label 90)
  (parent 47)
  (unrealized (4 0) (5 0))
  (dead)
  (comment "empty cohort"))

(defskeleton dh_sig2
  (vars (k-magic k-magic-0 k-magic-1 k-magic-2 skey)
    (n group group-0 group-1 text) (a b a-0 b-0 a-1 b-1 name)
    (alpha rndx) (x expt) (y x-0 alpha-0 y-0 alpha-1 y-1 rndx)
    (x-1 expt))
  (defstrand init 5 (k-magic k-magic) (n n) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (x x-0) (y (mul (rec alpha) y alpha-0)))
  (defstrand group-init 1 (k-magic k-magic) (group group) (alpha alpha))
  (defstrand resp 3 (k-magic k-magic-0) (group group) (a a) (b b)
    (g (exp (gen) alpha-0)) (y y) (x (mul alpha x-0 (rec alpha-0))))
  (defstrand group-init 1 (k-magic k-magic-0) (group group)
    (alpha alpha-0))
  (deflistener (exp (gen) (mul y x-0 alpha-0)))
  (deflistener
    (cat (exp (gen) (mul y-0 alpha-1))
      (mul y x-0 alpha-0 (rec y-0) (rec alpha-1))))
  (defstrand resp 3 (k-magic k-magic-1) (group group-0) (a a-0) (b b-0)
    (g (exp (gen) alpha-1)) (y y-0) (x x))
  (defstrand group-init 1 (k-magic k-magic-1) (group group-0)
    (alpha alpha-1))
  (defstrand resp 3 (k-magic k-magic-2) (group group-1) (a a-1) (b b-1)
    (g (exp (gen) (mul x alpha-1 (rec y-1)))) (y y-1) (x x-1))
  (precedes ((0 1) (2 0)) ((1 0) (0 0)) ((2 2) (0 2)) ((2 2) (6 0))
    ((3 0) (2 0)) ((4 1) (0 4)) ((5 1) (4 0)) ((6 2) (5 0))
    ((7 0) (6 0)) ((7 0) (8 0)) ((8 2) (6 1)))
  (non-orig k-magic k-magic-0 k-magic-1 k-magic-2 (privk a) (privk b))
  (uniq-gen n alpha y x-0 alpha-0 y-0 alpha-1 y-1)
  (absent (y (mul alpha x-0 (rec alpha-0))) (y-0 x) (y-1 x-1))
  (precur (5 0))
  (operation nonce-test (added-strand resp 3)
    (exp (gen) (mul x alpha-1)) (6 1))
  (traces
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (send (enc a b group (exp (gen) (mul alpha x-0)) (privk a)))
      (recv
        (enc a b group (exp (gen) (mul y alpha-0))
          (exp (gen) (mul alpha x-0)) (privk b)))
      (send (enc n (exp (gen) (mul y x-0 alpha-0)))) (recv n))
    ((send (enc "Group id" group (exp (gen) alpha) k-magic)))
    ((recv (enc "Group id" group (exp (gen) alpha-0) k-magic-0))
      (recv (enc a b group (exp (gen) (mul alpha x-0)) (privk a)))
      (send
        (enc a b group (exp (gen) (mul y alpha-0))
          (exp (gen) (mul alpha x-0)) (privk b))))
    ((send (enc "Group id" group (exp (gen) alpha-0) k-magic-0)))
    ((recv (exp (gen) (mul y x-0 alpha-0)))
      (send (exp (gen) (mul y x-0 alpha-0))))
    ((recv
       (cat (exp (gen) (mul y-0 alpha-1))
         (mul y x-0 alpha-0 (rec y-0) (rec alpha-1))))
      (send
        (cat (exp (gen) (mul y-0 alpha-1))
          (mul y x-0 alpha-0 (rec y-0) (rec alpha-1)))))
    ((recv (enc "Group id" group-0 (exp (gen) alpha-1) k-magic-1))
      (recv
        (enc a-0 b-0 group-0 (exp (gen) (mul x alpha-1)) (privk a-0)))
      (send
        (enc a-0 b-0 group-0 (exp (gen) (mul y-0 alpha-1))
          (exp (gen) (mul x alpha-1)) (privk b-0))))
    ((send (enc "Group id" group-0 (exp (gen) alpha-1) k-magic-1)))
    ((recv
       (enc "Group id" group-1 (exp (gen) (mul x alpha-1 (rec y-1)))
         k-magic-2))
      (recv
        (enc a-1 b-1 group-1 (exp (gen) (mul x alpha-1 (rec y-1) x-1))
          (privk a-1)))
      (send
        (enc a-1 b-1 group-1 (exp (gen) (mul x alpha-1))
          (exp (gen) (mul x alpha-1 (rec y-1) x-1)) (privk b-1)))))
  (label 91)
  (parent 47)
  (unrealized (4 0) (5 0) (8 0) (8 1))
  (comment "4 in cohort - 4 not yet seen"))

(defskeleton dh_sig2
  (vars (k-magic k-magic-0 k-magic-1 skey) (n group group-0 text)
    (a b a-0 b-0 name) (alpha rndx) (x expt)
    (y x-0 alpha-0 y-0 alpha-1 rndx) (w expt))
  (defstrand init 5 (k-magic k-magic) (n n) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (x x-0) (y (mul (rec alpha) y alpha-0)))
  (defstrand group-init 1 (k-magic k-magic) (group group) (alpha alpha))
  (defstrand resp 3 (k-magic k-magic-0) (group group) (a a) (b b)
    (g (exp (gen) alpha-0)) (y y) (x (mul alpha x-0 (rec alpha-0))))
  (defstrand group-init 1 (k-magic k-magic-0) (group group)
    (alpha alpha-0))
  (deflistener (exp (gen) (mul y x-0 alpha-0)))
  (deflistener
    (cat (exp (gen) (mul y-0 alpha-1))
      (mul y x-0 alpha-0 (rec y-0) (rec alpha-1))))
  (defstrand resp 3 (k-magic k-magic-1) (group group-0) (a a-0) (b b-0)
    (g (exp (gen) alpha-1)) (y y-0) (x x))
  (defstrand group-init 1 (k-magic k-magic-1) (group group-0)
    (alpha alpha-1))
  (deflistener (cat (exp (gen) (mul x alpha-1 (rec w))) w))
  (precedes ((0 1) (2 0)) ((1 0) (0 0)) ((2 2) (0 2)) ((2 2) (6 0))
    ((3 0) (2 0)) ((4 1) (0 4)) ((5 1) (4 0)) ((6 2) (5 0))
    ((7 0) (6 0)) ((7 0) (8 0)) ((8 1) (6 1)))
  (non-orig k-magic k-magic-0 k-magic-1 (privk a) (privk b))
  (uniq-gen n alpha y x-0 alpha-0 y-0 alpha-1)
  (absent (y (mul alpha x-0 (rec alpha-0))) (y-0 x))
  (precur (5 0) (8 0))
  (operation nonce-test
    (added-listener (cat (exp (gen) (mul x alpha-1 (rec w))) w))
    (exp (gen) (mul x alpha-1)) (6 1))
  (traces
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (send (enc a b group (exp (gen) (mul alpha x-0)) (privk a)))
      (recv
        (enc a b group (exp (gen) (mul y alpha-0))
          (exp (gen) (mul alpha x-0)) (privk b)))
      (send (enc n (exp (gen) (mul y x-0 alpha-0)))) (recv n))
    ((send (enc "Group id" group (exp (gen) alpha) k-magic)))
    ((recv (enc "Group id" group (exp (gen) alpha-0) k-magic-0))
      (recv (enc a b group (exp (gen) (mul alpha x-0)) (privk a)))
      (send
        (enc a b group (exp (gen) (mul y alpha-0))
          (exp (gen) (mul alpha x-0)) (privk b))))
    ((send (enc "Group id" group (exp (gen) alpha-0) k-magic-0)))
    ((recv (exp (gen) (mul y x-0 alpha-0)))
      (send (exp (gen) (mul y x-0 alpha-0))))
    ((recv
       (cat (exp (gen) (mul y-0 alpha-1))
         (mul y x-0 alpha-0 (rec y-0) (rec alpha-1))))
      (send
        (cat (exp (gen) (mul y-0 alpha-1))
          (mul y x-0 alpha-0 (rec y-0) (rec alpha-1)))))
    ((recv (enc "Group id" group-0 (exp (gen) alpha-1) k-magic-1))
      (recv
        (enc a-0 b-0 group-0 (exp (gen) (mul x alpha-1)) (privk a-0)))
      (send
        (enc a-0 b-0 group-0 (exp (gen) (mul y-0 alpha-1))
          (exp (gen) (mul x alpha-1)) (privk b-0))))
    ((send (enc "Group id" group-0 (exp (gen) alpha-1) k-magic-1)))
    ((recv (cat (exp (gen) (mul x alpha-1 (rec w))) w))
      (send (cat (exp (gen) (mul x alpha-1 (rec w))) w))))
  (label 92)
  (parent 47)
  (unrealized (4 0) (5 0) (8 0))
  (comment "9 in cohort - 9 not yet seen"))

(defskeleton dh_sig2
  (vars (k-magic k-magic-0 skey) (n group group-0 text)
    (a b a-0 b-0 a-1 b-1 name) (y x y-0 alpha x-0 rndx))
  (defstrand init 5 (k-magic k-magic) (n n) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (x x) (y y))
  (defstrand group-init 1 (k-magic k-magic) (group group) (alpha alpha))
  (defstrand resp 3 (k-magic k-magic) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (y y) (x x))
  (deflistener (exp (gen) (mul y x alpha)))
  (deflistener (cat (exp (gen) (mul y-0 alpha)) (mul y x (rec y-0))))
  (defstrand resp 3 (k-magic k-magic) (group group) (a a-0) (b b-0)
    (g (exp (gen) alpha)) (y y-0) (x (one)))
  (defstrand init 2 (k-magic k-magic-0) (group group-0) (a a-1) (b b-1)
    (g (exp (gen) (mul alpha (rec x-0)))) (x x-0))
  (precedes ((0 1) (2 0)) ((1 0) (0 0)) ((1 0) (6 0)) ((2 2) (0 2))
    ((2 2) (5 0)) ((3 1) (0 4)) ((4 1) (3 0)) ((5 2) (4 0))
    ((6 1) (5 1)))
  (non-orig k-magic k-magic-0 (privk a) (privk b))
  (uniq-gen n y x y-0 alpha x-0)
  (absent (y x) (y-0 (one)))
  (precur (4 0))
  (operation nonce-test (added-strand init 2) (exp (gen) alpha) (5 1)
    (enc "Group id" group (exp (gen) alpha) k-magic))
  (traces
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (send (enc a b group (exp (gen) (mul x alpha)) (privk a)))
      (recv
        (enc a b group (exp (gen) (mul y alpha))
          (exp (gen) (mul x alpha)) (privk b)))
      (send (enc n (exp (gen) (mul y x alpha)))) (recv n))
    ((send (enc "Group id" group (exp (gen) alpha) k-magic)))
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (recv (enc a b group (exp (gen) (mul x alpha)) (privk a)))
      (send
        (enc a b group (exp (gen) (mul y alpha))
          (exp (gen) (mul x alpha)) (privk b))))
    ((recv (exp (gen) (mul y x alpha)))
      (send (exp (gen) (mul y x alpha))))
    ((recv (cat (exp (gen) (mul y-0 alpha)) (mul y x (rec y-0))))
      (send (cat (exp (gen) (mul y-0 alpha)) (mul y x (rec y-0)))))
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (recv (enc a-0 b-0 group (exp (gen) alpha) (privk a-0)))
      (send
        (enc a-0 b-0 group (exp (gen) (mul y-0 alpha)) (exp (gen) alpha)
          (privk b-0))))
    ((recv
       (enc "Group id" group-0 (exp (gen) (mul alpha (rec x-0)))
         k-magic-0))
      (send (enc a-1 b-1 group-0 (exp (gen) alpha) (privk a-1)))))
  (label 93)
  (parent 51)
  (unrealized (3 0) (4 0) (6 0))
  (dead)
  (comment "empty cohort"))

(defskeleton dh_sig2
  (vars (k-magic k-magic-0 skey) (n group group-0 text)
    (a b a-0 b-0 a-1 b-1 name) (y x y-0 alpha y-1 rndx) (x-0 expt))
  (defstrand init 5 (k-magic k-magic) (n n) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (x x) (y y))
  (defstrand group-init 1 (k-magic k-magic) (group group) (alpha alpha))
  (defstrand resp 3 (k-magic k-magic) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (y y) (x x))
  (deflistener (exp (gen) (mul y x alpha)))
  (deflistener (cat (exp (gen) (mul y-0 alpha)) (mul y x (rec y-0))))
  (defstrand resp 3 (k-magic k-magic) (group group) (a a-0) (b b-0)
    (g (exp (gen) alpha)) (y y-0) (x (one)))
  (defstrand resp 3 (k-magic k-magic-0) (group group-0) (a a-1) (b b-1)
    (g (exp (gen) (mul alpha (rec y-1)))) (y y-1) (x x-0))
  (precedes ((0 1) (2 0)) ((1 0) (0 0)) ((1 0) (6 0)) ((2 2) (0 2))
    ((2 2) (5 0)) ((3 1) (0 4)) ((4 1) (3 0)) ((5 2) (4 0))
    ((6 2) (5 1)))
  (non-orig k-magic k-magic-0 (privk a) (privk b))
  (uniq-gen n y x y-0 alpha y-1)
  (absent (y x) (y-0 (one)) (y-1 x-0))
  (precur (4 0))
  (operation nonce-test (added-strand resp 3) (exp (gen) alpha) (5 1)
    (enc "Group id" group (exp (gen) alpha) k-magic))
  (traces
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (send (enc a b group (exp (gen) (mul x alpha)) (privk a)))
      (recv
        (enc a b group (exp (gen) (mul y alpha))
          (exp (gen) (mul x alpha)) (privk b)))
      (send (enc n (exp (gen) (mul y x alpha)))) (recv n))
    ((send (enc "Group id" group (exp (gen) alpha) k-magic)))
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (recv (enc a b group (exp (gen) (mul x alpha)) (privk a)))
      (send
        (enc a b group (exp (gen) (mul y alpha))
          (exp (gen) (mul x alpha)) (privk b))))
    ((recv (exp (gen) (mul y x alpha)))
      (send (exp (gen) (mul y x alpha))))
    ((recv (cat (exp (gen) (mul y-0 alpha)) (mul y x (rec y-0))))
      (send (cat (exp (gen) (mul y-0 alpha)) (mul y x (rec y-0)))))
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (recv (enc a-0 b-0 group (exp (gen) alpha) (privk a-0)))
      (send
        (enc a-0 b-0 group (exp (gen) (mul y-0 alpha)) (exp (gen) alpha)
          (privk b-0))))
    ((recv
       (enc "Group id" group-0 (exp (gen) (mul alpha (rec y-1)))
         k-magic-0))
      (recv
        (enc a-1 b-1 group-0 (exp (gen) (mul alpha (rec y-1) x-0))
          (privk a-1)))
      (send
        (enc a-1 b-1 group-0 (exp (gen) alpha)
          (exp (gen) (mul alpha (rec y-1) x-0)) (privk b-1)))))
  (label 94)
  (parent 51)
  (unrealized (3 0) (4 0) (6 0) (6 1))
  (dead)
  (comment "empty cohort"))

(defskeleton dh_sig2
  (vars (k-magic skey) (n group text) (a b a-0 b-0 name)
    (y x y-0 alpha rndx) (w expt))
  (defstrand init 5 (k-magic k-magic) (n n) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (x x) (y y))
  (defstrand group-init 1 (k-magic k-magic) (group group) (alpha alpha))
  (defstrand resp 3 (k-magic k-magic) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (y y) (x x))
  (deflistener (exp (gen) (mul y x alpha)))
  (deflistener (cat (exp (gen) (mul y-0 alpha)) (mul y x (rec y-0))))
  (defstrand resp 3 (k-magic k-magic) (group group) (a a-0) (b b-0)
    (g (exp (gen) alpha)) (y y-0) (x (one)))
  (deflistener (cat (exp (gen) (mul alpha (rec w))) w))
  (precedes ((0 1) (2 0)) ((1 0) (0 0)) ((1 0) (6 0)) ((2 2) (0 2))
    ((2 2) (5 0)) ((3 1) (0 4)) ((4 1) (3 0)) ((5 2) (4 0))
    ((6 1) (5 1)))
  (non-orig k-magic (privk a) (privk b))
  (uniq-gen n y x y-0 alpha)
  (absent (y x) (y-0 (one)))
  (precur (4 0) (6 0))
  (operation nonce-test
    (added-listener (cat (exp (gen) (mul alpha (rec w))) w))
    (exp (gen) alpha) (5 1)
    (enc "Group id" group (exp (gen) alpha) k-magic))
  (traces
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (send (enc a b group (exp (gen) (mul x alpha)) (privk a)))
      (recv
        (enc a b group (exp (gen) (mul y alpha))
          (exp (gen) (mul x alpha)) (privk b)))
      (send (enc n (exp (gen) (mul y x alpha)))) (recv n))
    ((send (enc "Group id" group (exp (gen) alpha) k-magic)))
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (recv (enc a b group (exp (gen) (mul x alpha)) (privk a)))
      (send
        (enc a b group (exp (gen) (mul y alpha))
          (exp (gen) (mul x alpha)) (privk b))))
    ((recv (exp (gen) (mul y x alpha)))
      (send (exp (gen) (mul y x alpha))))
    ((recv (cat (exp (gen) (mul y-0 alpha)) (mul y x (rec y-0))))
      (send (cat (exp (gen) (mul y-0 alpha)) (mul y x (rec y-0)))))
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (recv (enc a-0 b-0 group (exp (gen) alpha) (privk a-0)))
      (send
        (enc a-0 b-0 group (exp (gen) (mul y-0 alpha)) (exp (gen) alpha)
          (privk b-0))))
    ((recv (cat (exp (gen) (mul alpha (rec w))) w))
      (send (cat (exp (gen) (mul alpha (rec w))) w))))
  (label 95)
  (parent 51)
  (unrealized (3 0) (4 0) (6 0))
  (comment "7 in cohort - 7 not yet seen"))

(defskeleton dh_sig2
  (vars (k-magic skey) (n group text) (a b a-0 b-0 a-1 b-1 name)
    (y x y-0 x-0 alpha rndx))
  (defstrand init 5 (k-magic k-magic) (n n) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (x x) (y y))
  (defstrand group-init 1 (k-magic k-magic) (group group) (alpha alpha))
  (defstrand resp 3 (k-magic k-magic) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (y y) (x x))
  (deflistener (exp (gen) (mul y x alpha)))
  (deflistener (cat (exp (gen) (mul y-0 alpha)) (mul y x (rec y-0))))
  (defstrand resp 3 (k-magic k-magic) (group group) (a a-0) (b b-0)
    (g (exp (gen) alpha)) (y y-0) (x x-0))
  (defstrand init 2 (k-magic k-magic) (group group) (a a-1) (b b-1)
    (g (exp (gen) alpha)) (x x-0))
  (precedes ((0 1) (2 0)) ((1 0) (0 0)) ((1 0) (6 0)) ((2 2) (0 2))
    ((2 2) (5 0)) ((3 1) (0 4)) ((4 1) (3 0)) ((5 2) (4 0))
    ((6 1) (5 1)))
  (non-orig k-magic (privk a) (privk b))
  (uniq-gen n y x y-0 x-0 alpha)
  (absent (y x) (y-0 x-0))
  (precur (4 0))
  (operation encryption-test (displaced 7 1 group-init 1)
    (enc "Group id" group-0 (exp (gen) alpha-0) k-magic-0) (6 0))
  (traces
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (send (enc a b group (exp (gen) (mul x alpha)) (privk a)))
      (recv
        (enc a b group (exp (gen) (mul y alpha))
          (exp (gen) (mul x alpha)) (privk b)))
      (send (enc n (exp (gen) (mul y x alpha)))) (recv n))
    ((send (enc "Group id" group (exp (gen) alpha) k-magic)))
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (recv (enc a b group (exp (gen) (mul x alpha)) (privk a)))
      (send
        (enc a b group (exp (gen) (mul y alpha))
          (exp (gen) (mul x alpha)) (privk b))))
    ((recv (exp (gen) (mul y x alpha)))
      (send (exp (gen) (mul y x alpha))))
    ((recv (cat (exp (gen) (mul y-0 alpha)) (mul y x (rec y-0))))
      (send (cat (exp (gen) (mul y-0 alpha)) (mul y x (rec y-0)))))
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (recv (enc a-0 b-0 group (exp (gen) (mul x-0 alpha)) (privk a-0)))
      (send
        (enc a-0 b-0 group (exp (gen) (mul y-0 alpha))
          (exp (gen) (mul x-0 alpha)) (privk b-0))))
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (send
        (enc a-1 b-1 group (exp (gen) (mul x-0 alpha)) (privk a-1)))))
  (label 96)
  (parent 53)
  (unrealized (3 0) (4 0))
  (dead)
  (comment "empty cohort"))

(defskeleton dh_sig2
  (vars (k-magic k-magic-0 skey) (n group group-0 text)
    (a b a-0 b-0 a-1 b-1 name) (y x y-0 alpha x-0 alpha-0 rndx))
  (defstrand init 5 (k-magic k-magic) (n n) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (x x) (y y))
  (defstrand group-init 1 (k-magic k-magic) (group group) (alpha alpha))
  (defstrand resp 3 (k-magic k-magic) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (y y) (x x))
  (deflistener (exp (gen) (mul y x alpha)))
  (deflistener (cat (exp (gen) (mul y-0 alpha)) (mul y x (rec y-0))))
  (defstrand resp 3 (k-magic k-magic) (group group) (a a-0) (b b-0)
    (g (exp (gen) alpha)) (y y-0) (x (mul (rec alpha) x-0 alpha-0)))
  (defstrand init 2 (k-magic k-magic-0) (group group-0) (a a-1) (b b-1)
    (g (exp (gen) alpha-0)) (x x-0))
  (defstrand group-init 1 (k-magic k-magic-0) (group group-0)
    (alpha alpha-0))
  (precedes ((0 1) (2 0)) ((1 0) (0 0)) ((1 0) (6 0)) ((2 2) (0 2))
    ((2 2) (5 0)) ((3 1) (0 4)) ((4 1) (3 0)) ((5 2) (4 0))
    ((6 1) (5 1)) ((7 0) (6 0)))
  (non-orig k-magic k-magic-0 (privk a) (privk b))
  (uniq-gen n y x y-0 alpha x-0 alpha-0)
  (absent (y x) (y-0 (mul (rec alpha) x-0 alpha-0)))
  (precur (4 0))
  (operation encryption-test (added-strand group-init 1)
    (enc "Group id" group-0 (exp (gen) alpha-0) k-magic-0) (6 0))
  (traces
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (send (enc a b group (exp (gen) (mul x alpha)) (privk a)))
      (recv
        (enc a b group (exp (gen) (mul y alpha))
          (exp (gen) (mul x alpha)) (privk b)))
      (send (enc n (exp (gen) (mul y x alpha)))) (recv n))
    ((send (enc "Group id" group (exp (gen) alpha) k-magic)))
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (recv (enc a b group (exp (gen) (mul x alpha)) (privk a)))
      (send
        (enc a b group (exp (gen) (mul y alpha))
          (exp (gen) (mul x alpha)) (privk b))))
    ((recv (exp (gen) (mul y x alpha)))
      (send (exp (gen) (mul y x alpha))))
    ((recv (cat (exp (gen) (mul y-0 alpha)) (mul y x (rec y-0))))
      (send (cat (exp (gen) (mul y-0 alpha)) (mul y x (rec y-0)))))
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (recv
        (enc a-0 b-0 group (exp (gen) (mul x-0 alpha-0)) (privk a-0)))
      (send
        (enc a-0 b-0 group (exp (gen) (mul y-0 alpha))
          (exp (gen) (mul x-0 alpha-0)) (privk b-0))))
    ((recv (enc "Group id" group-0 (exp (gen) alpha-0) k-magic-0))
      (send
        (enc a-1 b-1 group-0 (exp (gen) (mul x-0 alpha-0))
          (privk a-1))))
    ((send (enc "Group id" group-0 (exp (gen) alpha-0) k-magic-0))))
  (label 97)
  (parent 53)
  (unrealized (3 0) (4 0))
  (dead)
  (comment "empty cohort"))

(defskeleton dh_sig2
  (vars (k-magic skey) (n group text) (a b a-0 b-0 a-1 b-1 name)
    (y x y-0 rndx) (x-0 expt) (y-1 alpha rndx))
  (defstrand init 5 (k-magic k-magic) (n n) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (x x) (y y))
  (defstrand group-init 1 (k-magic k-magic) (group group) (alpha alpha))
  (defstrand resp 3 (k-magic k-magic) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (y y) (x x))
  (deflistener (exp (gen) (mul y x alpha)))
  (deflistener (cat (exp (gen) (mul y-0 alpha)) (mul y x (rec y-0))))
  (defstrand resp 3 (k-magic k-magic) (group group) (a a-0) (b b-0)
    (g (exp (gen) alpha)) (y y-0) (x y-1))
  (defstrand resp 3 (k-magic k-magic) (group group) (a a-1) (b b-1)
    (g (exp (gen) alpha)) (y y-1) (x x-0))
  (precedes ((0 1) (2 0)) ((1 0) (0 0)) ((1 0) (6 0)) ((2 2) (0 2))
    ((2 2) (5 0)) ((3 1) (0 4)) ((4 1) (3 0)) ((5 2) (4 0))
    ((6 2) (5 1)))
  (non-orig k-magic (privk a) (privk b))
  (uniq-gen n y x y-0 y-1 alpha)
  (absent (y x) (y-0 y-1) (y-1 x-0))
  (precur (4 0))
  (operation encryption-test (displaced 7 1 group-init 1)
    (enc "Group id" group-0 (exp (gen) alpha-0) k-magic-0) (6 0))
  (traces
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (send (enc a b group (exp (gen) (mul x alpha)) (privk a)))
      (recv
        (enc a b group (exp (gen) (mul y alpha))
          (exp (gen) (mul x alpha)) (privk b)))
      (send (enc n (exp (gen) (mul y x alpha)))) (recv n))
    ((send (enc "Group id" group (exp (gen) alpha) k-magic)))
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (recv (enc a b group (exp (gen) (mul x alpha)) (privk a)))
      (send
        (enc a b group (exp (gen) (mul y alpha))
          (exp (gen) (mul x alpha)) (privk b))))
    ((recv (exp (gen) (mul y x alpha)))
      (send (exp (gen) (mul y x alpha))))
    ((recv (cat (exp (gen) (mul y-0 alpha)) (mul y x (rec y-0))))
      (send (cat (exp (gen) (mul y-0 alpha)) (mul y x (rec y-0)))))
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (recv (enc a-0 b-0 group (exp (gen) (mul y-1 alpha)) (privk a-0)))
      (send
        (enc a-0 b-0 group (exp (gen) (mul y-0 alpha))
          (exp (gen) (mul y-1 alpha)) (privk b-0))))
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (recv (enc a-1 b-1 group (exp (gen) (mul x-0 alpha)) (privk a-1)))
      (send
        (enc a-1 b-1 group (exp (gen) (mul y-1 alpha))
          (exp (gen) (mul x-0 alpha)) (privk b-1)))))
  (label 98)
  (parent 54)
  (unrealized (3 0) (4 0) (6 1))
  (comment "8 in cohort - 8 not yet seen"))

(comment "Step limit exceeded--aborting run")

(defskeleton dh_sig2
  (vars (k-magic k-magic-0 k-magic-1 k-magic-2 skey)
    (n group group-0 group-1 text) (a b a-0 b-0 a-1 b-1 name)
    (alpha rndx) (x expt) (y x-0 alpha-0 y-0 alpha-1 rndx) (w expt)
    (y-1 rndx) (x-1 expt))
  (defstrand init 5 (k-magic k-magic) (n n) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (x x-0) (y (mul (rec alpha) y alpha-0)))
  (defstrand group-init 1 (k-magic k-magic) (group group) (alpha alpha))
  (defstrand resp 3 (k-magic k-magic-0) (group group) (a a) (b b)
    (g (exp (gen) alpha-0)) (y y) (x (mul alpha x-0 (rec alpha-0))))
  (defstrand group-init 1 (k-magic k-magic-0) (group group)
    (alpha alpha-0))
  (deflistener (exp (gen) (mul y x-0 alpha-0)))
  (deflistener
    (cat (exp (gen) (mul y-0 alpha-1))
      (mul y x-0 alpha-0 (rec y-0) (rec alpha-1))))
  (defstrand resp 3 (k-magic k-magic-1) (group group-0) (a a-0) (b b-0)
    (g (exp (gen) alpha-1)) (y y-0) (x x))
  (defstrand group-init 1 (k-magic k-magic-1) (group group-0)
    (alpha alpha-1))
  (deflistener (cat (exp (gen) (mul x alpha-1 (rec w))) w))
  (defstrand resp 3 (k-magic k-magic-2) (group group-1) (a a-1) (b b-1)
    (g (exp (gen) (mul x alpha-1 (rec w) (rec y-1)))) (y y-1) (x x-1))
  (precedes ((0 1) (2 0)) ((1 0) (0 0)) ((2 2) (0 2)) ((2 2) (6 0))
    ((3 0) (2 0)) ((4 1) (0 4)) ((5 1) (4 0)) ((6 2) (5 0))
    ((7 0) (6 0)) ((7 0) (9 0)) ((8 1) (6 1)) ((9 2) (8 0)))
  (non-orig k-magic k-magic-0 k-magic-1 k-magic-2 (privk a) (privk b))
  (uniq-gen n alpha y x-0 alpha-0 y-0 alpha-1 y-1)
  (absent (y (mul alpha x-0 (rec alpha-0))) (y-0 x) (y-1 x-1))
  (precur (5 0) (8 0))
  (operation nonce-test (added-strand resp 3)
    (exp (gen) (mul x alpha-1 (rec w))) (8 0))
  (traces
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (send (enc a b group (exp (gen) (mul alpha x-0)) (privk a)))
      (recv
        (enc a b group (exp (gen) (mul y alpha-0))
          (exp (gen) (mul alpha x-0)) (privk b)))
      (send (enc n (exp (gen) (mul y x-0 alpha-0)))) (recv n))
    ((send (enc "Group id" group (exp (gen) alpha) k-magic)))
    ((recv (enc "Group id" group (exp (gen) alpha-0) k-magic-0))
      (recv (enc a b group (exp (gen) (mul alpha x-0)) (privk a)))
      (send
        (enc a b group (exp (gen) (mul y alpha-0))
          (exp (gen) (mul alpha x-0)) (privk b))))
    ((send (enc "Group id" group (exp (gen) alpha-0) k-magic-0)))
    ((recv (exp (gen) (mul y x-0 alpha-0)))
      (send (exp (gen) (mul y x-0 alpha-0))))
    ((recv
       (cat (exp (gen) (mul y-0 alpha-1))
         (mul y x-0 alpha-0 (rec y-0) (rec alpha-1))))
      (send
        (cat (exp (gen) (mul y-0 alpha-1))
          (mul y x-0 alpha-0 (rec y-0) (rec alpha-1)))))
    ((recv (enc "Group id" group-0 (exp (gen) alpha-1) k-magic-1))
      (recv
        (enc a-0 b-0 group-0 (exp (gen) (mul x alpha-1)) (privk a-0)))
      (send
        (enc a-0 b-0 group-0 (exp (gen) (mul y-0 alpha-1))
          (exp (gen) (mul x alpha-1)) (privk b-0))))
    ((send (enc "Group id" group-0 (exp (gen) alpha-1) k-magic-1)))
    ((recv (cat (exp (gen) (mul x alpha-1 (rec w))) w))
      (send (cat (exp (gen) (mul x alpha-1 (rec w))) w)))
    ((recv
       (enc "Group id" group-1
         (exp (gen) (mul x alpha-1 (rec w) (rec y-1))) k-magic-2))
      (recv
        (enc a-1 b-1 group-1
          (exp (gen) (mul x alpha-1 (rec w) (rec y-1) x-1))
          (privk a-1)))
      (send
        (enc a-1 b-1 group-1 (exp (gen) (mul x alpha-1 (rec w)))
          (exp (gen) (mul x alpha-1 (rec w) (rec y-1) x-1))
          (privk b-1)))))
  (label 192)
  (parent 92)
  (unrealized (4 0) (5 0) (9 0) (9 1))
  (aborted)
  (comment "aborted"))

(defskeleton dh_sig2
  (vars (k-magic k-magic-0 k-magic-1 skey) (n group group-0 text)
    (a b a-0 b-0 name) (y alpha rndx) (w expt)
    (alpha-0 x alpha-1 y-0 rndx))
  (defstrand init 5 (k-magic k-magic) (n n) (group group) (a a) (b b)
    (g (exp (gen) alpha-0)) (x x) (y (mul (rec alpha-0) alpha-1 y-0)))
  (defstrand group-init 1 (k-magic k-magic) (group group)
    (alpha alpha-0))
  (defstrand resp 3 (k-magic k-magic-0) (group group) (a a) (b b)
    (g (exp (gen) alpha-1)) (y y-0) (x (mul alpha-0 x (rec alpha-1))))
  (defstrand group-init 1 (k-magic k-magic-0) (group group)
    (alpha alpha-1))
  (deflistener (exp (gen) (mul x alpha-1 y-0)))
  (deflistener
    (cat (exp (gen) (mul y alpha))
      (mul (rec y) (rec alpha) x alpha-1 y-0)))
  (defstrand resp 3 (k-magic k-magic-1) (group group-0) (a a-0) (b b-0)
    (g (exp (gen) alpha)) (y y) (x (mul (rec alpha) w alpha-1 y-0)))
  (defstrand group-init 1 (k-magic k-magic-1) (group group-0)
    (alpha alpha))
  (deflistener (cat (exp (gen) (mul alpha-1 y-0)) w))
  (precedes ((0 1) (2 0)) ((1 0) (0 0)) ((2 2) (0 2)) ((2 2) (6 0))
    ((2 2) (8 0)) ((3 0) (2 0)) ((4 1) (0 4)) ((5 1) (4 0))
    ((6 2) (5 0)) ((7 0) (6 0)) ((7 0) (8 0)) ((8 1) (6 1)))
  (non-orig k-magic k-magic-0 k-magic-1 (privk a) (privk b))
  (uniq-gen n y alpha alpha-0 x alpha-1 y-0)
  (absent (y (mul (rec alpha) w alpha-1 y-0))
    (y-0 (mul alpha-0 x (rec alpha-1))))
  (precur (5 0) (8 0))
  (operation nonce-test (displaced 9 2 resp 3)
    (exp (gen) (mul x-0 alpha-2 (rec w-0))) (8 0))
  (traces
    ((recv (enc "Group id" group (exp (gen) alpha-0) k-magic))
      (send (enc a b group (exp (gen) (mul alpha-0 x)) (privk a)))
      (recv
        (enc a b group (exp (gen) (mul alpha-1 y-0))
          (exp (gen) (mul alpha-0 x)) (privk b)))
      (send (enc n (exp (gen) (mul x alpha-1 y-0)))) (recv n))
    ((send (enc "Group id" group (exp (gen) alpha-0) k-magic)))
    ((recv (enc "Group id" group (exp (gen) alpha-1) k-magic-0))
      (recv (enc a b group (exp (gen) (mul alpha-0 x)) (privk a)))
      (send
        (enc a b group (exp (gen) (mul alpha-1 y-0))
          (exp (gen) (mul alpha-0 x)) (privk b))))
    ((send (enc "Group id" group (exp (gen) alpha-1) k-magic-0)))
    ((recv (exp (gen) (mul x alpha-1 y-0)))
      (send (exp (gen) (mul x alpha-1 y-0))))
    ((recv
       (cat (exp (gen) (mul y alpha))
         (mul (rec y) (rec alpha) x alpha-1 y-0)))
      (send
        (cat (exp (gen) (mul y alpha))
          (mul (rec y) (rec alpha) x alpha-1 y-0))))
    ((recv (enc "Group id" group-0 (exp (gen) alpha) k-magic-1))
      (recv
        (enc a-0 b-0 group-0 (exp (gen) (mul w alpha-1 y-0))
          (privk a-0)))
      (send
        (enc a-0 b-0 group-0 (exp (gen) (mul y alpha))
          (exp (gen) (mul w alpha-1 y-0)) (privk b-0))))
    ((send (enc "Group id" group-0 (exp (gen) alpha) k-magic-1)))
    ((recv (cat (exp (gen) (mul alpha-1 y-0)) w))
      (send (cat (exp (gen) (mul alpha-1 y-0)) w))))
  (label 191)
  (parent 92)
  (unrealized (4 0) (5 0))
  (aborted)
  (comment "aborted"))

(defskeleton dh_sig2
  (vars (k-magic k-magic-0 k-magic-1 k-magic-2 skey)
    (n group group-0 group-1 text) (a b a-0 b-0 a-1 b-1 name)
    (alpha rndx) (x expt) (y x-0 alpha-0 y-0 alpha-1 rndx) (w expt)
    (x-1 rndx))
  (defstrand init 5 (k-magic k-magic) (n n) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (x x-0) (y (mul (rec alpha) y alpha-0)))
  (defstrand group-init 1 (k-magic k-magic) (group group) (alpha alpha))
  (defstrand resp 3 (k-magic k-magic-0) (group group) (a a) (b b)
    (g (exp (gen) alpha-0)) (y y) (x (mul alpha x-0 (rec alpha-0))))
  (defstrand group-init 1 (k-magic k-magic-0) (group group)
    (alpha alpha-0))
  (deflistener (exp (gen) (mul y x-0 alpha-0)))
  (deflistener
    (cat (exp (gen) (mul y-0 alpha-1))
      (mul y x-0 alpha-0 (rec y-0) (rec alpha-1))))
  (defstrand resp 3 (k-magic k-magic-1) (group group-0) (a a-0) (b b-0)
    (g (exp (gen) alpha-1)) (y y-0) (x x))
  (defstrand group-init 1 (k-magic k-magic-1) (group group-0)
    (alpha alpha-1))
  (deflistener (cat (exp (gen) (mul x alpha-1 (rec w))) w))
  (defstrand init 2 (k-magic k-magic-2) (group group-1) (a a-1) (b b-1)
    (g (exp (gen) (mul x alpha-1 (rec w) (rec x-1)))) (x x-1))
  (precedes ((0 1) (2 0)) ((1 0) (0 0)) ((2 2) (0 2)) ((2 2) (6 0))
    ((3 0) (2 0)) ((4 1) (0 4)) ((5 1) (4 0)) ((6 2) (5 0))
    ((7 0) (6 0)) ((7 0) (9 0)) ((8 1) (6 1)) ((9 1) (8 0)))
  (non-orig k-magic k-magic-0 k-magic-1 k-magic-2 (privk a) (privk b))
  (uniq-gen n alpha y x-0 alpha-0 y-0 alpha-1 x-1)
  (absent (y (mul alpha x-0 (rec alpha-0))) (y-0 x))
  (precur (5 0) (8 0))
  (operation nonce-test (added-strand init 2)
    (exp (gen) (mul x alpha-1 (rec w))) (8 0))
  (traces
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (send (enc a b group (exp (gen) (mul alpha x-0)) (privk a)))
      (recv
        (enc a b group (exp (gen) (mul y alpha-0))
          (exp (gen) (mul alpha x-0)) (privk b)))
      (send (enc n (exp (gen) (mul y x-0 alpha-0)))) (recv n))
    ((send (enc "Group id" group (exp (gen) alpha) k-magic)))
    ((recv (enc "Group id" group (exp (gen) alpha-0) k-magic-0))
      (recv (enc a b group (exp (gen) (mul alpha x-0)) (privk a)))
      (send
        (enc a b group (exp (gen) (mul y alpha-0))
          (exp (gen) (mul alpha x-0)) (privk b))))
    ((send (enc "Group id" group (exp (gen) alpha-0) k-magic-0)))
    ((recv (exp (gen) (mul y x-0 alpha-0)))
      (send (exp (gen) (mul y x-0 alpha-0))))
    ((recv
       (cat (exp (gen) (mul y-0 alpha-1))
         (mul y x-0 alpha-0 (rec y-0) (rec alpha-1))))
      (send
        (cat (exp (gen) (mul y-0 alpha-1))
          (mul y x-0 alpha-0 (rec y-0) (rec alpha-1)))))
    ((recv (enc "Group id" group-0 (exp (gen) alpha-1) k-magic-1))
      (recv
        (enc a-0 b-0 group-0 (exp (gen) (mul x alpha-1)) (privk a-0)))
      (send
        (enc a-0 b-0 group-0 (exp (gen) (mul y-0 alpha-1))
          (exp (gen) (mul x alpha-1)) (privk b-0))))
    ((send (enc "Group id" group-0 (exp (gen) alpha-1) k-magic-1)))
    ((recv (cat (exp (gen) (mul x alpha-1 (rec w))) w))
      (send (cat (exp (gen) (mul x alpha-1 (rec w))) w)))
    ((recv
       (enc "Group id" group-1
         (exp (gen) (mul x alpha-1 (rec w) (rec x-1))) k-magic-2))
      (send
        (enc a-1 b-1 group-1 (exp (gen) (mul x alpha-1 (rec w)))
          (privk a-1)))))
  (label 190)
  (parent 92)
  (unrealized (4 0) (5 0) (9 0))
  (aborted)
  (comment "aborted"))

(defskeleton dh_sig2
  (vars (k-magic k-magic-0 k-magic-1 k-magic-2 skey)
    (n group group-0 group-1 text) (a b a-0 b-0 name)
    (alpha y x alpha-0 y-0 alpha-1 rndx) (w expt) (alpha-2 rndx))
  (defstrand init 5 (k-magic k-magic) (n n) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (x x) (y (mul (rec alpha) y alpha-0)))
  (defstrand group-init 1 (k-magic k-magic) (group group) (alpha alpha))
  (defstrand resp 3 (k-magic k-magic-0) (group group) (a a) (b b)
    (g (exp (gen) alpha-0)) (y y) (x (mul alpha x (rec alpha-0))))
  (defstrand group-init 1 (k-magic k-magic-0) (group group)
    (alpha alpha-0))
  (deflistener (exp (gen) (mul y x alpha-0)))
  (deflistener
    (cat (exp (gen) (mul y-0 alpha-1))
      (mul y x alpha-0 (rec y-0) (rec alpha-1))))
  (defstrand resp 3 (k-magic k-magic-1) (group group-0) (a a-0) (b b-0)
    (g (exp (gen) alpha-1)) (y y-0) (x (mul (rec alpha-1) w alpha-2)))
  (defstrand group-init 1 (k-magic k-magic-1) (group group-0)
    (alpha alpha-1))
  (deflistener (cat (exp (gen) alpha-2) w))
  (defstrand group-init 1 (k-magic k-magic-2) (group group-1)
    (alpha alpha-2))
  (precedes ((0 1) (2 0)) ((1 0) (0 0)) ((2 2) (0 2)) ((2 2) (6 0))
    ((3 0) (2 0)) ((4 1) (0 4)) ((5 1) (4 0)) ((6 2) (5 0))
    ((7 0) (6 0)) ((7 0) (8 0)) ((8 1) (6 1)) ((9 0) (8 0)))
  (non-orig k-magic k-magic-0 k-magic-1 (privk a) (privk b))
  (uniq-gen n alpha y x alpha-0 y-0 alpha-1 alpha-2)
  (absent (y (mul alpha x (rec alpha-0)))
    (y-0 (mul (rec alpha-1) w alpha-2)))
  (precur (5 0) (8 0))
  (operation nonce-test (added-strand group-init 1) (exp (gen) alpha-2)
    (8 0))
  (traces
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (send (enc a b group (exp (gen) (mul alpha x)) (privk a)))
      (recv
        (enc a b group (exp (gen) (mul y alpha-0))
          (exp (gen) (mul alpha x)) (privk b)))
      (send (enc n (exp (gen) (mul y x alpha-0)))) (recv n))
    ((send (enc "Group id" group (exp (gen) alpha) k-magic)))
    ((recv (enc "Group id" group (exp (gen) alpha-0) k-magic-0))
      (recv (enc a b group (exp (gen) (mul alpha x)) (privk a)))
      (send
        (enc a b group (exp (gen) (mul y alpha-0))
          (exp (gen) (mul alpha x)) (privk b))))
    ((send (enc "Group id" group (exp (gen) alpha-0) k-magic-0)))
    ((recv (exp (gen) (mul y x alpha-0)))
      (send (exp (gen) (mul y x alpha-0))))
    ((recv
       (cat (exp (gen) (mul y-0 alpha-1))
         (mul y x alpha-0 (rec y-0) (rec alpha-1))))
      (send
        (cat (exp (gen) (mul y-0 alpha-1))
          (mul y x alpha-0 (rec y-0) (rec alpha-1)))))
    ((recv (enc "Group id" group-0 (exp (gen) alpha-1) k-magic-1))
      (recv
        (enc a-0 b-0 group-0 (exp (gen) (mul w alpha-2)) (privk a-0)))
      (send
        (enc a-0 b-0 group-0 (exp (gen) (mul y-0 alpha-1))
          (exp (gen) (mul w alpha-2)) (privk b-0))))
    ((send (enc "Group id" group-0 (exp (gen) alpha-1) k-magic-1)))
    ((recv (cat (exp (gen) alpha-2) w))
      (send (cat (exp (gen) alpha-2) w)))
    ((send (enc "Group id" group-1 (exp (gen) alpha-2) k-magic-2))))
  (label 189)
  (parent 92)
  (unrealized (4 0) (5 0))
  (aborted)
  (comment "aborted"))

(defskeleton dh_sig2
  (vars (k-magic k-magic-0 k-magic-1 skey) (n group group-0 text)
    (a b a-0 b-0 name) (y alpha y-0 alpha-0 alpha-1 rndx) (w expt)
    (x rndx))
  (defstrand init 5 (k-magic k-magic) (n n) (group group) (a a) (b b)
    (g (exp (gen) alpha-0)) (x x) (y (mul y alpha (rec alpha-0))))
  (defstrand group-init 1 (k-magic k-magic) (group group)
    (alpha alpha-0))
  (defstrand resp 3 (k-magic k-magic-0) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (y y) (x (mul (rec alpha) alpha-0 x)))
  (defstrand group-init 1 (k-magic k-magic-0) (group group)
    (alpha alpha))
  (deflistener (exp (gen) (mul y alpha x)))
  (deflistener
    (cat (exp (gen) (mul y-0 alpha-1))
      (mul y alpha (rec y-0) (rec alpha-1) x)))
  (defstrand resp 3 (k-magic k-magic-1) (group group-0) (a a-0) (b b-0)
    (g (exp (gen) alpha-1)) (y y-0) (x (mul alpha-0 (rec alpha-1) w x)))
  (defstrand group-init 1 (k-magic k-magic-1) (group group-0)
    (alpha alpha-1))
  (deflistener (cat (exp (gen) (mul alpha-0 x)) w))
  (precedes ((0 1) (2 0)) ((0 1) (8 0)) ((1 0) (0 0)) ((2 2) (0 2))
    ((2 2) (6 0)) ((3 0) (2 0)) ((4 1) (0 4)) ((5 1) (4 0))
    ((6 2) (5 0)) ((7 0) (6 0)) ((7 0) (8 0)) ((8 1) (6 1)))
  (non-orig k-magic k-magic-0 k-magic-1 (privk a) (privk b))
  (uniq-gen n y alpha y-0 alpha-0 alpha-1 x)
  (absent (y (mul (rec alpha) alpha-0 x))
    (y-0 (mul alpha-0 (rec alpha-1) w x)))
  (precur (5 0) (8 0))
  (operation nonce-test (displaced 9 0 init 2)
    (exp (gen) (mul x-0 alpha-2 (rec w-0))) (8 0))
  (traces
    ((recv (enc "Group id" group (exp (gen) alpha-0) k-magic))
      (send (enc a b group (exp (gen) (mul alpha-0 x)) (privk a)))
      (recv
        (enc a b group (exp (gen) (mul y alpha))
          (exp (gen) (mul alpha-0 x)) (privk b)))
      (send (enc n (exp (gen) (mul y alpha x)))) (recv n))
    ((send (enc "Group id" group (exp (gen) alpha-0) k-magic)))
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic-0))
      (recv (enc a b group (exp (gen) (mul alpha-0 x)) (privk a)))
      (send
        (enc a b group (exp (gen) (mul y alpha))
          (exp (gen) (mul alpha-0 x)) (privk b))))
    ((send (enc "Group id" group (exp (gen) alpha) k-magic-0)))
    ((recv (exp (gen) (mul y alpha x)))
      (send (exp (gen) (mul y alpha x))))
    ((recv
       (cat (exp (gen) (mul y-0 alpha-1))
         (mul y alpha (rec y-0) (rec alpha-1) x)))
      (send
        (cat (exp (gen) (mul y-0 alpha-1))
          (mul y alpha (rec y-0) (rec alpha-1) x))))
    ((recv (enc "Group id" group-0 (exp (gen) alpha-1) k-magic-1))
      (recv
        (enc a-0 b-0 group-0 (exp (gen) (mul alpha-0 w x)) (privk a-0)))
      (send
        (enc a-0 b-0 group-0 (exp (gen) (mul y-0 alpha-1))
          (exp (gen) (mul alpha-0 w x)) (privk b-0))))
    ((send (enc "Group id" group-0 (exp (gen) alpha-1) k-magic-1)))
    ((recv (cat (exp (gen) (mul alpha-0 x)) w))
      (send (cat (exp (gen) (mul alpha-0 x)) w))))
  (label 188)
  (parent 92)
  (unrealized (4 0) (5 0))
  (aborted)
  (comment "aborted"))

(defskeleton dh_sig2
  (vars (k-magic k-magic-0 k-magic-1 skey) (n group group-0 text)
    (a b a-0 b-0 name) (y x alpha y-0 alpha-0 rndx) (w expt)
    (alpha-1 rndx))
  (defstrand init 5 (k-magic k-magic) (n n) (group group) (a a) (b b)
    (g (exp (gen) alpha-1)) (x x) (y (mul y alpha (rec alpha-1))))
  (defstrand group-init 1 (k-magic k-magic) (group group)
    (alpha alpha-1))
  (defstrand resp 3 (k-magic k-magic-0) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (y y) (x (mul x (rec alpha) alpha-1)))
  (defstrand group-init 1 (k-magic k-magic-0) (group group)
    (alpha alpha))
  (deflistener (exp (gen) (mul y x alpha)))
  (deflistener
    (cat (exp (gen) (mul y-0 alpha-0))
      (mul y x alpha (rec y-0) (rec alpha-0))))
  (defstrand resp 3 (k-magic k-magic-1) (group group-0) (a a-0) (b b-0)
    (g (exp (gen) alpha-0)) (y y-0) (x (mul (rec alpha-0) w alpha-1)))
  (defstrand group-init 1 (k-magic k-magic-1) (group group-0)
    (alpha alpha-0))
  (deflistener (cat (exp (gen) alpha-1) w))
  (precedes ((0 1) (2 0)) ((1 0) (0 0)) ((1 0) (8 0)) ((2 2) (0 2))
    ((2 2) (6 0)) ((3 0) (2 0)) ((4 1) (0 4)) ((5 1) (4 0))
    ((6 2) (5 0)) ((7 0) (6 0)) ((7 0) (8 0)) ((8 1) (6 1)))
  (non-orig k-magic k-magic-0 k-magic-1 (privk a) (privk b))
  (uniq-gen n y x alpha y-0 alpha-0 alpha-1)
  (absent (y (mul x (rec alpha) alpha-1))
    (y-0 (mul (rec alpha-0) w alpha-1)))
  (precur (5 0) (8 0))
  (operation nonce-test (displaced 9 1 group-init 1) (exp (gen) alpha-2)
    (8 0))
  (traces
    ((recv (enc "Group id" group (exp (gen) alpha-1) k-magic))
      (send (enc a b group (exp (gen) (mul x alpha-1)) (privk a)))
      (recv
        (enc a b group (exp (gen) (mul y alpha))
          (exp (gen) (mul x alpha-1)) (privk b)))
      (send (enc n (exp (gen) (mul y x alpha)))) (recv n))
    ((send (enc "Group id" group (exp (gen) alpha-1) k-magic)))
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic-0))
      (recv (enc a b group (exp (gen) (mul x alpha-1)) (privk a)))
      (send
        (enc a b group (exp (gen) (mul y alpha))
          (exp (gen) (mul x alpha-1)) (privk b))))
    ((send (enc "Group id" group (exp (gen) alpha) k-magic-0)))
    ((recv (exp (gen) (mul y x alpha)))
      (send (exp (gen) (mul y x alpha))))
    ((recv
       (cat (exp (gen) (mul y-0 alpha-0))
         (mul y x alpha (rec y-0) (rec alpha-0))))
      (send
        (cat (exp (gen) (mul y-0 alpha-0))
          (mul y x alpha (rec y-0) (rec alpha-0)))))
    ((recv (enc "Group id" group-0 (exp (gen) alpha-0) k-magic-1))
      (recv
        (enc a-0 b-0 group-0 (exp (gen) (mul w alpha-1)) (privk a-0)))
      (send
        (enc a-0 b-0 group-0 (exp (gen) (mul y-0 alpha-0))
          (exp (gen) (mul w alpha-1)) (privk b-0))))
    ((send (enc "Group id" group-0 (exp (gen) alpha-0) k-magic-1)))
    ((recv (cat (exp (gen) alpha-1) w))
      (send (cat (exp (gen) alpha-1) w))))
  (label 187)
  (parent 92)
  (unrealized (4 0) (5 0) (8 0))
  (aborted)
  (comment "aborted"))

(defskeleton dh_sig2
  (vars (k-magic k-magic-0 k-magic-1 skey) (n group group-0 text)
    (a b a-0 b-0 name) (alpha y x alpha-0 y-0 alpha-1 rndx) (w expt))
  (defstrand init 5 (k-magic k-magic) (n n) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (x x) (y (mul (rec alpha) y alpha-0)))
  (defstrand group-init 1 (k-magic k-magic) (group group) (alpha alpha))
  (defstrand resp 3 (k-magic k-magic-0) (group group) (a a) (b b)
    (g (exp (gen) alpha-0)) (y y) (x (mul alpha x (rec alpha-0))))
  (defstrand group-init 1 (k-magic k-magic-0) (group group)
    (alpha alpha-0))
  (deflistener (exp (gen) (mul y x alpha-0)))
  (deflistener
    (cat (exp (gen) (mul y-0 alpha-1))
      (mul y x alpha-0 (rec y-0) (rec alpha-1))))
  (defstrand resp 3 (k-magic k-magic-1) (group group-0) (a a-0) (b b-0)
    (g (exp (gen) alpha-1)) (y y-0) (x (mul (rec alpha-1) w)))
  (defstrand group-init 1 (k-magic k-magic-1) (group group-0)
    (alpha alpha-1))
  (deflistener (cat (gen) w))
  (precedes ((0 1) (2 0)) ((1 0) (0 0)) ((2 2) (0 2)) ((2 2) (6 0))
    ((3 0) (2 0)) ((4 1) (0 4)) ((5 1) (4 0)) ((6 2) (5 0))
    ((7 0) (6 0)) ((7 0) (8 0)) ((8 1) (6 1)))
  (non-orig k-magic k-magic-0 k-magic-1 (privk a) (privk b))
  (uniq-gen n alpha y x alpha-0 y-0 alpha-1)
  (absent (y (mul alpha x (rec alpha-0))) (y-0 (mul (rec alpha-1) w)))
  (precur (5 0) (8 0))
  (operation nonce-test
    (contracted (x-0 (mul (rec alpha-1) w)) (alpha-2 alpha-1) (w-0 w))
    (gen) (8 0))
  (traces
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (send (enc a b group (exp (gen) (mul alpha x)) (privk a)))
      (recv
        (enc a b group (exp (gen) (mul y alpha-0))
          (exp (gen) (mul alpha x)) (privk b)))
      (send (enc n (exp (gen) (mul y x alpha-0)))) (recv n))
    ((send (enc "Group id" group (exp (gen) alpha) k-magic)))
    ((recv (enc "Group id" group (exp (gen) alpha-0) k-magic-0))
      (recv (enc a b group (exp (gen) (mul alpha x)) (privk a)))
      (send
        (enc a b group (exp (gen) (mul y alpha-0))
          (exp (gen) (mul alpha x)) (privk b))))
    ((send (enc "Group id" group (exp (gen) alpha-0) k-magic-0)))
    ((recv (exp (gen) (mul y x alpha-0)))
      (send (exp (gen) (mul y x alpha-0))))
    ((recv
       (cat (exp (gen) (mul y-0 alpha-1))
         (mul y x alpha-0 (rec y-0) (rec alpha-1))))
      (send
        (cat (exp (gen) (mul y-0 alpha-1))
          (mul y x alpha-0 (rec y-0) (rec alpha-1)))))
    ((recv (enc "Group id" group-0 (exp (gen) alpha-1) k-magic-1))
      (recv (enc a-0 b-0 group-0 (exp (gen) w) (privk a-0)))
      (send
        (enc a-0 b-0 group-0 (exp (gen) (mul y-0 alpha-1)) (exp (gen) w)
          (privk b-0))))
    ((send (enc "Group id" group-0 (exp (gen) alpha-1) k-magic-1)))
    ((recv (cat (gen) w)) (send (cat (gen) w))))
  (label 186)
  (parent 92)
  (unrealized (4 0) (5 0))
  (aborted)
  (comment "aborted"))

(defskeleton dh_sig2
  (vars (k-magic k-magic-0 k-magic-1 skey) (n group group-0 text)
    (a b a-0 b-0 name) (alpha y x y-0 alpha-0 rndx) (w expt)
    (alpha-1 rndx))
  (defstrand init 5 (k-magic k-magic) (n n) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (x x) (y (mul (rec alpha) y alpha-1)))
  (defstrand group-init 1 (k-magic k-magic) (group group) (alpha alpha))
  (defstrand resp 3 (k-magic k-magic-0) (group group) (a a) (b b)
    (g (exp (gen) alpha-1)) (y y) (x (mul alpha x (rec alpha-1))))
  (defstrand group-init 1 (k-magic k-magic-0) (group group)
    (alpha alpha-1))
  (deflistener (exp (gen) (mul y x alpha-1)))
  (deflistener
    (cat (exp (gen) (mul y-0 alpha-0))
      (mul y x (rec y-0) (rec alpha-0) alpha-1)))
  (defstrand resp 3 (k-magic k-magic-1) (group group-0) (a a-0) (b b-0)
    (g (exp (gen) alpha-0)) (y y-0) (x (mul (rec alpha-0) w alpha-1)))
  (defstrand group-init 1 (k-magic k-magic-1) (group group-0)
    (alpha alpha-0))
  (deflistener (cat (exp (gen) alpha-1) w))
  (precedes ((0 1) (2 0)) ((1 0) (0 0)) ((2 2) (0 2)) ((2 2) (6 0))
    ((3 0) (2 0)) ((3 0) (8 0)) ((4 1) (0 4)) ((5 1) (4 0))
    ((6 2) (5 0)) ((7 0) (6 0)) ((7 0) (8 0)) ((8 1) (6 1)))
  (non-orig k-magic k-magic-0 k-magic-1 (privk a) (privk b))
  (uniq-gen n alpha y x y-0 alpha-0 alpha-1)
  (absent (y (mul alpha x (rec alpha-1)))
    (y-0 (mul (rec alpha-0) w alpha-1)))
  (precur (5 0) (8 0))
  (operation nonce-test (displaced 9 3 group-init 1) (exp (gen) alpha-2)
    (8 0))
  (traces
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (send (enc a b group (exp (gen) (mul alpha x)) (privk a)))
      (recv
        (enc a b group (exp (gen) (mul y alpha-1))
          (exp (gen) (mul alpha x)) (privk b)))
      (send (enc n (exp (gen) (mul y x alpha-1)))) (recv n))
    ((send (enc "Group id" group (exp (gen) alpha) k-magic)))
    ((recv (enc "Group id" group (exp (gen) alpha-1) k-magic-0))
      (recv (enc a b group (exp (gen) (mul alpha x)) (privk a)))
      (send
        (enc a b group (exp (gen) (mul y alpha-1))
          (exp (gen) (mul alpha x)) (privk b))))
    ((send (enc "Group id" group (exp (gen) alpha-1) k-magic-0)))
    ((recv (exp (gen) (mul y x alpha-1)))
      (send (exp (gen) (mul y x alpha-1))))
    ((recv
       (cat (exp (gen) (mul y-0 alpha-0))
         (mul y x (rec y-0) (rec alpha-0) alpha-1)))
      (send
        (cat (exp (gen) (mul y-0 alpha-0))
          (mul y x (rec y-0) (rec alpha-0) alpha-1))))
    ((recv (enc "Group id" group-0 (exp (gen) alpha-0) k-magic-1))
      (recv
        (enc a-0 b-0 group-0 (exp (gen) (mul w alpha-1)) (privk a-0)))
      (send
        (enc a-0 b-0 group-0 (exp (gen) (mul y-0 alpha-0))
          (exp (gen) (mul w alpha-1)) (privk b-0))))
    ((send (enc "Group id" group-0 (exp (gen) alpha-0) k-magic-1)))
    ((recv (cat (exp (gen) alpha-1) w))
      (send (cat (exp (gen) alpha-1) w))))
  (label 185)
  (parent 92)
  (unrealized (4 0) (5 0) (8 0))
  (aborted)
  (comment "aborted"))

(defskeleton dh_sig2
  (vars (k-magic k-magic-0 k-magic-1 skey) (n group group-0 text)
    (a b a-0 b-0 name) (alpha y x alpha-0 y-0 rndx) (w expt)
    (alpha-1 rndx))
  (defstrand init 5 (k-magic k-magic) (n n) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (x x) (y (mul (rec alpha) y alpha-0)))
  (defstrand group-init 1 (k-magic k-magic) (group group) (alpha alpha))
  (defstrand resp 3 (k-magic k-magic-0) (group group) (a a) (b b)
    (g (exp (gen) alpha-0)) (y y) (x (mul alpha x (rec alpha-0))))
  (defstrand group-init 1 (k-magic k-magic-0) (group group)
    (alpha alpha-0))
  (deflistener (exp (gen) (mul y x alpha-0)))
  (deflistener
    (cat (exp (gen) (mul y-0 alpha-1))
      (mul y x alpha-0 (rec y-0) (rec alpha-1))))
  (defstrand resp 3 (k-magic k-magic-1) (group group-0) (a a-0) (b b-0)
    (g (exp (gen) alpha-1)) (y y-0) (x w))
  (defstrand group-init 1 (k-magic k-magic-1) (group group-0)
    (alpha alpha-1))
  (deflistener (cat (exp (gen) alpha-1) w))
  (precedes ((0 1) (2 0)) ((1 0) (0 0)) ((2 2) (0 2)) ((2 2) (6 0))
    ((3 0) (2 0)) ((4 1) (0 4)) ((5 1) (4 0)) ((6 2) (5 0))
    ((7 0) (6 0)) ((7 0) (8 0)) ((8 1) (6 1)))
  (non-orig k-magic k-magic-0 k-magic-1 (privk a) (privk b))
  (uniq-gen n alpha y x alpha-0 y-0 alpha-1)
  (absent (y (mul alpha x (rec alpha-0))) (y-0 w))
  (precur (5 0) (8 0))
  (operation nonce-test (displaced 9 7 group-init 1) (exp (gen) alpha-2)
    (8 0))
  (traces
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (send (enc a b group (exp (gen) (mul alpha x)) (privk a)))
      (recv
        (enc a b group (exp (gen) (mul y alpha-0))
          (exp (gen) (mul alpha x)) (privk b)))
      (send (enc n (exp (gen) (mul y x alpha-0)))) (recv n))
    ((send (enc "Group id" group (exp (gen) alpha) k-magic)))
    ((recv (enc "Group id" group (exp (gen) alpha-0) k-magic-0))
      (recv (enc a b group (exp (gen) (mul alpha x)) (privk a)))
      (send
        (enc a b group (exp (gen) (mul y alpha-0))
          (exp (gen) (mul alpha x)) (privk b))))
    ((send (enc "Group id" group (exp (gen) alpha-0) k-magic-0)))
    ((recv (exp (gen) (mul y x alpha-0)))
      (send (exp (gen) (mul y x alpha-0))))
    ((recv
       (cat (exp (gen) (mul y-0 alpha-1))
         (mul y x alpha-0 (rec y-0) (rec alpha-1))))
      (send
        (cat (exp (gen) (mul y-0 alpha-1))
          (mul y x alpha-0 (rec y-0) (rec alpha-1)))))
    ((recv (enc "Group id" group-0 (exp (gen) alpha-1) k-magic-1))
      (recv
        (enc a-0 b-0 group-0 (exp (gen) (mul w alpha-1)) (privk a-0)))
      (send
        (enc a-0 b-0 group-0 (exp (gen) (mul y-0 alpha-1))
          (exp (gen) (mul w alpha-1)) (privk b-0))))
    ((send (enc "Group id" group-0 (exp (gen) alpha-1) k-magic-1)))
    ((recv (cat (exp (gen) alpha-1) w))
      (send (cat (exp (gen) alpha-1) w))))
  (label 184)
  (parent 92)
  (unrealized (4 0) (5 0) (8 0))
  (aborted)
  (comment "aborted"))

(defskeleton dh_sig2
  (vars (k-magic k-magic-0 k-magic-1 k-magic-2 skey)
    (n group group-0 group-1 text) (a b a-0 b-0 a-1 b-1 name)
    (alpha y x alpha-0 y-0 rndx) (x-0 expt) (alpha-1 y-1 alpha-2 rndx))
  (defstrand init 5 (k-magic k-magic) (n n) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (x x) (y (mul (rec alpha) y alpha-0)))
  (defstrand group-init 1 (k-magic k-magic) (group group) (alpha alpha))
  (defstrand resp 3 (k-magic k-magic-0) (group group) (a a) (b b)
    (g (exp (gen) alpha-0)) (y y) (x (mul alpha x (rec alpha-0))))
  (defstrand group-init 1 (k-magic k-magic-0) (group group)
    (alpha alpha-0))
  (deflistener (exp (gen) (mul y x alpha-0)))
  (deflistener
    (cat (exp (gen) (mul y-0 alpha-1))
      (mul y x alpha-0 (rec y-0) (rec alpha-1))))
  (defstrand resp 3 (k-magic k-magic-1) (group group-0) (a a-0) (b b-0)
    (g (exp (gen) alpha-1)) (y y-0) (x (mul (rec alpha-1) y-1 alpha-2)))
  (defstrand group-init 1 (k-magic k-magic-1) (group group-0)
    (alpha alpha-1))
  (defstrand resp 3 (k-magic k-magic-2) (group group-1) (a a-1) (b b-1)
    (g (exp (gen) alpha-2)) (y y-1) (x x-0))
  (defstrand group-init 1 (k-magic k-magic-2) (group group-1)
    (alpha alpha-2))
  (precedes ((0 1) (2 0)) ((1 0) (0 0)) ((2 2) (0 2)) ((2 2) (6 0))
    ((3 0) (2 0)) ((4 1) (0 4)) ((5 1) (4 0)) ((6 2) (5 0))
    ((7 0) (6 0)) ((7 0) (8 0)) ((8 2) (6 1)) ((9 0) (8 0)))
  (non-orig k-magic k-magic-0 k-magic-1 k-magic-2 (privk a) (privk b))
  (uniq-gen n alpha y x alpha-0 y-0 alpha-1 y-1 alpha-2)
  (absent (y (mul alpha x (rec alpha-0)))
    (y-0 (mul (rec alpha-1) y-1 alpha-2)) (y-1 x-0))
  (precur (5 0))
  (operation encryption-test (added-strand group-init 1)
    (enc "Group id" group-1 (exp (gen) alpha-2) k-magic-2) (8 0))
  (traces
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (send (enc a b group (exp (gen) (mul alpha x)) (privk a)))
      (recv
        (enc a b group (exp (gen) (mul y alpha-0))
          (exp (gen) (mul alpha x)) (privk b)))
      (send (enc n (exp (gen) (mul y x alpha-0)))) (recv n))
    ((send (enc "Group id" group (exp (gen) alpha) k-magic)))
    ((recv (enc "Group id" group (exp (gen) alpha-0) k-magic-0))
      (recv (enc a b group (exp (gen) (mul alpha x)) (privk a)))
      (send
        (enc a b group (exp (gen) (mul y alpha-0))
          (exp (gen) (mul alpha x)) (privk b))))
    ((send (enc "Group id" group (exp (gen) alpha-0) k-magic-0)))
    ((recv (exp (gen) (mul y x alpha-0)))
      (send (exp (gen) (mul y x alpha-0))))
    ((recv
       (cat (exp (gen) (mul y-0 alpha-1))
         (mul y x alpha-0 (rec y-0) (rec alpha-1))))
      (send
        (cat (exp (gen) (mul y-0 alpha-1))
          (mul y x alpha-0 (rec y-0) (rec alpha-1)))))
    ((recv (enc "Group id" group-0 (exp (gen) alpha-1) k-magic-1))
      (recv
        (enc a-0 b-0 group-0 (exp (gen) (mul y-1 alpha-2)) (privk a-0)))
      (send
        (enc a-0 b-0 group-0 (exp (gen) (mul y-0 alpha-1))
          (exp (gen) (mul y-1 alpha-2)) (privk b-0))))
    ((send (enc "Group id" group-0 (exp (gen) alpha-1) k-magic-1)))
    ((recv (enc "Group id" group-1 (exp (gen) alpha-2) k-magic-2))
      (recv
        (enc a-1 b-1 group-1 (exp (gen) (mul x-0 alpha-2)) (privk a-1)))
      (send
        (enc a-1 b-1 group-1 (exp (gen) (mul y-1 alpha-2))
          (exp (gen) (mul x-0 alpha-2)) (privk b-1))))
    ((send (enc "Group id" group-1 (exp (gen) alpha-2) k-magic-2))))
  (label 183)
  (parent 91)
  (unrealized (4 0) (5 0) (8 1))
  (aborted)
  (comment "aborted"))

(defskeleton dh_sig2
  (vars (k-magic k-magic-0 k-magic-1 skey) (n group group-0 text)
    (a b a-0 b-0 a-1 b-1 name) (alpha y x alpha-0 y-0 rndx) (x-0 expt)
    (y-1 alpha-1 rndx))
  (defstrand init 5 (k-magic k-magic) (n n) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (x x) (y (mul (rec alpha) y alpha-0)))
  (defstrand group-init 1 (k-magic k-magic) (group group) (alpha alpha))
  (defstrand resp 3 (k-magic k-magic-0) (group group) (a a) (b b)
    (g (exp (gen) alpha-0)) (y y) (x (mul alpha x (rec alpha-0))))
  (defstrand group-init 1 (k-magic k-magic-0) (group group)
    (alpha alpha-0))
  (deflistener (exp (gen) (mul y x alpha-0)))
  (deflistener
    (cat (exp (gen) (mul y-0 alpha-1))
      (mul y x alpha-0 (rec y-0) (rec alpha-1))))
  (defstrand resp 3 (k-magic k-magic-1) (group group-0) (a a-0) (b b-0)
    (g (exp (gen) alpha-1)) (y y-0) (x y-1))
  (defstrand group-init 1 (k-magic k-magic-1) (group group-0)
    (alpha alpha-1))
  (defstrand resp 3 (k-magic k-magic-1) (group group-0) (a a-1) (b b-1)
    (g (exp (gen) alpha-1)) (y y-1) (x x-0))
  (precedes ((0 1) (2 0)) ((1 0) (0 0)) ((2 2) (0 2)) ((2 2) (6 0))
    ((3 0) (2 0)) ((4 1) (0 4)) ((5 1) (4 0)) ((6 2) (5 0))
    ((7 0) (6 0)) ((7 0) (8 0)) ((8 2) (6 1)))
  (non-orig k-magic k-magic-0 k-magic-1 (privk a) (privk b))
  (uniq-gen n alpha y x alpha-0 y-0 y-1 alpha-1)
  (absent (y (mul alpha x (rec alpha-0))) (y-0 y-1) (y-1 x-0))
  (precur (5 0))
  (operation encryption-test (displaced 9 7 group-init 1)
    (enc "Group id" group-1 (exp (gen) alpha-2) k-magic-2) (8 0))
  (traces
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (send (enc a b group (exp (gen) (mul alpha x)) (privk a)))
      (recv
        (enc a b group (exp (gen) (mul y alpha-0))
          (exp (gen) (mul alpha x)) (privk b)))
      (send (enc n (exp (gen) (mul y x alpha-0)))) (recv n))
    ((send (enc "Group id" group (exp (gen) alpha) k-magic)))
    ((recv (enc "Group id" group (exp (gen) alpha-0) k-magic-0))
      (recv (enc a b group (exp (gen) (mul alpha x)) (privk a)))
      (send
        (enc a b group (exp (gen) (mul y alpha-0))
          (exp (gen) (mul alpha x)) (privk b))))
    ((send (enc "Group id" group (exp (gen) alpha-0) k-magic-0)))
    ((recv (exp (gen) (mul y x alpha-0)))
      (send (exp (gen) (mul y x alpha-0))))
    ((recv
       (cat (exp (gen) (mul y-0 alpha-1))
         (mul y x alpha-0 (rec y-0) (rec alpha-1))))
      (send
        (cat (exp (gen) (mul y-0 alpha-1))
          (mul y x alpha-0 (rec y-0) (rec alpha-1)))))
    ((recv (enc "Group id" group-0 (exp (gen) alpha-1) k-magic-1))
      (recv
        (enc a-0 b-0 group-0 (exp (gen) (mul y-1 alpha-1)) (privk a-0)))
      (send
        (enc a-0 b-0 group-0 (exp (gen) (mul y-0 alpha-1))
          (exp (gen) (mul y-1 alpha-1)) (privk b-0))))
    ((send (enc "Group id" group-0 (exp (gen) alpha-1) k-magic-1)))
    ((recv (enc "Group id" group-0 (exp (gen) alpha-1) k-magic-1))
      (recv
        (enc a-1 b-1 group-0 (exp (gen) (mul x-0 alpha-1)) (privk a-1)))
      (send
        (enc a-1 b-1 group-0 (exp (gen) (mul y-1 alpha-1))
          (exp (gen) (mul x-0 alpha-1)) (privk b-1)))))
  (label 182)
  (parent 91)
  (unrealized (4 0) (5 0) (8 1))
  (aborted)
  (comment "aborted"))

(defskeleton dh_sig2
  (vars (k-magic k-magic-0 k-magic-1 skey) (n group group-0 text)
    (a b a-0 b-0 a-1 b-1 name) (y x alpha y-0 rndx) (x-0 expt)
    (alpha-0 y-1 alpha-1 rndx))
  (defstrand init 5 (k-magic k-magic) (n n) (group group) (a a) (b b)
    (g (exp (gen) alpha-1)) (x x) (y (mul y alpha (rec alpha-1))))
  (defstrand group-init 1 (k-magic k-magic) (group group)
    (alpha alpha-1))
  (defstrand resp 3 (k-magic k-magic-0) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (y y) (x (mul x (rec alpha) alpha-1)))
  (defstrand group-init 1 (k-magic k-magic-0) (group group)
    (alpha alpha))
  (deflistener (exp (gen) (mul y x alpha)))
  (deflistener
    (cat (exp (gen) (mul y-0 alpha-0))
      (mul y x alpha (rec y-0) (rec alpha-0))))
  (defstrand resp 3 (k-magic k-magic-1) (group group-0) (a a-0) (b b-0)
    (g (exp (gen) alpha-0)) (y y-0) (x (mul (rec alpha-0) y-1 alpha-1)))
  (defstrand group-init 1 (k-magic k-magic-1) (group group-0)
    (alpha alpha-0))
  (defstrand resp 3 (k-magic k-magic) (group group) (a a-1) (b b-1)
    (g (exp (gen) alpha-1)) (y y-1) (x x-0))
  (precedes ((0 1) (2 0)) ((1 0) (0 0)) ((1 0) (8 0)) ((2 2) (0 2))
    ((2 2) (6 0)) ((3 0) (2 0)) ((4 1) (0 4)) ((5 1) (4 0))
    ((6 2) (5 0)) ((7 0) (6 0)) ((7 0) (8 0)) ((8 2) (6 1)))
  (non-orig k-magic k-magic-0 k-magic-1 (privk a) (privk b))
  (uniq-gen n y x alpha y-0 alpha-0 y-1 alpha-1)
  (absent (y (mul x (rec alpha) alpha-1))
    (y-0 (mul (rec alpha-0) y-1 alpha-1)) (y-1 x-0))
  (precur (5 0))
  (operation encryption-test (displaced 9 1 group-init 1)
    (enc "Group id" group-1 (exp (gen) alpha-2) k-magic-2) (8 0))
  (traces
    ((recv (enc "Group id" group (exp (gen) alpha-1) k-magic))
      (send (enc a b group (exp (gen) (mul x alpha-1)) (privk a)))
      (recv
        (enc a b group (exp (gen) (mul y alpha))
          (exp (gen) (mul x alpha-1)) (privk b)))
      (send (enc n (exp (gen) (mul y x alpha)))) (recv n))
    ((send (enc "Group id" group (exp (gen) alpha-1) k-magic)))
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic-0))
      (recv (enc a b group (exp (gen) (mul x alpha-1)) (privk a)))
      (send
        (enc a b group (exp (gen) (mul y alpha))
          (exp (gen) (mul x alpha-1)) (privk b))))
    ((send (enc "Group id" group (exp (gen) alpha) k-magic-0)))
    ((recv (exp (gen) (mul y x alpha)))
      (send (exp (gen) (mul y x alpha))))
    ((recv
       (cat (exp (gen) (mul y-0 alpha-0))
         (mul y x alpha (rec y-0) (rec alpha-0))))
      (send
        (cat (exp (gen) (mul y-0 alpha-0))
          (mul y x alpha (rec y-0) (rec alpha-0)))))
    ((recv (enc "Group id" group-0 (exp (gen) alpha-0) k-magic-1))
      (recv
        (enc a-0 b-0 group-0 (exp (gen) (mul y-1 alpha-1)) (privk a-0)))
      (send
        (enc a-0 b-0 group-0 (exp (gen) (mul y-0 alpha-0))
          (exp (gen) (mul y-1 alpha-1)) (privk b-0))))
    ((send (enc "Group id" group-0 (exp (gen) alpha-0) k-magic-1)))
    ((recv (enc "Group id" group (exp (gen) alpha-1) k-magic))
      (recv
        (enc a-1 b-1 group (exp (gen) (mul x-0 alpha-1)) (privk a-1)))
      (send
        (enc a-1 b-1 group (exp (gen) (mul y-1 alpha-1))
          (exp (gen) (mul x-0 alpha-1)) (privk b-1)))))
  (label 181)
  (parent 91)
  (unrealized (4 0) (5 0) (8 1))
  (aborted)
  (comment "aborted"))

(defskeleton dh_sig2
  (vars (k-magic k-magic-0 k-magic-1 skey) (n group group-0 text)
    (a b a-0 b-0 a-1 b-1 name) (alpha y x y-0 rndx) (x-0 expt)
    (alpha-0 y-1 alpha-1 rndx))
  (defstrand init 5 (k-magic k-magic) (n n) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (x x) (y (mul (rec alpha) y alpha-1)))
  (defstrand group-init 1 (k-magic k-magic) (group group) (alpha alpha))
  (defstrand resp 3 (k-magic k-magic-0) (group group) (a a) (b b)
    (g (exp (gen) alpha-1)) (y y) (x (mul alpha x (rec alpha-1))))
  (defstrand group-init 1 (k-magic k-magic-0) (group group)
    (alpha alpha-1))
  (deflistener (exp (gen) (mul y x alpha-1)))
  (deflistener
    (cat (exp (gen) (mul y-0 alpha-0))
      (mul y x (rec y-0) (rec alpha-0) alpha-1)))
  (defstrand resp 3 (k-magic k-magic-1) (group group-0) (a a-0) (b b-0)
    (g (exp (gen) alpha-0)) (y y-0) (x (mul (rec alpha-0) y-1 alpha-1)))
  (defstrand group-init 1 (k-magic k-magic-1) (group group-0)
    (alpha alpha-0))
  (defstrand resp 3 (k-magic k-magic-0) (group group) (a a-1) (b b-1)
    (g (exp (gen) alpha-1)) (y y-1) (x x-0))
  (precedes ((0 1) (2 0)) ((1 0) (0 0)) ((2 2) (0 2)) ((2 2) (6 0))
    ((3 0) (2 0)) ((3 0) (8 0)) ((4 1) (0 4)) ((5 1) (4 0))
    ((6 2) (5 0)) ((7 0) (6 0)) ((7 0) (8 0)) ((8 2) (6 1)))
  (non-orig k-magic k-magic-0 k-magic-1 (privk a) (privk b))
  (uniq-gen n alpha y x y-0 alpha-0 y-1 alpha-1)
  (absent (y (mul alpha x (rec alpha-1)))
    (y-0 (mul (rec alpha-0) y-1 alpha-1)) (y-1 x-0))
  (precur (5 0))
  (operation encryption-test (displaced 9 3 group-init 1)
    (enc "Group id" group-1 (exp (gen) alpha-2) k-magic-2) (8 0))
  (traces
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (send (enc a b group (exp (gen) (mul alpha x)) (privk a)))
      (recv
        (enc a b group (exp (gen) (mul y alpha-1))
          (exp (gen) (mul alpha x)) (privk b)))
      (send (enc n (exp (gen) (mul y x alpha-1)))) (recv n))
    ((send (enc "Group id" group (exp (gen) alpha) k-magic)))
    ((recv (enc "Group id" group (exp (gen) alpha-1) k-magic-0))
      (recv (enc a b group (exp (gen) (mul alpha x)) (privk a)))
      (send
        (enc a b group (exp (gen) (mul y alpha-1))
          (exp (gen) (mul alpha x)) (privk b))))
    ((send (enc "Group id" group (exp (gen) alpha-1) k-magic-0)))
    ((recv (exp (gen) (mul y x alpha-1)))
      (send (exp (gen) (mul y x alpha-1))))
    ((recv
       (cat (exp (gen) (mul y-0 alpha-0))
         (mul y x (rec y-0) (rec alpha-0) alpha-1)))
      (send
        (cat (exp (gen) (mul y-0 alpha-0))
          (mul y x (rec y-0) (rec alpha-0) alpha-1))))
    ((recv (enc "Group id" group-0 (exp (gen) alpha-0) k-magic-1))
      (recv
        (enc a-0 b-0 group-0 (exp (gen) (mul y-1 alpha-1)) (privk a-0)))
      (send
        (enc a-0 b-0 group-0 (exp (gen) (mul y-0 alpha-0))
          (exp (gen) (mul y-1 alpha-1)) (privk b-0))))
    ((send (enc "Group id" group-0 (exp (gen) alpha-0) k-magic-1)))
    ((recv (enc "Group id" group (exp (gen) alpha-1) k-magic-0))
      (recv
        (enc a-1 b-1 group (exp (gen) (mul x-0 alpha-1)) (privk a-1)))
      (send
        (enc a-1 b-1 group (exp (gen) (mul y-1 alpha-1))
          (exp (gen) (mul x-0 alpha-1)) (privk b-1)))))
  (label 180)
  (parent 91)
  (unrealized (4 0) (5 0) (8 1))
  (aborted)
  (comment "aborted"))

(defskeleton dh_sig2
  (vars (k-magic k-magic-0 k-magic-1 k-magic-2 skey)
    (n group group-0 group-1 text) (a b a-0 b-0 a-1 b-1 name)
    (alpha y x alpha-0 y-0 alpha-1 x-0 alpha-2 rndx))
  (defstrand init 5 (k-magic k-magic) (n n) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (x x) (y (mul (rec alpha) y alpha-0)))
  (defstrand group-init 1 (k-magic k-magic) (group group) (alpha alpha))
  (defstrand resp 3 (k-magic k-magic-0) (group group) (a a) (b b)
    (g (exp (gen) alpha-0)) (y y) (x (mul alpha x (rec alpha-0))))
  (defstrand group-init 1 (k-magic k-magic-0) (group group)
    (alpha alpha-0))
  (deflistener (exp (gen) (mul y x alpha-0)))
  (deflistener
    (cat (exp (gen) (mul y-0 alpha-1))
      (mul y x alpha-0 (rec y-0) (rec alpha-1))))
  (defstrand resp 3 (k-magic k-magic-1) (group group-0) (a a-0) (b b-0)
    (g (exp (gen) alpha-1)) (y y-0) (x (mul (rec alpha-1) x-0 alpha-2)))
  (defstrand group-init 1 (k-magic k-magic-1) (group group-0)
    (alpha alpha-1))
  (defstrand init 2 (k-magic k-magic-2) (group group-1) (a a-1) (b b-1)
    (g (exp (gen) alpha-2)) (x x-0))
  (defstrand group-init 1 (k-magic k-magic-2) (group group-1)
    (alpha alpha-2))
  (precedes ((0 1) (2 0)) ((1 0) (0 0)) ((2 2) (0 2)) ((2 2) (6 0))
    ((3 0) (2 0)) ((4 1) (0 4)) ((5 1) (4 0)) ((6 2) (5 0))
    ((7 0) (6 0)) ((7 0) (8 0)) ((8 1) (6 1)) ((9 0) (8 0)))
  (non-orig k-magic k-magic-0 k-magic-1 k-magic-2 (privk a) (privk b))
  (uniq-gen n alpha y x alpha-0 y-0 alpha-1 x-0 alpha-2)
  (absent (y (mul alpha x (rec alpha-0)))
    (y-0 (mul (rec alpha-1) x-0 alpha-2)))
  (precur (5 0))
  (operation encryption-test (added-strand group-init 1)
    (enc "Group id" group-1 (exp (gen) alpha-2) k-magic-2) (8 0))
  (traces
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (send (enc a b group (exp (gen) (mul alpha x)) (privk a)))
      (recv
        (enc a b group (exp (gen) (mul y alpha-0))
          (exp (gen) (mul alpha x)) (privk b)))
      (send (enc n (exp (gen) (mul y x alpha-0)))) (recv n))
    ((send (enc "Group id" group (exp (gen) alpha) k-magic)))
    ((recv (enc "Group id" group (exp (gen) alpha-0) k-magic-0))
      (recv (enc a b group (exp (gen) (mul alpha x)) (privk a)))
      (send
        (enc a b group (exp (gen) (mul y alpha-0))
          (exp (gen) (mul alpha x)) (privk b))))
    ((send (enc "Group id" group (exp (gen) alpha-0) k-magic-0)))
    ((recv (exp (gen) (mul y x alpha-0)))
      (send (exp (gen) (mul y x alpha-0))))
    ((recv
       (cat (exp (gen) (mul y-0 alpha-1))
         (mul y x alpha-0 (rec y-0) (rec alpha-1))))
      (send
        (cat (exp (gen) (mul y-0 alpha-1))
          (mul y x alpha-0 (rec y-0) (rec alpha-1)))))
    ((recv (enc "Group id" group-0 (exp (gen) alpha-1) k-magic-1))
      (recv
        (enc a-0 b-0 group-0 (exp (gen) (mul x-0 alpha-2)) (privk a-0)))
      (send
        (enc a-0 b-0 group-0 (exp (gen) (mul y-0 alpha-1))
          (exp (gen) (mul x-0 alpha-2)) (privk b-0))))
    ((send (enc "Group id" group-0 (exp (gen) alpha-1) k-magic-1)))
    ((recv (enc "Group id" group-1 (exp (gen) alpha-2) k-magic-2))
      (send
        (enc a-1 b-1 group-1 (exp (gen) (mul x-0 alpha-2))
          (privk a-1))))
    ((send (enc "Group id" group-1 (exp (gen) alpha-2) k-magic-2))))
  (label 179)
  (parent 88)
  (unrealized (4 0) (5 0))
  (aborted)
  (comment "aborted"))

(defskeleton dh_sig2
  (vars (k-magic k-magic-0 k-magic-1 skey) (n group group-0 text)
    (a b a-0 b-0 a-1 b-1 name) (alpha y x alpha-0 y-0 x-0 alpha-1 rndx))
  (defstrand init 5 (k-magic k-magic) (n n) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (x x) (y (mul (rec alpha) y alpha-0)))
  (defstrand group-init 1 (k-magic k-magic) (group group) (alpha alpha))
  (defstrand resp 3 (k-magic k-magic-0) (group group) (a a) (b b)
    (g (exp (gen) alpha-0)) (y y) (x (mul alpha x (rec alpha-0))))
  (defstrand group-init 1 (k-magic k-magic-0) (group group)
    (alpha alpha-0))
  (deflistener (exp (gen) (mul y x alpha-0)))
  (deflistener
    (cat (exp (gen) (mul y-0 alpha-1))
      (mul y x alpha-0 (rec y-0) (rec alpha-1))))
  (defstrand resp 3 (k-magic k-magic-1) (group group-0) (a a-0) (b b-0)
    (g (exp (gen) alpha-1)) (y y-0) (x x-0))
  (defstrand group-init 1 (k-magic k-magic-1) (group group-0)
    (alpha alpha-1))
  (defstrand init 2 (k-magic k-magic-1) (group group-0) (a a-1) (b b-1)
    (g (exp (gen) alpha-1)) (x x-0))
  (precedes ((0 1) (2 0)) ((1 0) (0 0)) ((2 2) (0 2)) ((2 2) (6 0))
    ((3 0) (2 0)) ((4 1) (0 4)) ((5 1) (4 0)) ((6 2) (5 0))
    ((7 0) (6 0)) ((7 0) (8 0)) ((8 1) (6 1)))
  (non-orig k-magic k-magic-0 k-magic-1 (privk a) (privk b))
  (uniq-gen n alpha y x alpha-0 y-0 x-0 alpha-1)
  (absent (y (mul alpha x (rec alpha-0))) (y-0 x-0))
  (precur (5 0))
  (operation encryption-test (displaced 9 7 group-init 1)
    (enc "Group id" group-1 (exp (gen) alpha-2) k-magic-2) (8 0))
  (traces
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (send (enc a b group (exp (gen) (mul alpha x)) (privk a)))
      (recv
        (enc a b group (exp (gen) (mul y alpha-0))
          (exp (gen) (mul alpha x)) (privk b)))
      (send (enc n (exp (gen) (mul y x alpha-0)))) (recv n))
    ((send (enc "Group id" group (exp (gen) alpha) k-magic)))
    ((recv (enc "Group id" group (exp (gen) alpha-0) k-magic-0))
      (recv (enc a b group (exp (gen) (mul alpha x)) (privk a)))
      (send
        (enc a b group (exp (gen) (mul y alpha-0))
          (exp (gen) (mul alpha x)) (privk b))))
    ((send (enc "Group id" group (exp (gen) alpha-0) k-magic-0)))
    ((recv (exp (gen) (mul y x alpha-0)))
      (send (exp (gen) (mul y x alpha-0))))
    ((recv
       (cat (exp (gen) (mul y-0 alpha-1))
         (mul y x alpha-0 (rec y-0) (rec alpha-1))))
      (send
        (cat (exp (gen) (mul y-0 alpha-1))
          (mul y x alpha-0 (rec y-0) (rec alpha-1)))))
    ((recv (enc "Group id" group-0 (exp (gen) alpha-1) k-magic-1))
      (recv
        (enc a-0 b-0 group-0 (exp (gen) (mul x-0 alpha-1)) (privk a-0)))
      (send
        (enc a-0 b-0 group-0 (exp (gen) (mul y-0 alpha-1))
          (exp (gen) (mul x-0 alpha-1)) (privk b-0))))
    ((send (enc "Group id" group-0 (exp (gen) alpha-1) k-magic-1)))
    ((recv (enc "Group id" group-0 (exp (gen) alpha-1) k-magic-1))
      (send
        (enc a-1 b-1 group-0 (exp (gen) (mul x-0 alpha-1))
          (privk a-1)))))
  (label 178)
  (parent 88)
  (unrealized (4 0) (5 0))
  (aborted)
  (comment "aborted"))

(defskeleton dh_sig2
  (vars (k-magic k-magic-0 k-magic-1 skey) (n group group-0 text)
    (a b a-0 b-0 a-1 b-1 name) (y x alpha y-0 alpha-0 x-0 alpha-1 rndx))
  (defstrand init 5 (k-magic k-magic) (n n) (group group) (a a) (b b)
    (g (exp (gen) alpha-1)) (x x) (y (mul y alpha (rec alpha-1))))
  (defstrand group-init 1 (k-magic k-magic) (group group)
    (alpha alpha-1))
  (defstrand resp 3 (k-magic k-magic-0) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (y y) (x (mul x (rec alpha) alpha-1)))
  (defstrand group-init 1 (k-magic k-magic-0) (group group)
    (alpha alpha))
  (deflistener (exp (gen) (mul y x alpha)))
  (deflistener
    (cat (exp (gen) (mul y-0 alpha-0))
      (mul y x alpha (rec y-0) (rec alpha-0))))
  (defstrand resp 3 (k-magic k-magic-1) (group group-0) (a a-0) (b b-0)
    (g (exp (gen) alpha-0)) (y y-0) (x (mul (rec alpha-0) x-0 alpha-1)))
  (defstrand group-init 1 (k-magic k-magic-1) (group group-0)
    (alpha alpha-0))
  (defstrand init 2 (k-magic k-magic) (group group) (a a-1) (b b-1)
    (g (exp (gen) alpha-1)) (x x-0))
  (precedes ((0 1) (2 0)) ((1 0) (0 0)) ((1 0) (8 0)) ((2 2) (0 2))
    ((2 2) (6 0)) ((3 0) (2 0)) ((4 1) (0 4)) ((5 1) (4 0))
    ((6 2) (5 0)) ((7 0) (6 0)) ((7 0) (8 0)) ((8 1) (6 1)))
  (non-orig k-magic k-magic-0 k-magic-1 (privk a) (privk b))
  (uniq-gen n y x alpha y-0 alpha-0 x-0 alpha-1)
  (absent (y (mul x (rec alpha) alpha-1))
    (y-0 (mul (rec alpha-0) x-0 alpha-1)))
  (precur (5 0))
  (operation encryption-test (displaced 9 1 group-init 1)
    (enc "Group id" group-1 (exp (gen) alpha-2) k-magic-2) (8 0))
  (traces
    ((recv (enc "Group id" group (exp (gen) alpha-1) k-magic))
      (send (enc a b group (exp (gen) (mul x alpha-1)) (privk a)))
      (recv
        (enc a b group (exp (gen) (mul y alpha))
          (exp (gen) (mul x alpha-1)) (privk b)))
      (send (enc n (exp (gen) (mul y x alpha)))) (recv n))
    ((send (enc "Group id" group (exp (gen) alpha-1) k-magic)))
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic-0))
      (recv (enc a b group (exp (gen) (mul x alpha-1)) (privk a)))
      (send
        (enc a b group (exp (gen) (mul y alpha))
          (exp (gen) (mul x alpha-1)) (privk b))))
    ((send (enc "Group id" group (exp (gen) alpha) k-magic-0)))
    ((recv (exp (gen) (mul y x alpha)))
      (send (exp (gen) (mul y x alpha))))
    ((recv
       (cat (exp (gen) (mul y-0 alpha-0))
         (mul y x alpha (rec y-0) (rec alpha-0))))
      (send
        (cat (exp (gen) (mul y-0 alpha-0))
          (mul y x alpha (rec y-0) (rec alpha-0)))))
    ((recv (enc "Group id" group-0 (exp (gen) alpha-0) k-magic-1))
      (recv
        (enc a-0 b-0 group-0 (exp (gen) (mul x-0 alpha-1)) (privk a-0)))
      (send
        (enc a-0 b-0 group-0 (exp (gen) (mul y-0 alpha-0))
          (exp (gen) (mul x-0 alpha-1)) (privk b-0))))
    ((send (enc "Group id" group-0 (exp (gen) alpha-0) k-magic-1)))
    ((recv (enc "Group id" group (exp (gen) alpha-1) k-magic))
      (send
        (enc a-1 b-1 group (exp (gen) (mul x-0 alpha-1)) (privk a-1)))))
  (label 177)
  (parent 88)
  (unrealized (4 0) (5 0))
  (aborted)
  (comment "aborted"))

(defskeleton dh_sig2
  (vars (k-magic k-magic-0 k-magic-1 skey) (n group group-0 text)
    (a b a-0 b-0 a-1 b-1 name) (alpha y x y-0 alpha-0 x-0 alpha-1 rndx))
  (defstrand init 5 (k-magic k-magic) (n n) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (x x) (y (mul (rec alpha) y alpha-1)))
  (defstrand group-init 1 (k-magic k-magic) (group group) (alpha alpha))
  (defstrand resp 3 (k-magic k-magic-0) (group group) (a a) (b b)
    (g (exp (gen) alpha-1)) (y y) (x (mul alpha x (rec alpha-1))))
  (defstrand group-init 1 (k-magic k-magic-0) (group group)
    (alpha alpha-1))
  (deflistener (exp (gen) (mul y x alpha-1)))
  (deflistener
    (cat (exp (gen) (mul y-0 alpha-0))
      (mul y x (rec y-0) (rec alpha-0) alpha-1)))
  (defstrand resp 3 (k-magic k-magic-1) (group group-0) (a a-0) (b b-0)
    (g (exp (gen) alpha-0)) (y y-0) (x (mul (rec alpha-0) x-0 alpha-1)))
  (defstrand group-init 1 (k-magic k-magic-1) (group group-0)
    (alpha alpha-0))
  (defstrand init 2 (k-magic k-magic-0) (group group) (a a-1) (b b-1)
    (g (exp (gen) alpha-1)) (x x-0))
  (precedes ((0 1) (2 0)) ((1 0) (0 0)) ((2 2) (0 2)) ((2 2) (6 0))
    ((3 0) (2 0)) ((3 0) (8 0)) ((4 1) (0 4)) ((5 1) (4 0))
    ((6 2) (5 0)) ((7 0) (6 0)) ((7 0) (8 0)) ((8 1) (6 1)))
  (non-orig k-magic k-magic-0 k-magic-1 (privk a) (privk b))
  (uniq-gen n alpha y x y-0 alpha-0 x-0 alpha-1)
  (absent (y (mul alpha x (rec alpha-1)))
    (y-0 (mul (rec alpha-0) x-0 alpha-1)))
  (precur (5 0))
  (operation encryption-test (displaced 9 3 group-init 1)
    (enc "Group id" group-1 (exp (gen) alpha-2) k-magic-2) (8 0))
  (traces
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (send (enc a b group (exp (gen) (mul alpha x)) (privk a)))
      (recv
        (enc a b group (exp (gen) (mul y alpha-1))
          (exp (gen) (mul alpha x)) (privk b)))
      (send (enc n (exp (gen) (mul y x alpha-1)))) (recv n))
    ((send (enc "Group id" group (exp (gen) alpha) k-magic)))
    ((recv (enc "Group id" group (exp (gen) alpha-1) k-magic-0))
      (recv (enc a b group (exp (gen) (mul alpha x)) (privk a)))
      (send
        (enc a b group (exp (gen) (mul y alpha-1))
          (exp (gen) (mul alpha x)) (privk b))))
    ((send (enc "Group id" group (exp (gen) alpha-1) k-magic-0)))
    ((recv (exp (gen) (mul y x alpha-1)))
      (send (exp (gen) (mul y x alpha-1))))
    ((recv
       (cat (exp (gen) (mul y-0 alpha-0))
         (mul y x (rec y-0) (rec alpha-0) alpha-1)))
      (send
        (cat (exp (gen) (mul y-0 alpha-0))
          (mul y x (rec y-0) (rec alpha-0) alpha-1))))
    ((recv (enc "Group id" group-0 (exp (gen) alpha-0) k-magic-1))
      (recv
        (enc a-0 b-0 group-0 (exp (gen) (mul x-0 alpha-1)) (privk a-0)))
      (send
        (enc a-0 b-0 group-0 (exp (gen) (mul y-0 alpha-0))
          (exp (gen) (mul x-0 alpha-1)) (privk b-0))))
    ((send (enc "Group id" group-0 (exp (gen) alpha-0) k-magic-1)))
    ((recv (enc "Group id" group (exp (gen) alpha-1) k-magic-0))
      (send
        (enc a-1 b-1 group (exp (gen) (mul x-0 alpha-1)) (privk a-1)))))
  (label 176)
  (parent 88)
  (unrealized (4 0) (5 0))
  (aborted)
  (comment "aborted"))

(defskeleton dh_sig2
  (vars (k-magic k-magic-0 k-magic-1 skey) (n group group-0 text)
    (a b a-0 b-0 name) (y x alpha y-0 alpha-0 alpha-1 rndx) (w expt))
  (defstrand init 5 (k-magic k-magic) (n n) (group group) (a a) (b b)
    (g (exp (gen) alpha-1)) (x x) (y (mul y alpha (rec alpha-1))))
  (defstrand group-init 1 (k-magic k-magic) (group group)
    (alpha alpha-1))
  (defstrand resp 3 (k-magic k-magic-0) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (y y) (x (mul x (rec alpha) alpha-1)))
  (defstrand group-init 1 (k-magic k-magic-0) (group group)
    (alpha alpha))
  (deflistener (exp (gen) (mul y x alpha)))
  (deflistener
    (cat (exp (gen) (mul y-0 alpha-0))
      (mul y x alpha (rec y-0) (rec alpha-0))))
  (defstrand resp 3 (k-magic k-magic-1) (group group-0) (a a-0) (b b-0)
    (g (exp (gen) alpha-0)) (y y-0) (x (mul (rec alpha-0) alpha-1)))
  (defstrand group-init 1 (k-magic k-magic-1) (group group-0)
    (alpha alpha-0))
  (deflistener (cat (exp (gen) (mul alpha-1 (rec w))) w))
  (precedes ((0 1) (2 0)) ((1 0) (0 0)) ((1 0) (8 0)) ((2 2) (0 2))
    ((2 2) (6 0)) ((3 0) (2 0)) ((4 1) (0 4)) ((5 1) (4 0))
    ((6 2) (5 0)) ((7 0) (6 0)) ((8 1) (6 1)))
  (non-orig k-magic k-magic-0 k-magic-1 (privk a) (privk b))
  (uniq-gen n y x alpha y-0 alpha-0 alpha-1)
  (absent (y (mul x (rec alpha) alpha-1))
    (y-0 (mul (rec alpha-0) alpha-1)))
  (precur (5 0) (8 0))
  (operation nonce-test
    (added-listener (cat (exp (gen) (mul alpha-1 (rec w))) w))
    (exp (gen) alpha-1) (6 1)
    (enc "Group id" group (exp (gen) alpha-1) k-magic))
  (traces
    ((recv (enc "Group id" group (exp (gen) alpha-1) k-magic))
      (send (enc a b group (exp (gen) (mul x alpha-1)) (privk a)))
      (recv
        (enc a b group (exp (gen) (mul y alpha))
          (exp (gen) (mul x alpha-1)) (privk b)))
      (send (enc n (exp (gen) (mul y x alpha)))) (recv n))
    ((send (enc "Group id" group (exp (gen) alpha-1) k-magic)))
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic-0))
      (recv (enc a b group (exp (gen) (mul x alpha-1)) (privk a)))
      (send
        (enc a b group (exp (gen) (mul y alpha))
          (exp (gen) (mul x alpha-1)) (privk b))))
    ((send (enc "Group id" group (exp (gen) alpha) k-magic-0)))
    ((recv (exp (gen) (mul y x alpha)))
      (send (exp (gen) (mul y x alpha))))
    ((recv
       (cat (exp (gen) (mul y-0 alpha-0))
         (mul y x alpha (rec y-0) (rec alpha-0))))
      (send
        (cat (exp (gen) (mul y-0 alpha-0))
          (mul y x alpha (rec y-0) (rec alpha-0)))))
    ((recv (enc "Group id" group-0 (exp (gen) alpha-0) k-magic-1))
      (recv (enc a-0 b-0 group-0 (exp (gen) alpha-1) (privk a-0)))
      (send
        (enc a-0 b-0 group-0 (exp (gen) (mul y-0 alpha-0))
          (exp (gen) alpha-1) (privk b-0))))
    ((send (enc "Group id" group-0 (exp (gen) alpha-0) k-magic-1)))
    ((recv (cat (exp (gen) (mul alpha-1 (rec w))) w))
      (send (cat (exp (gen) (mul alpha-1 (rec w))) w))))
  (label 175)
  (parent 87)
  (unrealized (4 0) (5 0) (8 0))
  (aborted)
  (comment "aborted"))

(defskeleton dh_sig2
  (vars (k-magic k-magic-0 k-magic-1 k-magic-2 skey)
    (n group group-0 group-1 text) (a b a-0 b-0 a-1 b-1 name)
    (y x alpha y-0 alpha-0 alpha-1 y-1 rndx) (x-0 expt))
  (defstrand init 5 (k-magic k-magic) (n n) (group group) (a a) (b b)
    (g (exp (gen) alpha-1)) (x x) (y (mul y alpha (rec alpha-1))))
  (defstrand group-init 1 (k-magic k-magic) (group group)
    (alpha alpha-1))
  (defstrand resp 3 (k-magic k-magic-0) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (y y) (x (mul x (rec alpha) alpha-1)))
  (defstrand group-init 1 (k-magic k-magic-0) (group group)
    (alpha alpha))
  (deflistener (exp (gen) (mul y x alpha)))
  (deflistener
    (cat (exp (gen) (mul y-0 alpha-0))
      (mul y x alpha (rec y-0) (rec alpha-0))))
  (defstrand resp 3 (k-magic k-magic-1) (group group-0) (a a-0) (b b-0)
    (g (exp (gen) alpha-0)) (y y-0) (x (mul (rec alpha-0) alpha-1)))
  (defstrand group-init 1 (k-magic k-magic-1) (group group-0)
    (alpha alpha-0))
  (defstrand resp 3 (k-magic k-magic-2) (group group-1) (a a-1) (b b-1)
    (g (exp (gen) (mul alpha-1 (rec y-1)))) (y y-1) (x x-0))
  (precedes ((0 1) (2 0)) ((1 0) (0 0)) ((1 0) (8 0)) ((2 2) (0 2))
    ((2 2) (6 0)) ((3 0) (2 0)) ((4 1) (0 4)) ((5 1) (4 0))
    ((6 2) (5 0)) ((7 0) (6 0)) ((8 2) (6 1)))
  (non-orig k-magic k-magic-0 k-magic-1 k-magic-2 (privk a) (privk b))
  (uniq-gen n y x alpha y-0 alpha-0 alpha-1 y-1)
  (absent (y (mul x (rec alpha) alpha-1))
    (y-0 (mul (rec alpha-0) alpha-1)) (y-1 x-0))
  (precur (5 0))
  (operation nonce-test (added-strand resp 3) (exp (gen) alpha-1) (6 1)
    (enc "Group id" group (exp (gen) alpha-1) k-magic))
  (traces
    ((recv (enc "Group id" group (exp (gen) alpha-1) k-magic))
      (send (enc a b group (exp (gen) (mul x alpha-1)) (privk a)))
      (recv
        (enc a b group (exp (gen) (mul y alpha))
          (exp (gen) (mul x alpha-1)) (privk b)))
      (send (enc n (exp (gen) (mul y x alpha)))) (recv n))
    ((send (enc "Group id" group (exp (gen) alpha-1) k-magic)))
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic-0))
      (recv (enc a b group (exp (gen) (mul x alpha-1)) (privk a)))
      (send
        (enc a b group (exp (gen) (mul y alpha))
          (exp (gen) (mul x alpha-1)) (privk b))))
    ((send (enc "Group id" group (exp (gen) alpha) k-magic-0)))
    ((recv (exp (gen) (mul y x alpha)))
      (send (exp (gen) (mul y x alpha))))
    ((recv
       (cat (exp (gen) (mul y-0 alpha-0))
         (mul y x alpha (rec y-0) (rec alpha-0))))
      (send
        (cat (exp (gen) (mul y-0 alpha-0))
          (mul y x alpha (rec y-0) (rec alpha-0)))))
    ((recv (enc "Group id" group-0 (exp (gen) alpha-0) k-magic-1))
      (recv (enc a-0 b-0 group-0 (exp (gen) alpha-1) (privk a-0)))
      (send
        (enc a-0 b-0 group-0 (exp (gen) (mul y-0 alpha-0))
          (exp (gen) alpha-1) (privk b-0))))
    ((send (enc "Group id" group-0 (exp (gen) alpha-0) k-magic-1)))
    ((recv
       (enc "Group id" group-1 (exp (gen) (mul alpha-1 (rec y-1)))
         k-magic-2))
      (recv
        (enc a-1 b-1 group-1 (exp (gen) (mul alpha-1 (rec y-1) x-0))
          (privk a-1)))
      (send
        (enc a-1 b-1 group-1 (exp (gen) alpha-1)
          (exp (gen) (mul alpha-1 (rec y-1) x-0)) (privk b-1)))))
  (label 174)
  (parent 87)
  (unrealized (4 0) (5 0) (8 0) (8 1))
  (aborted)
  (comment "aborted"))

(defskeleton dh_sig2
  (vars (k-magic k-magic-0 k-magic-1 k-magic-2 skey)
    (n group group-0 group-1 text) (a b a-0 b-0 a-1 b-1 name)
    (y x alpha y-0 alpha-0 alpha-1 x-0 rndx))
  (defstrand init 5 (k-magic k-magic) (n n) (group group) (a a) (b b)
    (g (exp (gen) alpha-1)) (x x) (y (mul y alpha (rec alpha-1))))
  (defstrand group-init 1 (k-magic k-magic) (group group)
    (alpha alpha-1))
  (defstrand resp 3 (k-magic k-magic-0) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (y y) (x (mul x (rec alpha) alpha-1)))
  (defstrand group-init 1 (k-magic k-magic-0) (group group)
    (alpha alpha))
  (deflistener (exp (gen) (mul y x alpha)))
  (deflistener
    (cat (exp (gen) (mul y-0 alpha-0))
      (mul y x alpha (rec y-0) (rec alpha-0))))
  (defstrand resp 3 (k-magic k-magic-1) (group group-0) (a a-0) (b b-0)
    (g (exp (gen) alpha-0)) (y y-0) (x (mul (rec alpha-0) alpha-1)))
  (defstrand group-init 1 (k-magic k-magic-1) (group group-0)
    (alpha alpha-0))
  (defstrand init 2 (k-magic k-magic-2) (group group-1) (a a-1) (b b-1)
    (g (exp (gen) (mul alpha-1 (rec x-0)))) (x x-0))
  (precedes ((0 1) (2 0)) ((1 0) (0 0)) ((1 0) (8 0)) ((2 2) (0 2))
    ((2 2) (6 0)) ((3 0) (2 0)) ((4 1) (0 4)) ((5 1) (4 0))
    ((6 2) (5 0)) ((7 0) (6 0)) ((8 1) (6 1)))
  (non-orig k-magic k-magic-0 k-magic-1 k-magic-2 (privk a) (privk b))
  (uniq-gen n y x alpha y-0 alpha-0 alpha-1 x-0)
  (absent (y (mul x (rec alpha) alpha-1))
    (y-0 (mul (rec alpha-0) alpha-1)))
  (precur (5 0))
  (operation nonce-test (added-strand init 2) (exp (gen) alpha-1) (6 1)
    (enc "Group id" group (exp (gen) alpha-1) k-magic))
  (traces
    ((recv (enc "Group id" group (exp (gen) alpha-1) k-magic))
      (send (enc a b group (exp (gen) (mul x alpha-1)) (privk a)))
      (recv
        (enc a b group (exp (gen) (mul y alpha))
          (exp (gen) (mul x alpha-1)) (privk b)))
      (send (enc n (exp (gen) (mul y x alpha)))) (recv n))
    ((send (enc "Group id" group (exp (gen) alpha-1) k-magic)))
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic-0))
      (recv (enc a b group (exp (gen) (mul x alpha-1)) (privk a)))
      (send
        (enc a b group (exp (gen) (mul y alpha))
          (exp (gen) (mul x alpha-1)) (privk b))))
    ((send (enc "Group id" group (exp (gen) alpha) k-magic-0)))
    ((recv (exp (gen) (mul y x alpha)))
      (send (exp (gen) (mul y x alpha))))
    ((recv
       (cat (exp (gen) (mul y-0 alpha-0))
         (mul y x alpha (rec y-0) (rec alpha-0))))
      (send
        (cat (exp (gen) (mul y-0 alpha-0))
          (mul y x alpha (rec y-0) (rec alpha-0)))))
    ((recv (enc "Group id" group-0 (exp (gen) alpha-0) k-magic-1))
      (recv (enc a-0 b-0 group-0 (exp (gen) alpha-1) (privk a-0)))
      (send
        (enc a-0 b-0 group-0 (exp (gen) (mul y-0 alpha-0))
          (exp (gen) alpha-1) (privk b-0))))
    ((send (enc "Group id" group-0 (exp (gen) alpha-0) k-magic-1)))
    ((recv
       (enc "Group id" group-1 (exp (gen) (mul alpha-1 (rec x-0)))
         k-magic-2))
      (send (enc a-1 b-1 group-1 (exp (gen) alpha-1) (privk a-1)))))
  (label 173)
  (parent 87)
  (unrealized (4 0) (5 0) (8 0))
  (aborted)
  (comment "aborted"))

(defskeleton dh_sig2
  (vars (k-magic k-magic-0 k-magic-1 skey) (n group group-0 text)
    (a b a-0 b-0 name) (alpha y x y-0 alpha-0 alpha-1 rndx) (w expt))
  (defstrand init 5 (k-magic k-magic) (n n) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (x x) (y (mul (rec alpha) y alpha-1)))
  (defstrand group-init 1 (k-magic k-magic) (group group) (alpha alpha))
  (defstrand resp 3 (k-magic k-magic-0) (group group) (a a) (b b)
    (g (exp (gen) alpha-1)) (y y) (x (mul alpha x (rec alpha-1))))
  (defstrand group-init 1 (k-magic k-magic-0) (group group)
    (alpha alpha-1))
  (deflistener (exp (gen) (mul y x alpha-1)))
  (deflistener
    (cat (exp (gen) (mul y-0 alpha-0))
      (mul y x (rec y-0) (rec alpha-0) alpha-1)))
  (defstrand resp 3 (k-magic k-magic-1) (group group-0) (a a-0) (b b-0)
    (g (exp (gen) alpha-0)) (y y-0) (x (mul (rec alpha-0) alpha-1)))
  (defstrand group-init 1 (k-magic k-magic-1) (group group-0)
    (alpha alpha-0))
  (deflistener (cat (exp (gen) (mul alpha-1 (rec w))) w))
  (precedes ((0 1) (2 0)) ((1 0) (0 0)) ((2 2) (0 2)) ((2 2) (6 0))
    ((3 0) (2 0)) ((3 0) (8 0)) ((4 1) (0 4)) ((5 1) (4 0))
    ((6 2) (5 0)) ((7 0) (6 0)) ((8 1) (6 1)))
  (non-orig k-magic k-magic-0 k-magic-1 (privk a) (privk b))
  (uniq-gen n alpha y x y-0 alpha-0 alpha-1)
  (absent (y (mul alpha x (rec alpha-1)))
    (y-0 (mul (rec alpha-0) alpha-1)))
  (precur (5 0) (8 0))
  (operation nonce-test
    (added-listener (cat (exp (gen) (mul alpha-1 (rec w))) w))
    (exp (gen) alpha-1) (6 1)
    (enc "Group id" group (exp (gen) alpha-1) k-magic-0))
  (traces
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (send (enc a b group (exp (gen) (mul alpha x)) (privk a)))
      (recv
        (enc a b group (exp (gen) (mul y alpha-1))
          (exp (gen) (mul alpha x)) (privk b)))
      (send (enc n (exp (gen) (mul y x alpha-1)))) (recv n))
    ((send (enc "Group id" group (exp (gen) alpha) k-magic)))
    ((recv (enc "Group id" group (exp (gen) alpha-1) k-magic-0))
      (recv (enc a b group (exp (gen) (mul alpha x)) (privk a)))
      (send
        (enc a b group (exp (gen) (mul y alpha-1))
          (exp (gen) (mul alpha x)) (privk b))))
    ((send (enc "Group id" group (exp (gen) alpha-1) k-magic-0)))
    ((recv (exp (gen) (mul y x alpha-1)))
      (send (exp (gen) (mul y x alpha-1))))
    ((recv
       (cat (exp (gen) (mul y-0 alpha-0))
         (mul y x (rec y-0) (rec alpha-0) alpha-1)))
      (send
        (cat (exp (gen) (mul y-0 alpha-0))
          (mul y x (rec y-0) (rec alpha-0) alpha-1))))
    ((recv (enc "Group id" group-0 (exp (gen) alpha-0) k-magic-1))
      (recv (enc a-0 b-0 group-0 (exp (gen) alpha-1) (privk a-0)))
      (send
        (enc a-0 b-0 group-0 (exp (gen) (mul y-0 alpha-0))
          (exp (gen) alpha-1) (privk b-0))))
    ((send (enc "Group id" group-0 (exp (gen) alpha-0) k-magic-1)))
    ((recv (cat (exp (gen) (mul alpha-1 (rec w))) w))
      (send (cat (exp (gen) (mul alpha-1 (rec w))) w))))
  (label 172)
  (parent 85)
  (unrealized (4 0) (5 0) (8 0))
  (aborted)
  (comment "aborted"))

(defskeleton dh_sig2
  (vars (k-magic k-magic-0 k-magic-1 k-magic-2 skey)
    (n group group-0 group-1 text) (a b a-0 b-0 a-1 b-1 name)
    (alpha y x y-0 alpha-0 alpha-1 y-1 rndx) (x-0 expt))
  (defstrand init 5 (k-magic k-magic) (n n) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (x x) (y (mul (rec alpha) y alpha-1)))
  (defstrand group-init 1 (k-magic k-magic) (group group) (alpha alpha))
  (defstrand resp 3 (k-magic k-magic-0) (group group) (a a) (b b)
    (g (exp (gen) alpha-1)) (y y) (x (mul alpha x (rec alpha-1))))
  (defstrand group-init 1 (k-magic k-magic-0) (group group)
    (alpha alpha-1))
  (deflistener (exp (gen) (mul y x alpha-1)))
  (deflistener
    (cat (exp (gen) (mul y-0 alpha-0))
      (mul y x (rec y-0) (rec alpha-0) alpha-1)))
  (defstrand resp 3 (k-magic k-magic-1) (group group-0) (a a-0) (b b-0)
    (g (exp (gen) alpha-0)) (y y-0) (x (mul (rec alpha-0) alpha-1)))
  (defstrand group-init 1 (k-magic k-magic-1) (group group-0)
    (alpha alpha-0))
  (defstrand resp 3 (k-magic k-magic-2) (group group-1) (a a-1) (b b-1)
    (g (exp (gen) (mul alpha-1 (rec y-1)))) (y y-1) (x x-0))
  (precedes ((0 1) (2 0)) ((1 0) (0 0)) ((2 2) (0 2)) ((2 2) (6 0))
    ((3 0) (2 0)) ((3 0) (8 0)) ((4 1) (0 4)) ((5 1) (4 0))
    ((6 2) (5 0)) ((7 0) (6 0)) ((8 2) (6 1)))
  (non-orig k-magic k-magic-0 k-magic-1 k-magic-2 (privk a) (privk b))
  (uniq-gen n alpha y x y-0 alpha-0 alpha-1 y-1)
  (absent (y (mul alpha x (rec alpha-1)))
    (y-0 (mul (rec alpha-0) alpha-1)) (y-1 x-0))
  (precur (5 0))
  (operation nonce-test (added-strand resp 3) (exp (gen) alpha-1) (6 1)
    (enc "Group id" group (exp (gen) alpha-1) k-magic-0))
  (traces
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (send (enc a b group (exp (gen) (mul alpha x)) (privk a)))
      (recv
        (enc a b group (exp (gen) (mul y alpha-1))
          (exp (gen) (mul alpha x)) (privk b)))
      (send (enc n (exp (gen) (mul y x alpha-1)))) (recv n))
    ((send (enc "Group id" group (exp (gen) alpha) k-magic)))
    ((recv (enc "Group id" group (exp (gen) alpha-1) k-magic-0))
      (recv (enc a b group (exp (gen) (mul alpha x)) (privk a)))
      (send
        (enc a b group (exp (gen) (mul y alpha-1))
          (exp (gen) (mul alpha x)) (privk b))))
    ((send (enc "Group id" group (exp (gen) alpha-1) k-magic-0)))
    ((recv (exp (gen) (mul y x alpha-1)))
      (send (exp (gen) (mul y x alpha-1))))
    ((recv
       (cat (exp (gen) (mul y-0 alpha-0))
         (mul y x (rec y-0) (rec alpha-0) alpha-1)))
      (send
        (cat (exp (gen) (mul y-0 alpha-0))
          (mul y x (rec y-0) (rec alpha-0) alpha-1))))
    ((recv (enc "Group id" group-0 (exp (gen) alpha-0) k-magic-1))
      (recv (enc a-0 b-0 group-0 (exp (gen) alpha-1) (privk a-0)))
      (send
        (enc a-0 b-0 group-0 (exp (gen) (mul y-0 alpha-0))
          (exp (gen) alpha-1) (privk b-0))))
    ((send (enc "Group id" group-0 (exp (gen) alpha-0) k-magic-1)))
    ((recv
       (enc "Group id" group-1 (exp (gen) (mul alpha-1 (rec y-1)))
         k-magic-2))
      (recv
        (enc a-1 b-1 group-1 (exp (gen) (mul alpha-1 (rec y-1) x-0))
          (privk a-1)))
      (send
        (enc a-1 b-1 group-1 (exp (gen) alpha-1)
          (exp (gen) (mul alpha-1 (rec y-1) x-0)) (privk b-1)))))
  (label 171)
  (parent 85)
  (unrealized (4 0) (5 0) (8 0) (8 1))
  (aborted)
  (comment "aborted"))

(defskeleton dh_sig2
  (vars (k-magic k-magic-0 k-magic-1 k-magic-2 skey)
    (n group group-0 group-1 text) (a b a-0 b-0 a-1 b-1 name)
    (alpha y x y-0 alpha-0 alpha-1 x-0 rndx))
  (defstrand init 5 (k-magic k-magic) (n n) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (x x) (y (mul (rec alpha) y alpha-1)))
  (defstrand group-init 1 (k-magic k-magic) (group group) (alpha alpha))
  (defstrand resp 3 (k-magic k-magic-0) (group group) (a a) (b b)
    (g (exp (gen) alpha-1)) (y y) (x (mul alpha x (rec alpha-1))))
  (defstrand group-init 1 (k-magic k-magic-0) (group group)
    (alpha alpha-1))
  (deflistener (exp (gen) (mul y x alpha-1)))
  (deflistener
    (cat (exp (gen) (mul y-0 alpha-0))
      (mul y x (rec y-0) (rec alpha-0) alpha-1)))
  (defstrand resp 3 (k-magic k-magic-1) (group group-0) (a a-0) (b b-0)
    (g (exp (gen) alpha-0)) (y y-0) (x (mul (rec alpha-0) alpha-1)))
  (defstrand group-init 1 (k-magic k-magic-1) (group group-0)
    (alpha alpha-0))
  (defstrand init 2 (k-magic k-magic-2) (group group-1) (a a-1) (b b-1)
    (g (exp (gen) (mul alpha-1 (rec x-0)))) (x x-0))
  (precedes ((0 1) (2 0)) ((1 0) (0 0)) ((2 2) (0 2)) ((2 2) (6 0))
    ((3 0) (2 0)) ((3 0) (8 0)) ((4 1) (0 4)) ((5 1) (4 0))
    ((6 2) (5 0)) ((7 0) (6 0)) ((8 1) (6 1)))
  (non-orig k-magic k-magic-0 k-magic-1 k-magic-2 (privk a) (privk b))
  (uniq-gen n alpha y x y-0 alpha-0 alpha-1 x-0)
  (absent (y (mul alpha x (rec alpha-1)))
    (y-0 (mul (rec alpha-0) alpha-1)))
  (precur (5 0))
  (operation nonce-test (added-strand init 2) (exp (gen) alpha-1) (6 1)
    (enc "Group id" group (exp (gen) alpha-1) k-magic-0))
  (traces
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (send (enc a b group (exp (gen) (mul alpha x)) (privk a)))
      (recv
        (enc a b group (exp (gen) (mul y alpha-1))
          (exp (gen) (mul alpha x)) (privk b)))
      (send (enc n (exp (gen) (mul y x alpha-1)))) (recv n))
    ((send (enc "Group id" group (exp (gen) alpha) k-magic)))
    ((recv (enc "Group id" group (exp (gen) alpha-1) k-magic-0))
      (recv (enc a b group (exp (gen) (mul alpha x)) (privk a)))
      (send
        (enc a b group (exp (gen) (mul y alpha-1))
          (exp (gen) (mul alpha x)) (privk b))))
    ((send (enc "Group id" group (exp (gen) alpha-1) k-magic-0)))
    ((recv (exp (gen) (mul y x alpha-1)))
      (send (exp (gen) (mul y x alpha-1))))
    ((recv
       (cat (exp (gen) (mul y-0 alpha-0))
         (mul y x (rec y-0) (rec alpha-0) alpha-1)))
      (send
        (cat (exp (gen) (mul y-0 alpha-0))
          (mul y x (rec y-0) (rec alpha-0) alpha-1))))
    ((recv (enc "Group id" group-0 (exp (gen) alpha-0) k-magic-1))
      (recv (enc a-0 b-0 group-0 (exp (gen) alpha-1) (privk a-0)))
      (send
        (enc a-0 b-0 group-0 (exp (gen) (mul y-0 alpha-0))
          (exp (gen) alpha-1) (privk b-0))))
    ((send (enc "Group id" group-0 (exp (gen) alpha-0) k-magic-1)))
    ((recv
       (enc "Group id" group-1 (exp (gen) (mul alpha-1 (rec x-0)))
         k-magic-2))
      (send (enc a-1 b-1 group-1 (exp (gen) alpha-1) (privk a-1)))))
  (label 170)
  (parent 85)
  (unrealized (4 0) (5 0) (8 0))
  (aborted)
  (comment "aborted"))

(defskeleton dh_sig2
  (vars (k-magic k-magic-0 k-magic-1 skey) (n group group-0 text)
    (a b a-0 b-0 name) (alpha y x alpha-0 y-0 alpha-1 rndx) (w expt))
  (defstrand init 5 (k-magic k-magic) (n n) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (x x) (y (mul (rec alpha) y alpha-0)))
  (defstrand group-init 1 (k-magic k-magic) (group group) (alpha alpha))
  (defstrand resp 3 (k-magic k-magic-0) (group group) (a a) (b b)
    (g (exp (gen) alpha-0)) (y y) (x (mul alpha x (rec alpha-0))))
  (defstrand group-init 1 (k-magic k-magic-0) (group group)
    (alpha alpha-0))
  (deflistener (exp (gen) (mul y x alpha-0)))
  (deflistener
    (cat (exp (gen) (mul y-0 alpha-1))
      (mul y x alpha-0 (rec y-0) (rec alpha-1))))
  (defstrand resp 3 (k-magic k-magic-1) (group group-0) (a a-0) (b b-0)
    (g (exp (gen) alpha-1)) (y y-0) (x (one)))
  (defstrand group-init 1 (k-magic k-magic-1) (group group-0)
    (alpha alpha-1))
  (deflistener (cat (exp (gen) (mul alpha-1 (rec w))) w))
  (precedes ((0 1) (2 0)) ((1 0) (0 0)) ((2 2) (0 2)) ((2 2) (6 0))
    ((3 0) (2 0)) ((4 1) (0 4)) ((5 1) (4 0)) ((6 2) (5 0))
    ((7 0) (6 0)) ((7 0) (8 0)) ((8 1) (6 1)))
  (non-orig k-magic k-magic-0 k-magic-1 (privk a) (privk b))
  (uniq-gen n alpha y x alpha-0 y-0 alpha-1)
  (absent (y (mul alpha x (rec alpha-0))) (y-0 (one)))
  (precur (5 0) (8 0))
  (operation nonce-test
    (added-listener (cat (exp (gen) (mul alpha-1 (rec w))) w))
    (exp (gen) alpha-1) (6 1)
    (enc "Group id" group-0 (exp (gen) alpha-1) k-magic-1))
  (traces
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (send (enc a b group (exp (gen) (mul alpha x)) (privk a)))
      (recv
        (enc a b group (exp (gen) (mul y alpha-0))
          (exp (gen) (mul alpha x)) (privk b)))
      (send (enc n (exp (gen) (mul y x alpha-0)))) (recv n))
    ((send (enc "Group id" group (exp (gen) alpha) k-magic)))
    ((recv (enc "Group id" group (exp (gen) alpha-0) k-magic-0))
      (recv (enc a b group (exp (gen) (mul alpha x)) (privk a)))
      (send
        (enc a b group (exp (gen) (mul y alpha-0))
          (exp (gen) (mul alpha x)) (privk b))))
    ((send (enc "Group id" group (exp (gen) alpha-0) k-magic-0)))
    ((recv (exp (gen) (mul y x alpha-0)))
      (send (exp (gen) (mul y x alpha-0))))
    ((recv
       (cat (exp (gen) (mul y-0 alpha-1))
         (mul y x alpha-0 (rec y-0) (rec alpha-1))))
      (send
        (cat (exp (gen) (mul y-0 alpha-1))
          (mul y x alpha-0 (rec y-0) (rec alpha-1)))))
    ((recv (enc "Group id" group-0 (exp (gen) alpha-1) k-magic-1))
      (recv (enc a-0 b-0 group-0 (exp (gen) alpha-1) (privk a-0)))
      (send
        (enc a-0 b-0 group-0 (exp (gen) (mul y-0 alpha-1))
          (exp (gen) alpha-1) (privk b-0))))
    ((send (enc "Group id" group-0 (exp (gen) alpha-1) k-magic-1)))
    ((recv (cat (exp (gen) (mul alpha-1 (rec w))) w))
      (send (cat (exp (gen) (mul alpha-1 (rec w))) w))))
  (label 169)
  (parent 84)
  (unrealized (4 0) (5 0) (8 0))
  (aborted)
  (comment "aborted"))

(defskeleton dh_sig2
  (vars (k-magic k-magic-0 k-magic-1 k-magic-2 skey)
    (n group group-0 group-1 text) (a b a-0 b-0 a-1 b-1 name)
    (alpha y x alpha-0 y-0 alpha-1 y-1 rndx) (x-0 expt))
  (defstrand init 5 (k-magic k-magic) (n n) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (x x) (y (mul (rec alpha) y alpha-0)))
  (defstrand group-init 1 (k-magic k-magic) (group group) (alpha alpha))
  (defstrand resp 3 (k-magic k-magic-0) (group group) (a a) (b b)
    (g (exp (gen) alpha-0)) (y y) (x (mul alpha x (rec alpha-0))))
  (defstrand group-init 1 (k-magic k-magic-0) (group group)
    (alpha alpha-0))
  (deflistener (exp (gen) (mul y x alpha-0)))
  (deflistener
    (cat (exp (gen) (mul y-0 alpha-1))
      (mul y x alpha-0 (rec y-0) (rec alpha-1))))
  (defstrand resp 3 (k-magic k-magic-1) (group group-0) (a a-0) (b b-0)
    (g (exp (gen) alpha-1)) (y y-0) (x (one)))
  (defstrand group-init 1 (k-magic k-magic-1) (group group-0)
    (alpha alpha-1))
  (defstrand resp 3 (k-magic k-magic-2) (group group-1) (a a-1) (b b-1)
    (g (exp (gen) (mul alpha-1 (rec y-1)))) (y y-1) (x x-0))
  (precedes ((0 1) (2 0)) ((1 0) (0 0)) ((2 2) (0 2)) ((2 2) (6 0))
    ((3 0) (2 0)) ((4 1) (0 4)) ((5 1) (4 0)) ((6 2) (5 0))
    ((7 0) (6 0)) ((7 0) (8 0)) ((8 2) (6 1)))
  (non-orig k-magic k-magic-0 k-magic-1 k-magic-2 (privk a) (privk b))
  (uniq-gen n alpha y x alpha-0 y-0 alpha-1 y-1)
  (absent (y (mul alpha x (rec alpha-0))) (y-0 (one)) (y-1 x-0))
  (precur (5 0))
  (operation nonce-test (added-strand resp 3) (exp (gen) alpha-1) (6 1)
    (enc "Group id" group-0 (exp (gen) alpha-1) k-magic-1))
  (traces
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (send (enc a b group (exp (gen) (mul alpha x)) (privk a)))
      (recv
        (enc a b group (exp (gen) (mul y alpha-0))
          (exp (gen) (mul alpha x)) (privk b)))
      (send (enc n (exp (gen) (mul y x alpha-0)))) (recv n))
    ((send (enc "Group id" group (exp (gen) alpha) k-magic)))
    ((recv (enc "Group id" group (exp (gen) alpha-0) k-magic-0))
      (recv (enc a b group (exp (gen) (mul alpha x)) (privk a)))
      (send
        (enc a b group (exp (gen) (mul y alpha-0))
          (exp (gen) (mul alpha x)) (privk b))))
    ((send (enc "Group id" group (exp (gen) alpha-0) k-magic-0)))
    ((recv (exp (gen) (mul y x alpha-0)))
      (send (exp (gen) (mul y x alpha-0))))
    ((recv
       (cat (exp (gen) (mul y-0 alpha-1))
         (mul y x alpha-0 (rec y-0) (rec alpha-1))))
      (send
        (cat (exp (gen) (mul y-0 alpha-1))
          (mul y x alpha-0 (rec y-0) (rec alpha-1)))))
    ((recv (enc "Group id" group-0 (exp (gen) alpha-1) k-magic-1))
      (recv (enc a-0 b-0 group-0 (exp (gen) alpha-1) (privk a-0)))
      (send
        (enc a-0 b-0 group-0 (exp (gen) (mul y-0 alpha-1))
          (exp (gen) alpha-1) (privk b-0))))
    ((send (enc "Group id" group-0 (exp (gen) alpha-1) k-magic-1)))
    ((recv
       (enc "Group id" group-1 (exp (gen) (mul alpha-1 (rec y-1)))
         k-magic-2))
      (recv
        (enc a-1 b-1 group-1 (exp (gen) (mul alpha-1 (rec y-1) x-0))
          (privk a-1)))
      (send
        (enc a-1 b-1 group-1 (exp (gen) alpha-1)
          (exp (gen) (mul alpha-1 (rec y-1) x-0)) (privk b-1)))))
  (label 168)
  (parent 84)
  (unrealized (4 0) (5 0) (8 0) (8 1))
  (aborted)
  (comment "aborted"))

(defskeleton dh_sig2
  (vars (k-magic k-magic-0 k-magic-1 k-magic-2 skey)
    (n group group-0 group-1 text) (a b a-0 b-0 a-1 b-1 name)
    (alpha y x alpha-0 y-0 alpha-1 x-0 rndx))
  (defstrand init 5 (k-magic k-magic) (n n) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (x x) (y (mul (rec alpha) y alpha-0)))
  (defstrand group-init 1 (k-magic k-magic) (group group) (alpha alpha))
  (defstrand resp 3 (k-magic k-magic-0) (group group) (a a) (b b)
    (g (exp (gen) alpha-0)) (y y) (x (mul alpha x (rec alpha-0))))
  (defstrand group-init 1 (k-magic k-magic-0) (group group)
    (alpha alpha-0))
  (deflistener (exp (gen) (mul y x alpha-0)))
  (deflistener
    (cat (exp (gen) (mul y-0 alpha-1))
      (mul y x alpha-0 (rec y-0) (rec alpha-1))))
  (defstrand resp 3 (k-magic k-magic-1) (group group-0) (a a-0) (b b-0)
    (g (exp (gen) alpha-1)) (y y-0) (x (one)))
  (defstrand group-init 1 (k-magic k-magic-1) (group group-0)
    (alpha alpha-1))
  (defstrand init 2 (k-magic k-magic-2) (group group-1) (a a-1) (b b-1)
    (g (exp (gen) (mul alpha-1 (rec x-0)))) (x x-0))
  (precedes ((0 1) (2 0)) ((1 0) (0 0)) ((2 2) (0 2)) ((2 2) (6 0))
    ((3 0) (2 0)) ((4 1) (0 4)) ((5 1) (4 0)) ((6 2) (5 0))
    ((7 0) (6 0)) ((7 0) (8 0)) ((8 1) (6 1)))
  (non-orig k-magic k-magic-0 k-magic-1 k-magic-2 (privk a) (privk b))
  (uniq-gen n alpha y x alpha-0 y-0 alpha-1 x-0)
  (absent (y (mul alpha x (rec alpha-0))) (y-0 (one)))
  (precur (5 0))
  (operation nonce-test (added-strand init 2) (exp (gen) alpha-1) (6 1)
    (enc "Group id" group-0 (exp (gen) alpha-1) k-magic-1))
  (traces
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (send (enc a b group (exp (gen) (mul alpha x)) (privk a)))
      (recv
        (enc a b group (exp (gen) (mul y alpha-0))
          (exp (gen) (mul alpha x)) (privk b)))
      (send (enc n (exp (gen) (mul y x alpha-0)))) (recv n))
    ((send (enc "Group id" group (exp (gen) alpha) k-magic)))
    ((recv (enc "Group id" group (exp (gen) alpha-0) k-magic-0))
      (recv (enc a b group (exp (gen) (mul alpha x)) (privk a)))
      (send
        (enc a b group (exp (gen) (mul y alpha-0))
          (exp (gen) (mul alpha x)) (privk b))))
    ((send (enc "Group id" group (exp (gen) alpha-0) k-magic-0)))
    ((recv (exp (gen) (mul y x alpha-0)))
      (send (exp (gen) (mul y x alpha-0))))
    ((recv
       (cat (exp (gen) (mul y-0 alpha-1))
         (mul y x alpha-0 (rec y-0) (rec alpha-1))))
      (send
        (cat (exp (gen) (mul y-0 alpha-1))
          (mul y x alpha-0 (rec y-0) (rec alpha-1)))))
    ((recv (enc "Group id" group-0 (exp (gen) alpha-1) k-magic-1))
      (recv (enc a-0 b-0 group-0 (exp (gen) alpha-1) (privk a-0)))
      (send
        (enc a-0 b-0 group-0 (exp (gen) (mul y-0 alpha-1))
          (exp (gen) alpha-1) (privk b-0))))
    ((send (enc "Group id" group-0 (exp (gen) alpha-1) k-magic-1)))
    ((recv
       (enc "Group id" group-1 (exp (gen) (mul alpha-1 (rec x-0)))
         k-magic-2))
      (send (enc a-1 b-1 group-1 (exp (gen) alpha-1) (privk a-1)))))
  (label 167)
  (parent 84)
  (unrealized (4 0) (5 0) (8 0))
  (aborted)
  (comment "aborted"))

(defskeleton dh_sig2
  (vars (k-magic k-magic-0 k-magic-1 skey) (n group group-0 text)
    (a b a-0 b-0 a-1 b-1 name) (alpha rndx) (x expt)
    (y x-0 y-0 alpha-0 rndx) (w expt) (y-1 rndx) (x-1 expt))
  (defstrand init 5 (k-magic k-magic) (n n) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (x x-0) (y (mul (rec alpha) y alpha-0)))
  (defstrand group-init 1 (k-magic k-magic) (group group) (alpha alpha))
  (defstrand resp 3 (k-magic k-magic-0) (group group) (a a) (b b)
    (g (exp (gen) alpha-0)) (y y) (x (mul alpha x-0 (rec alpha-0))))
  (defstrand group-init 1 (k-magic k-magic-0) (group group)
    (alpha alpha-0))
  (deflistener (exp (gen) (mul y x-0 alpha-0)))
  (deflistener
    (cat (exp (gen) (mul y-0 alpha-0)) (mul y x-0 (rec y-0))))
  (defstrand resp 3 (k-magic k-magic-0) (group group) (a a-0) (b b-0)
    (g (exp (gen) alpha-0)) (y y-0) (x x))
  (deflistener (cat (exp (gen) (mul x alpha-0 (rec w))) w))
  (defstrand resp 3 (k-magic k-magic-1) (group group-0) (a a-1) (b b-1)
    (g (exp (gen) (mul x alpha-0 (rec w) (rec y-1)))) (y y-1) (x x-1))
  (precedes ((0 1) (2 0)) ((1 0) (0 0)) ((2 2) (0 2)) ((2 2) (6 0))
    ((3 0) (2 0)) ((3 0) (8 0)) ((4 1) (0 4)) ((5 1) (4 0))
    ((6 2) (5 0)) ((7 1) (6 1)) ((8 2) (7 0)))
  (non-orig k-magic k-magic-0 k-magic-1 (privk a) (privk b))
  (uniq-gen n alpha y x-0 y-0 alpha-0 y-1)
  (absent (y (mul alpha x-0 (rec alpha-0))) (y-0 x) (y-1 x-1))
  (precur (5 0) (7 0))
  (operation nonce-test (added-strand resp 3)
    (exp (gen) (mul x alpha-0 (rec w))) (7 0))
  (traces
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (send (enc a b group (exp (gen) (mul alpha x-0)) (privk a)))
      (recv
        (enc a b group (exp (gen) (mul y alpha-0))
          (exp (gen) (mul alpha x-0)) (privk b)))
      (send (enc n (exp (gen) (mul y x-0 alpha-0)))) (recv n))
    ((send (enc "Group id" group (exp (gen) alpha) k-magic)))
    ((recv (enc "Group id" group (exp (gen) alpha-0) k-magic-0))
      (recv (enc a b group (exp (gen) (mul alpha x-0)) (privk a)))
      (send
        (enc a b group (exp (gen) (mul y alpha-0))
          (exp (gen) (mul alpha x-0)) (privk b))))
    ((send (enc "Group id" group (exp (gen) alpha-0) k-magic-0)))
    ((recv (exp (gen) (mul y x-0 alpha-0)))
      (send (exp (gen) (mul y x-0 alpha-0))))
    ((recv (cat (exp (gen) (mul y-0 alpha-0)) (mul y x-0 (rec y-0))))
      (send (cat (exp (gen) (mul y-0 alpha-0)) (mul y x-0 (rec y-0)))))
    ((recv (enc "Group id" group (exp (gen) alpha-0) k-magic-0))
      (recv (enc a-0 b-0 group (exp (gen) (mul x alpha-0)) (privk a-0)))
      (send
        (enc a-0 b-0 group (exp (gen) (mul y-0 alpha-0))
          (exp (gen) (mul x alpha-0)) (privk b-0))))
    ((recv (cat (exp (gen) (mul x alpha-0 (rec w))) w))
      (send (cat (exp (gen) (mul x alpha-0 (rec w))) w)))
    ((recv
       (enc "Group id" group-0
         (exp (gen) (mul x alpha-0 (rec w) (rec y-1))) k-magic-1))
      (recv
        (enc a-1 b-1 group-0
          (exp (gen) (mul x alpha-0 (rec w) (rec y-1) x-1))
          (privk a-1)))
      (send
        (enc a-1 b-1 group-0 (exp (gen) (mul x alpha-0 (rec w)))
          (exp (gen) (mul x alpha-0 (rec w) (rec y-1) x-1))
          (privk b-1)))))
  (label 166)
  (parent 82)
  (unrealized (4 0) (5 0) (8 0) (8 1))
  (aborted)
  (comment "aborted"))

(defskeleton dh_sig2
  (vars (k-magic k-magic-0 skey) (n group text) (a b a-0 b-0 name)
    (y rndx) (w expt) (alpha x alpha-0 y-0 rndx))
  (defstrand init 5 (k-magic k-magic) (n n) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (x x) (y (mul (rec alpha) alpha-0 y-0)))
  (defstrand group-init 1 (k-magic k-magic) (group group) (alpha alpha))
  (defstrand resp 3 (k-magic k-magic-0) (group group) (a a) (b b)
    (g (exp (gen) alpha-0)) (y y-0) (x (mul alpha x (rec alpha-0))))
  (defstrand group-init 1 (k-magic k-magic-0) (group group)
    (alpha alpha-0))
  (deflistener (exp (gen) (mul x alpha-0 y-0)))
  (deflistener (cat (exp (gen) (mul y alpha-0)) (mul (rec y) x y-0)))
  (defstrand resp 3 (k-magic k-magic-0) (group group) (a a-0) (b b-0)
    (g (exp (gen) alpha-0)) (y y) (x (mul w y-0)))
  (deflistener (cat (exp (gen) (mul alpha-0 y-0)) w))
  (precedes ((0 1) (2 0)) ((1 0) (0 0)) ((2 2) (0 2)) ((2 2) (6 0))
    ((2 2) (7 0)) ((3 0) (2 0)) ((4 1) (0 4)) ((5 1) (4 0))
    ((6 2) (5 0)) ((7 1) (6 1)))
  (non-orig k-magic k-magic-0 (privk a) (privk b))
  (uniq-gen n y alpha x alpha-0 y-0)
  (absent (y (mul w y-0)) (y-0 (mul alpha x (rec alpha-0))))
  (precur (5 0) (7 0))
  (operation nonce-test (displaced 8 2 resp 3)
    (exp (gen) (mul x-0 alpha-1 (rec w-0))) (7 0))
  (traces
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (send (enc a b group (exp (gen) (mul alpha x)) (privk a)))
      (recv
        (enc a b group (exp (gen) (mul alpha-0 y-0))
          (exp (gen) (mul alpha x)) (privk b)))
      (send (enc n (exp (gen) (mul x alpha-0 y-0)))) (recv n))
    ((send (enc "Group id" group (exp (gen) alpha) k-magic)))
    ((recv (enc "Group id" group (exp (gen) alpha-0) k-magic-0))
      (recv (enc a b group (exp (gen) (mul alpha x)) (privk a)))
      (send
        (enc a b group (exp (gen) (mul alpha-0 y-0))
          (exp (gen) (mul alpha x)) (privk b))))
    ((send (enc "Group id" group (exp (gen) alpha-0) k-magic-0)))
    ((recv (exp (gen) (mul x alpha-0 y-0)))
      (send (exp (gen) (mul x alpha-0 y-0))))
    ((recv (cat (exp (gen) (mul y alpha-0)) (mul (rec y) x y-0)))
      (send (cat (exp (gen) (mul y alpha-0)) (mul (rec y) x y-0))))
    ((recv (enc "Group id" group (exp (gen) alpha-0) k-magic-0))
      (recv
        (enc a-0 b-0 group (exp (gen) (mul w alpha-0 y-0)) (privk a-0)))
      (send
        (enc a-0 b-0 group (exp (gen) (mul y alpha-0))
          (exp (gen) (mul w alpha-0 y-0)) (privk b-0))))
    ((recv (cat (exp (gen) (mul alpha-0 y-0)) w))
      (send (cat (exp (gen) (mul alpha-0 y-0)) w))))
  (label 165)
  (parent 82)
  (unrealized (4 0) (5 0))
  (aborted)
  (comment "aborted"))

(defskeleton dh_sig2
  (vars (k-magic k-magic-0 skey) (n group text) (a b a-0 b-0 name)
    (y y-0 alpha alpha-0 rndx) (w expt) (x rndx))
  (defstrand init 5 (k-magic k-magic) (n n) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (x x) (y (mul y (rec alpha) alpha-0)))
  (defstrand group-init 1 (k-magic k-magic) (group group) (alpha alpha))
  (defstrand resp 3 (k-magic k-magic-0) (group group) (a a) (b b)
    (g (exp (gen) alpha-0)) (y y) (x (mul alpha (rec alpha-0) x)))
  (defstrand group-init 1 (k-magic k-magic-0) (group group)
    (alpha alpha-0))
  (deflistener (exp (gen) (mul y alpha-0 x)))
  (deflistener (cat (exp (gen) (mul y-0 alpha-0)) (mul y (rec y-0) x)))
  (defstrand resp 3 (k-magic k-magic-0) (group group) (a a-0) (b b-0)
    (g (exp (gen) alpha-0)) (y y-0) (x (mul alpha (rec alpha-0) w x)))
  (deflistener (cat (exp (gen) (mul alpha x)) w))
  (precedes ((0 1) (2 0)) ((0 1) (7 0)) ((1 0) (0 0)) ((2 2) (0 2))
    ((2 2) (6 0)) ((3 0) (2 0)) ((3 0) (7 0)) ((4 1) (0 4))
    ((5 1) (4 0)) ((6 2) (5 0)) ((7 1) (6 1)))
  (non-orig k-magic k-magic-0 (privk a) (privk b))
  (uniq-gen n y y-0 alpha alpha-0 x)
  (absent (y (mul alpha (rec alpha-0) x))
    (y-0 (mul alpha (rec alpha-0) w x)))
  (precur (5 0) (7 0))
  (operation nonce-test (displaced 8 0 init 2)
    (exp (gen) (mul x-0 alpha-1 (rec w-0))) (7 0))
  (traces
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (send (enc a b group (exp (gen) (mul alpha x)) (privk a)))
      (recv
        (enc a b group (exp (gen) (mul y alpha-0))
          (exp (gen) (mul alpha x)) (privk b)))
      (send (enc n (exp (gen) (mul y alpha-0 x)))) (recv n))
    ((send (enc "Group id" group (exp (gen) alpha) k-magic)))
    ((recv (enc "Group id" group (exp (gen) alpha-0) k-magic-0))
      (recv (enc a b group (exp (gen) (mul alpha x)) (privk a)))
      (send
        (enc a b group (exp (gen) (mul y alpha-0))
          (exp (gen) (mul alpha x)) (privk b))))
    ((send (enc "Group id" group (exp (gen) alpha-0) k-magic-0)))
    ((recv (exp (gen) (mul y alpha-0 x)))
      (send (exp (gen) (mul y alpha-0 x))))
    ((recv (cat (exp (gen) (mul y-0 alpha-0)) (mul y (rec y-0) x)))
      (send (cat (exp (gen) (mul y-0 alpha-0)) (mul y (rec y-0) x))))
    ((recv (enc "Group id" group (exp (gen) alpha-0) k-magic-0))
      (recv (enc a-0 b-0 group (exp (gen) (mul alpha w x)) (privk a-0)))
      (send
        (enc a-0 b-0 group (exp (gen) (mul y-0 alpha-0))
          (exp (gen) (mul alpha w x)) (privk b-0))))
    ((recv (cat (exp (gen) (mul alpha x)) w))
      (send (cat (exp (gen) (mul alpha x)) w))))
  (label 164)
  (parent 82)
  (unrealized (4 0) (5 0))
  (aborted)
  (comment "aborted"))

(defskeleton dh_sig2
  (vars (k-magic k-magic-0 k-magic-1 skey) (n group group-0 text)
    (a b a-0 b-0 a-1 b-1 name) (alpha rndx) (x expt)
    (y x-0 y-0 alpha-0 rndx) (w expt) (x-1 rndx))
  (defstrand init 5 (k-magic k-magic) (n n) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (x x-0) (y (mul (rec alpha) y alpha-0)))
  (defstrand group-init 1 (k-magic k-magic) (group group) (alpha alpha))
  (defstrand resp 3 (k-magic k-magic-0) (group group) (a a) (b b)
    (g (exp (gen) alpha-0)) (y y) (x (mul alpha x-0 (rec alpha-0))))
  (defstrand group-init 1 (k-magic k-magic-0) (group group)
    (alpha alpha-0))
  (deflistener (exp (gen) (mul y x-0 alpha-0)))
  (deflistener
    (cat (exp (gen) (mul y-0 alpha-0)) (mul y x-0 (rec y-0))))
  (defstrand resp 3 (k-magic k-magic-0) (group group) (a a-0) (b b-0)
    (g (exp (gen) alpha-0)) (y y-0) (x x))
  (deflistener (cat (exp (gen) (mul x alpha-0 (rec w))) w))
  (defstrand init 2 (k-magic k-magic-1) (group group-0) (a a-1) (b b-1)
    (g (exp (gen) (mul x alpha-0 (rec w) (rec x-1)))) (x x-1))
  (precedes ((0 1) (2 0)) ((1 0) (0 0)) ((2 2) (0 2)) ((2 2) (6 0))
    ((3 0) (2 0)) ((3 0) (8 0)) ((4 1) (0 4)) ((5 1) (4 0))
    ((6 2) (5 0)) ((7 1) (6 1)) ((8 1) (7 0)))
  (non-orig k-magic k-magic-0 k-magic-1 (privk a) (privk b))
  (uniq-gen n alpha y x-0 y-0 alpha-0 x-1)
  (absent (y (mul alpha x-0 (rec alpha-0))) (y-0 x))
  (precur (5 0) (7 0))
  (operation nonce-test (added-strand init 2)
    (exp (gen) (mul x alpha-0 (rec w))) (7 0))
  (traces
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (send (enc a b group (exp (gen) (mul alpha x-0)) (privk a)))
      (recv
        (enc a b group (exp (gen) (mul y alpha-0))
          (exp (gen) (mul alpha x-0)) (privk b)))
      (send (enc n (exp (gen) (mul y x-0 alpha-0)))) (recv n))
    ((send (enc "Group id" group (exp (gen) alpha) k-magic)))
    ((recv (enc "Group id" group (exp (gen) alpha-0) k-magic-0))
      (recv (enc a b group (exp (gen) (mul alpha x-0)) (privk a)))
      (send
        (enc a b group (exp (gen) (mul y alpha-0))
          (exp (gen) (mul alpha x-0)) (privk b))))
    ((send (enc "Group id" group (exp (gen) alpha-0) k-magic-0)))
    ((recv (exp (gen) (mul y x-0 alpha-0)))
      (send (exp (gen) (mul y x-0 alpha-0))))
    ((recv (cat (exp (gen) (mul y-0 alpha-0)) (mul y x-0 (rec y-0))))
      (send (cat (exp (gen) (mul y-0 alpha-0)) (mul y x-0 (rec y-0)))))
    ((recv (enc "Group id" group (exp (gen) alpha-0) k-magic-0))
      (recv (enc a-0 b-0 group (exp (gen) (mul x alpha-0)) (privk a-0)))
      (send
        (enc a-0 b-0 group (exp (gen) (mul y-0 alpha-0))
          (exp (gen) (mul x alpha-0)) (privk b-0))))
    ((recv (cat (exp (gen) (mul x alpha-0 (rec w))) w))
      (send (cat (exp (gen) (mul x alpha-0 (rec w))) w)))
    ((recv
       (enc "Group id" group-0
         (exp (gen) (mul x alpha-0 (rec w) (rec x-1))) k-magic-1))
      (send
        (enc a-1 b-1 group-0 (exp (gen) (mul x alpha-0 (rec w)))
          (privk a-1)))))
  (label 163)
  (parent 82)
  (unrealized (4 0) (5 0) (8 0))
  (aborted)
  (comment "aborted"))

(defskeleton dh_sig2
  (vars (k-magic k-magic-0 skey) (n group text) (a b a-0 b-0 name)
    (y x y-0 alpha rndx) (w expt) (alpha-0 rndx))
  (defstrand init 5 (k-magic k-magic) (n n) (group group) (a a) (b b)
    (g (exp (gen) alpha-0)) (x x) (y (mul y alpha (rec alpha-0))))
  (defstrand group-init 1 (k-magic k-magic) (group group)
    (alpha alpha-0))
  (defstrand resp 3 (k-magic k-magic-0) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (y y) (x (mul x (rec alpha) alpha-0)))
  (defstrand group-init 1 (k-magic k-magic-0) (group group)
    (alpha alpha))
  (deflistener (exp (gen) (mul y x alpha)))
  (deflistener (cat (exp (gen) (mul y-0 alpha)) (mul y x (rec y-0))))
  (defstrand resp 3 (k-magic k-magic-0) (group group) (a a-0) (b b-0)
    (g (exp (gen) alpha)) (y y-0) (x (mul (rec alpha) w alpha-0)))
  (deflistener (cat (exp (gen) alpha-0) w))
  (precedes ((0 1) (2 0)) ((1 0) (0 0)) ((1 0) (7 0)) ((2 2) (0 2))
    ((2 2) (6 0)) ((3 0) (2 0)) ((3 0) (7 0)) ((4 1) (0 4))
    ((5 1) (4 0)) ((6 2) (5 0)) ((7 1) (6 1)))
  (non-orig k-magic k-magic-0 (privk a) (privk b))
  (uniq-gen n y x y-0 alpha alpha-0)
  (absent (y (mul x (rec alpha) alpha-0))
    (y-0 (mul (rec alpha) w alpha-0)))
  (precur (5 0) (7 0))
  (operation nonce-test (displaced 8 1 group-init 1) (exp (gen) alpha-1)
    (7 0))
  (traces
    ((recv (enc "Group id" group (exp (gen) alpha-0) k-magic))
      (send (enc a b group (exp (gen) (mul x alpha-0)) (privk a)))
      (recv
        (enc a b group (exp (gen) (mul y alpha))
          (exp (gen) (mul x alpha-0)) (privk b)))
      (send (enc n (exp (gen) (mul y x alpha)))) (recv n))
    ((send (enc "Group id" group (exp (gen) alpha-0) k-magic)))
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic-0))
      (recv (enc a b group (exp (gen) (mul x alpha-0)) (privk a)))
      (send
        (enc a b group (exp (gen) (mul y alpha))
          (exp (gen) (mul x alpha-0)) (privk b))))
    ((send (enc "Group id" group (exp (gen) alpha) k-magic-0)))
    ((recv (exp (gen) (mul y x alpha)))
      (send (exp (gen) (mul y x alpha))))
    ((recv (cat (exp (gen) (mul y-0 alpha)) (mul y x (rec y-0))))
      (send (cat (exp (gen) (mul y-0 alpha)) (mul y x (rec y-0)))))
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic-0))
      (recv (enc a-0 b-0 group (exp (gen) (mul w alpha-0)) (privk a-0)))
      (send
        (enc a-0 b-0 group (exp (gen) (mul y-0 alpha))
          (exp (gen) (mul w alpha-0)) (privk b-0))))
    ((recv (cat (exp (gen) alpha-0) w))
      (send (cat (exp (gen) alpha-0) w))))
  (label 162)
  (parent 82)
  (unrealized (4 0) (5 0) (7 0))
  (aborted)
  (comment "aborted"))

(defskeleton dh_sig2
  (vars (k-magic k-magic-0 skey) (n group text) (a b a-0 b-0 name)
    (alpha y x y-0 alpha-0 rndx) (w expt))
  (defstrand init 5 (k-magic k-magic) (n n) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (x x) (y (mul (rec alpha) y alpha-0)))
  (defstrand group-init 1 (k-magic k-magic) (group group) (alpha alpha))
  (defstrand resp 3 (k-magic k-magic-0) (group group) (a a) (b b)
    (g (exp (gen) alpha-0)) (y y) (x (mul alpha x (rec alpha-0))))
  (defstrand group-init 1 (k-magic k-magic-0) (group group)
    (alpha alpha-0))
  (deflistener (exp (gen) (mul y x alpha-0)))
  (deflistener (cat (exp (gen) (mul y-0 alpha-0)) (mul y x (rec y-0))))
  (defstrand resp 3 (k-magic k-magic-0) (group group) (a a-0) (b b-0)
    (g (exp (gen) alpha-0)) (y y-0) (x (mul (rec alpha-0) w)))
  (deflistener (cat (gen) w))
  (precedes ((0 1) (2 0)) ((1 0) (0 0)) ((2 2) (0 2)) ((2 2) (6 0))
    ((3 0) (2 0)) ((3 0) (7 0)) ((4 1) (0 4)) ((5 1) (4 0))
    ((6 2) (5 0)) ((7 1) (6 1)))
  (non-orig k-magic k-magic-0 (privk a) (privk b))
  (uniq-gen n alpha y x y-0 alpha-0)
  (absent (y (mul alpha x (rec alpha-0))) (y-0 (mul (rec alpha-0) w)))
  (precur (5 0) (7 0))
  (operation nonce-test
    (contracted (x-0 (mul (rec alpha-0) w)) (alpha-1 alpha-0) (w-0 w))
    (gen) (7 0))
  (traces
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (send (enc a b group (exp (gen) (mul alpha x)) (privk a)))
      (recv
        (enc a b group (exp (gen) (mul y alpha-0))
          (exp (gen) (mul alpha x)) (privk b)))
      (send (enc n (exp (gen) (mul y x alpha-0)))) (recv n))
    ((send (enc "Group id" group (exp (gen) alpha) k-magic)))
    ((recv (enc "Group id" group (exp (gen) alpha-0) k-magic-0))
      (recv (enc a b group (exp (gen) (mul alpha x)) (privk a)))
      (send
        (enc a b group (exp (gen) (mul y alpha-0))
          (exp (gen) (mul alpha x)) (privk b))))
    ((send (enc "Group id" group (exp (gen) alpha-0) k-magic-0)))
    ((recv (exp (gen) (mul y x alpha-0)))
      (send (exp (gen) (mul y x alpha-0))))
    ((recv (cat (exp (gen) (mul y-0 alpha-0)) (mul y x (rec y-0))))
      (send (cat (exp (gen) (mul y-0 alpha-0)) (mul y x (rec y-0)))))
    ((recv (enc "Group id" group (exp (gen) alpha-0) k-magic-0))
      (recv (enc a-0 b-0 group (exp (gen) w) (privk a-0)))
      (send
        (enc a-0 b-0 group (exp (gen) (mul y-0 alpha-0)) (exp (gen) w)
          (privk b-0)))) ((recv (cat (gen) w)) (send (cat (gen) w))))
  (label 161)
  (parent 82)
  (unrealized (4 0) (5 0))
  (aborted)
  (comment "aborted"))

(defskeleton dh_sig2
  (vars (k-magic k-magic-0 skey) (n group text) (a b a-0 b-0 name)
    (alpha y x y-0 rndx) (w expt) (alpha-0 rndx))
  (defstrand init 5 (k-magic k-magic) (n n) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (x x) (y (mul (rec alpha) y alpha-0)))
  (defstrand group-init 1 (k-magic k-magic) (group group) (alpha alpha))
  (defstrand resp 3 (k-magic k-magic-0) (group group) (a a) (b b)
    (g (exp (gen) alpha-0)) (y y) (x (mul alpha x (rec alpha-0))))
  (defstrand group-init 1 (k-magic k-magic-0) (group group)
    (alpha alpha-0))
  (deflistener (exp (gen) (mul y x alpha-0)))
  (deflistener (cat (exp (gen) (mul y-0 alpha-0)) (mul y x (rec y-0))))
  (defstrand resp 3 (k-magic k-magic-0) (group group) (a a-0) (b b-0)
    (g (exp (gen) alpha-0)) (y y-0) (x w))
  (deflistener (cat (exp (gen) alpha-0) w))
  (precedes ((0 1) (2 0)) ((1 0) (0 0)) ((2 2) (0 2)) ((2 2) (6 0))
    ((3 0) (2 0)) ((3 0) (7 0)) ((4 1) (0 4)) ((5 1) (4 0))
    ((6 2) (5 0)) ((7 1) (6 1)))
  (non-orig k-magic k-magic-0 (privk a) (privk b))
  (uniq-gen n alpha y x y-0 alpha-0)
  (absent (y (mul alpha x (rec alpha-0))) (y-0 w))
  (precur (5 0) (7 0))
  (operation nonce-test (displaced 8 3 group-init 1) (exp (gen) alpha-1)
    (7 0))
  (traces
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (send (enc a b group (exp (gen) (mul alpha x)) (privk a)))
      (recv
        (enc a b group (exp (gen) (mul y alpha-0))
          (exp (gen) (mul alpha x)) (privk b)))
      (send (enc n (exp (gen) (mul y x alpha-0)))) (recv n))
    ((send (enc "Group id" group (exp (gen) alpha) k-magic)))
    ((recv (enc "Group id" group (exp (gen) alpha-0) k-magic-0))
      (recv (enc a b group (exp (gen) (mul alpha x)) (privk a)))
      (send
        (enc a b group (exp (gen) (mul y alpha-0))
          (exp (gen) (mul alpha x)) (privk b))))
    ((send (enc "Group id" group (exp (gen) alpha-0) k-magic-0)))
    ((recv (exp (gen) (mul y x alpha-0)))
      (send (exp (gen) (mul y x alpha-0))))
    ((recv (cat (exp (gen) (mul y-0 alpha-0)) (mul y x (rec y-0))))
      (send (cat (exp (gen) (mul y-0 alpha-0)) (mul y x (rec y-0)))))
    ((recv (enc "Group id" group (exp (gen) alpha-0) k-magic-0))
      (recv (enc a-0 b-0 group (exp (gen) (mul w alpha-0)) (privk a-0)))
      (send
        (enc a-0 b-0 group (exp (gen) (mul y-0 alpha-0))
          (exp (gen) (mul w alpha-0)) (privk b-0))))
    ((recv (cat (exp (gen) alpha-0) w))
      (send (cat (exp (gen) alpha-0) w))))
  (label 160)
  (parent 82)
  (unrealized (4 0) (5 0) (7 0))
  (aborted)
  (comment "aborted"))

(defskeleton dh_sig2
  (vars (k-magic k-magic-0 k-magic-1 skey) (n group group-0 text)
    (a b a-0 b-0 name) (alpha y x y-0 alpha-0 rndx) (w expt)
    (alpha-1 rndx))
  (defstrand init 5 (k-magic k-magic) (n n) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (x x) (y (mul (rec alpha) y alpha-0)))
  (defstrand group-init 1 (k-magic k-magic) (group group) (alpha alpha))
  (defstrand resp 3 (k-magic k-magic-0) (group group) (a a) (b b)
    (g (exp (gen) alpha-0)) (y y) (x (mul alpha x (rec alpha-0))))
  (defstrand group-init 1 (k-magic k-magic-0) (group group)
    (alpha alpha-0))
  (deflistener (exp (gen) (mul y x alpha-0)))
  (deflistener (cat (exp (gen) (mul y-0 alpha-0)) (mul y x (rec y-0))))
  (defstrand resp 3 (k-magic k-magic-0) (group group) (a a-0) (b b-0)
    (g (exp (gen) alpha-0)) (y y-0) (x (mul (rec alpha-0) w alpha-1)))
  (deflistener (cat (exp (gen) alpha-1) w))
  (defstrand group-init 1 (k-magic k-magic-1) (group group-0)
    (alpha alpha-1))
  (precedes ((0 1) (2 0)) ((1 0) (0 0)) ((2 2) (0 2)) ((2 2) (6 0))
    ((3 0) (2 0)) ((3 0) (7 0)) ((4 1) (0 4)) ((5 1) (4 0))
    ((6 2) (5 0)) ((7 1) (6 1)) ((8 0) (7 0)))
  (non-orig k-magic k-magic-0 (privk a) (privk b))
  (uniq-gen n alpha y x y-0 alpha-0 alpha-1)
  (absent (y (mul alpha x (rec alpha-0)))
    (y-0 (mul (rec alpha-0) w alpha-1)))
  (precur (5 0) (7 0))
  (operation nonce-test (added-strand group-init 1) (exp (gen) alpha-1)
    (7 0))
  (traces
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (send (enc a b group (exp (gen) (mul alpha x)) (privk a)))
      (recv
        (enc a b group (exp (gen) (mul y alpha-0))
          (exp (gen) (mul alpha x)) (privk b)))
      (send (enc n (exp (gen) (mul y x alpha-0)))) (recv n))
    ((send (enc "Group id" group (exp (gen) alpha) k-magic)))
    ((recv (enc "Group id" group (exp (gen) alpha-0) k-magic-0))
      (recv (enc a b group (exp (gen) (mul alpha x)) (privk a)))
      (send
        (enc a b group (exp (gen) (mul y alpha-0))
          (exp (gen) (mul alpha x)) (privk b))))
    ((send (enc "Group id" group (exp (gen) alpha-0) k-magic-0)))
    ((recv (exp (gen) (mul y x alpha-0)))
      (send (exp (gen) (mul y x alpha-0))))
    ((recv (cat (exp (gen) (mul y-0 alpha-0)) (mul y x (rec y-0))))
      (send (cat (exp (gen) (mul y-0 alpha-0)) (mul y x (rec y-0)))))
    ((recv (enc "Group id" group (exp (gen) alpha-0) k-magic-0))
      (recv (enc a-0 b-0 group (exp (gen) (mul w alpha-1)) (privk a-0)))
      (send
        (enc a-0 b-0 group (exp (gen) (mul y-0 alpha-0))
          (exp (gen) (mul w alpha-1)) (privk b-0))))
    ((recv (cat (exp (gen) alpha-1) w))
      (send (cat (exp (gen) alpha-1) w)))
    ((send (enc "Group id" group-0 (exp (gen) alpha-1) k-magic-1))))
  (label 159)
  (parent 82)
  (unrealized (4 0) (5 0))
  (aborted)
  (comment "aborted"))

(defskeleton dh_sig2
  (vars (k-magic k-magic-0 k-magic-1 skey) (n group group-0 text)
    (a b a-0 b-0 a-1 b-1 name) (alpha y x y-0 rndx) (x-0 expt)
    (alpha-0 y-1 alpha-1 rndx))
  (defstrand init 5 (k-magic k-magic) (n n) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (x x) (y (mul (rec alpha) y alpha-0)))
  (defstrand group-init 1 (k-magic k-magic) (group group) (alpha alpha))
  (defstrand resp 3 (k-magic k-magic-0) (group group) (a a) (b b)
    (g (exp (gen) alpha-0)) (y y) (x (mul alpha x (rec alpha-0))))
  (defstrand group-init 1 (k-magic k-magic-0) (group group)
    (alpha alpha-0))
  (deflistener (exp (gen) (mul y x alpha-0)))
  (deflistener (cat (exp (gen) (mul y-0 alpha-0)) (mul y x (rec y-0))))
  (defstrand resp 3 (k-magic k-magic-0) (group group) (a a-0) (b b-0)
    (g (exp (gen) alpha-0)) (y y-0) (x (mul (rec alpha-0) y-1 alpha-1)))
  (defstrand resp 3 (k-magic k-magic-1) (group group-0) (a a-1) (b b-1)
    (g (exp (gen) alpha-1)) (y y-1) (x x-0))
  (defstrand group-init 1 (k-magic k-magic-1) (group group-0)
    (alpha alpha-1))
  (precedes ((0 1) (2 0)) ((1 0) (0 0)) ((2 2) (0 2)) ((2 2) (6 0))
    ((3 0) (2 0)) ((3 0) (7 0)) ((4 1) (0 4)) ((5 1) (4 0))
    ((6 2) (5 0)) ((7 2) (6 1)) ((8 0) (7 0)))
  (non-orig k-magic k-magic-0 k-magic-1 (privk a) (privk b))
  (uniq-gen n alpha y x y-0 alpha-0 y-1 alpha-1)
  (absent (y (mul alpha x (rec alpha-0)))
    (y-0 (mul (rec alpha-0) y-1 alpha-1)) (y-1 x-0))
  (precur (5 0))
  (operation encryption-test (added-strand group-init 1)
    (enc "Group id" group-0 (exp (gen) alpha-1) k-magic-1) (7 0))
  (traces
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (send (enc a b group (exp (gen) (mul alpha x)) (privk a)))
      (recv
        (enc a b group (exp (gen) (mul y alpha-0))
          (exp (gen) (mul alpha x)) (privk b)))
      (send (enc n (exp (gen) (mul y x alpha-0)))) (recv n))
    ((send (enc "Group id" group (exp (gen) alpha) k-magic)))
    ((recv (enc "Group id" group (exp (gen) alpha-0) k-magic-0))
      (recv (enc a b group (exp (gen) (mul alpha x)) (privk a)))
      (send
        (enc a b group (exp (gen) (mul y alpha-0))
          (exp (gen) (mul alpha x)) (privk b))))
    ((send (enc "Group id" group (exp (gen) alpha-0) k-magic-0)))
    ((recv (exp (gen) (mul y x alpha-0)))
      (send (exp (gen) (mul y x alpha-0))))
    ((recv (cat (exp (gen) (mul y-0 alpha-0)) (mul y x (rec y-0))))
      (send (cat (exp (gen) (mul y-0 alpha-0)) (mul y x (rec y-0)))))
    ((recv (enc "Group id" group (exp (gen) alpha-0) k-magic-0))
      (recv
        (enc a-0 b-0 group (exp (gen) (mul y-1 alpha-1)) (privk a-0)))
      (send
        (enc a-0 b-0 group (exp (gen) (mul y-0 alpha-0))
          (exp (gen) (mul y-1 alpha-1)) (privk b-0))))
    ((recv (enc "Group id" group-0 (exp (gen) alpha-1) k-magic-1))
      (recv
        (enc a-1 b-1 group-0 (exp (gen) (mul x-0 alpha-1)) (privk a-1)))
      (send
        (enc a-1 b-1 group-0 (exp (gen) (mul y-1 alpha-1))
          (exp (gen) (mul x-0 alpha-1)) (privk b-1))))
    ((send (enc "Group id" group-0 (exp (gen) alpha-1) k-magic-1))))
  (label 158)
  (parent 81)
  (unrealized (4 0) (5 0) (7 1))
  (aborted)
  (comment "aborted"))

(defskeleton dh_sig2
  (vars (k-magic k-magic-0 skey) (n group text)
    (a b a-0 b-0 a-1 b-1 name) (alpha y x y-0 rndx) (x-0 expt)
    (y-1 alpha-0 rndx))
  (defstrand init 5 (k-magic k-magic) (n n) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (x x) (y (mul (rec alpha) y alpha-0)))
  (defstrand group-init 1 (k-magic k-magic) (group group) (alpha alpha))
  (defstrand resp 3 (k-magic k-magic-0) (group group) (a a) (b b)
    (g (exp (gen) alpha-0)) (y y) (x (mul alpha x (rec alpha-0))))
  (defstrand group-init 1 (k-magic k-magic-0) (group group)
    (alpha alpha-0))
  (deflistener (exp (gen) (mul y x alpha-0)))
  (deflistener (cat (exp (gen) (mul y-0 alpha-0)) (mul y x (rec y-0))))
  (defstrand resp 3 (k-magic k-magic-0) (group group) (a a-0) (b b-0)
    (g (exp (gen) alpha-0)) (y y-0) (x y-1))
  (defstrand resp 3 (k-magic k-magic-0) (group group) (a a-1) (b b-1)
    (g (exp (gen) alpha-0)) (y y-1) (x x-0))
  (precedes ((0 1) (2 0)) ((1 0) (0 0)) ((2 2) (0 2)) ((2 2) (6 0))
    ((3 0) (2 0)) ((3 0) (7 0)) ((4 1) (0 4)) ((5 1) (4 0))
    ((6 2) (5 0)) ((7 2) (6 1)))
  (non-orig k-magic k-magic-0 (privk a) (privk b))
  (uniq-gen n alpha y x y-0 y-1 alpha-0)
  (absent (y (mul alpha x (rec alpha-0))) (y-0 y-1) (y-1 x-0))
  (precur (5 0))
  (operation encryption-test (displaced 8 3 group-init 1)
    (enc "Group id" group-0 (exp (gen) alpha-1) k-magic-1) (7 0))
  (traces
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (send (enc a b group (exp (gen) (mul alpha x)) (privk a)))
      (recv
        (enc a b group (exp (gen) (mul y alpha-0))
          (exp (gen) (mul alpha x)) (privk b)))
      (send (enc n (exp (gen) (mul y x alpha-0)))) (recv n))
    ((send (enc "Group id" group (exp (gen) alpha) k-magic)))
    ((recv (enc "Group id" group (exp (gen) alpha-0) k-magic-0))
      (recv (enc a b group (exp (gen) (mul alpha x)) (privk a)))
      (send
        (enc a b group (exp (gen) (mul y alpha-0))
          (exp (gen) (mul alpha x)) (privk b))))
    ((send (enc "Group id" group (exp (gen) alpha-0) k-magic-0)))
    ((recv (exp (gen) (mul y x alpha-0)))
      (send (exp (gen) (mul y x alpha-0))))
    ((recv (cat (exp (gen) (mul y-0 alpha-0)) (mul y x (rec y-0))))
      (send (cat (exp (gen) (mul y-0 alpha-0)) (mul y x (rec y-0)))))
    ((recv (enc "Group id" group (exp (gen) alpha-0) k-magic-0))
      (recv
        (enc a-0 b-0 group (exp (gen) (mul y-1 alpha-0)) (privk a-0)))
      (send
        (enc a-0 b-0 group (exp (gen) (mul y-0 alpha-0))
          (exp (gen) (mul y-1 alpha-0)) (privk b-0))))
    ((recv (enc "Group id" group (exp (gen) alpha-0) k-magic-0))
      (recv
        (enc a-1 b-1 group (exp (gen) (mul x-0 alpha-0)) (privk a-1)))
      (send
        (enc a-1 b-1 group (exp (gen) (mul y-1 alpha-0))
          (exp (gen) (mul x-0 alpha-0)) (privk b-1)))))
  (label 157)
  (parent 81)
  (unrealized (4 0) (5 0) (7 1))
  (aborted)
  (comment "aborted"))

(defskeleton dh_sig2
  (vars (k-magic k-magic-0 skey) (n group text)
    (a b a-0 b-0 a-1 b-1 name) (y x y-0 rndx) (x-0 expt)
    (alpha y-1 alpha-0 rndx))
  (defstrand init 5 (k-magic k-magic) (n n) (group group) (a a) (b b)
    (g (exp (gen) alpha-0)) (x x) (y (mul y alpha (rec alpha-0))))
  (defstrand group-init 1 (k-magic k-magic) (group group)
    (alpha alpha-0))
  (defstrand resp 3 (k-magic k-magic-0) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (y y) (x (mul x (rec alpha) alpha-0)))
  (defstrand group-init 1 (k-magic k-magic-0) (group group)
    (alpha alpha))
  (deflistener (exp (gen) (mul y x alpha)))
  (deflistener (cat (exp (gen) (mul y-0 alpha)) (mul y x (rec y-0))))
  (defstrand resp 3 (k-magic k-magic-0) (group group) (a a-0) (b b-0)
    (g (exp (gen) alpha)) (y y-0) (x (mul (rec alpha) y-1 alpha-0)))
  (defstrand resp 3 (k-magic k-magic) (group group) (a a-1) (b b-1)
    (g (exp (gen) alpha-0)) (y y-1) (x x-0))
  (precedes ((0 1) (2 0)) ((1 0) (0 0)) ((1 0) (7 0)) ((2 2) (0 2))
    ((2 2) (6 0)) ((3 0) (2 0)) ((3 0) (7 0)) ((4 1) (0 4))
    ((5 1) (4 0)) ((6 2) (5 0)) ((7 2) (6 1)))
  (non-orig k-magic k-magic-0 (privk a) (privk b))
  (uniq-gen n y x y-0 alpha y-1 alpha-0)
  (absent (y (mul x (rec alpha) alpha-0))
    (y-0 (mul (rec alpha) y-1 alpha-0)) (y-1 x-0))
  (precur (5 0))
  (operation encryption-test (displaced 8 1 group-init 1)
    (enc "Group id" group-0 (exp (gen) alpha-1) k-magic-1) (7 0))
  (traces
    ((recv (enc "Group id" group (exp (gen) alpha-0) k-magic))
      (send (enc a b group (exp (gen) (mul x alpha-0)) (privk a)))
      (recv
        (enc a b group (exp (gen) (mul y alpha))
          (exp (gen) (mul x alpha-0)) (privk b)))
      (send (enc n (exp (gen) (mul y x alpha)))) (recv n))
    ((send (enc "Group id" group (exp (gen) alpha-0) k-magic)))
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic-0))
      (recv (enc a b group (exp (gen) (mul x alpha-0)) (privk a)))
      (send
        (enc a b group (exp (gen) (mul y alpha))
          (exp (gen) (mul x alpha-0)) (privk b))))
    ((send (enc "Group id" group (exp (gen) alpha) k-magic-0)))
    ((recv (exp (gen) (mul y x alpha)))
      (send (exp (gen) (mul y x alpha))))
    ((recv (cat (exp (gen) (mul y-0 alpha)) (mul y x (rec y-0))))
      (send (cat (exp (gen) (mul y-0 alpha)) (mul y x (rec y-0)))))
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic-0))
      (recv
        (enc a-0 b-0 group (exp (gen) (mul y-1 alpha-0)) (privk a-0)))
      (send
        (enc a-0 b-0 group (exp (gen) (mul y-0 alpha))
          (exp (gen) (mul y-1 alpha-0)) (privk b-0))))
    ((recv (enc "Group id" group (exp (gen) alpha-0) k-magic))
      (recv
        (enc a-1 b-1 group (exp (gen) (mul x-0 alpha-0)) (privk a-1)))
      (send
        (enc a-1 b-1 group (exp (gen) (mul y-1 alpha-0))
          (exp (gen) (mul x-0 alpha-0)) (privk b-1)))))
  (label 156)
  (parent 81)
  (unrealized (4 0) (5 0) (7 1))
  (aborted)
  (comment "aborted"))

(defskeleton dh_sig2
  (vars (k-magic k-magic-0 k-magic-1 skey) (n group group-0 text)
    (a b a-0 b-0 a-1 b-1 name) (alpha y x y-0 alpha-0 x-0 alpha-1 rndx))
  (defstrand init 5 (k-magic k-magic) (n n) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (x x) (y (mul (rec alpha) y alpha-0)))
  (defstrand group-init 1 (k-magic k-magic) (group group) (alpha alpha))
  (defstrand resp 3 (k-magic k-magic-0) (group group) (a a) (b b)
    (g (exp (gen) alpha-0)) (y y) (x (mul alpha x (rec alpha-0))))
  (defstrand group-init 1 (k-magic k-magic-0) (group group)
    (alpha alpha-0))
  (deflistener (exp (gen) (mul y x alpha-0)))
  (deflistener (cat (exp (gen) (mul y-0 alpha-0)) (mul y x (rec y-0))))
  (defstrand resp 3 (k-magic k-magic-0) (group group) (a a-0) (b b-0)
    (g (exp (gen) alpha-0)) (y y-0) (x (mul (rec alpha-0) x-0 alpha-1)))
  (defstrand init 2 (k-magic k-magic-1) (group group-0) (a a-1) (b b-1)
    (g (exp (gen) alpha-1)) (x x-0))
  (defstrand group-init 1 (k-magic k-magic-1) (group group-0)
    (alpha alpha-1))
  (precedes ((0 1) (2 0)) ((1 0) (0 0)) ((2 2) (0 2)) ((2 2) (6 0))
    ((3 0) (2 0)) ((3 0) (7 0)) ((4 1) (0 4)) ((5 1) (4 0))
    ((6 2) (5 0)) ((7 1) (6 1)) ((8 0) (7 0)))
  (non-orig k-magic k-magic-0 k-magic-1 (privk a) (privk b))
  (uniq-gen n alpha y x y-0 alpha-0 x-0 alpha-1)
  (absent (y (mul alpha x (rec alpha-0)))
    (y-0 (mul (rec alpha-0) x-0 alpha-1)))
  (precur (5 0))
  (operation encryption-test (added-strand group-init 1)
    (enc "Group id" group-0 (exp (gen) alpha-1) k-magic-1) (7 0))
  (traces
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (send (enc a b group (exp (gen) (mul alpha x)) (privk a)))
      (recv
        (enc a b group (exp (gen) (mul y alpha-0))
          (exp (gen) (mul alpha x)) (privk b)))
      (send (enc n (exp (gen) (mul y x alpha-0)))) (recv n))
    ((send (enc "Group id" group (exp (gen) alpha) k-magic)))
    ((recv (enc "Group id" group (exp (gen) alpha-0) k-magic-0))
      (recv (enc a b group (exp (gen) (mul alpha x)) (privk a)))
      (send
        (enc a b group (exp (gen) (mul y alpha-0))
          (exp (gen) (mul alpha x)) (privk b))))
    ((send (enc "Group id" group (exp (gen) alpha-0) k-magic-0)))
    ((recv (exp (gen) (mul y x alpha-0)))
      (send (exp (gen) (mul y x alpha-0))))
    ((recv (cat (exp (gen) (mul y-0 alpha-0)) (mul y x (rec y-0))))
      (send (cat (exp (gen) (mul y-0 alpha-0)) (mul y x (rec y-0)))))
    ((recv (enc "Group id" group (exp (gen) alpha-0) k-magic-0))
      (recv
        (enc a-0 b-0 group (exp (gen) (mul x-0 alpha-1)) (privk a-0)))
      (send
        (enc a-0 b-0 group (exp (gen) (mul y-0 alpha-0))
          (exp (gen) (mul x-0 alpha-1)) (privk b-0))))
    ((recv (enc "Group id" group-0 (exp (gen) alpha-1) k-magic-1))
      (send
        (enc a-1 b-1 group-0 (exp (gen) (mul x-0 alpha-1))
          (privk a-1))))
    ((send (enc "Group id" group-0 (exp (gen) alpha-1) k-magic-1))))
  (label 155)
  (parent 78)
  (unrealized (4 0) (5 0))
  (aborted)
  (comment "aborted"))

(defskeleton dh_sig2
  (vars (k-magic k-magic-0 skey) (n group text)
    (a b a-0 b-0 a-1 b-1 name) (alpha y x y-0 x-0 alpha-0 rndx))
  (defstrand init 5 (k-magic k-magic) (n n) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (x x) (y (mul (rec alpha) y alpha-0)))
  (defstrand group-init 1 (k-magic k-magic) (group group) (alpha alpha))
  (defstrand resp 3 (k-magic k-magic-0) (group group) (a a) (b b)
    (g (exp (gen) alpha-0)) (y y) (x (mul alpha x (rec alpha-0))))
  (defstrand group-init 1 (k-magic k-magic-0) (group group)
    (alpha alpha-0))
  (deflistener (exp (gen) (mul y x alpha-0)))
  (deflistener (cat (exp (gen) (mul y-0 alpha-0)) (mul y x (rec y-0))))
  (defstrand resp 3 (k-magic k-magic-0) (group group) (a a-0) (b b-0)
    (g (exp (gen) alpha-0)) (y y-0) (x x-0))
  (defstrand init 2 (k-magic k-magic-0) (group group) (a a-1) (b b-1)
    (g (exp (gen) alpha-0)) (x x-0))
  (precedes ((0 1) (2 0)) ((1 0) (0 0)) ((2 2) (0 2)) ((2 2) (6 0))
    ((3 0) (2 0)) ((3 0) (7 0)) ((4 1) (0 4)) ((5 1) (4 0))
    ((6 2) (5 0)) ((7 1) (6 1)))
  (non-orig k-magic k-magic-0 (privk a) (privk b))
  (uniq-gen n alpha y x y-0 x-0 alpha-0)
  (absent (y (mul alpha x (rec alpha-0))) (y-0 x-0))
  (precur (5 0))
  (operation encryption-test (displaced 8 3 group-init 1)
    (enc "Group id" group-0 (exp (gen) alpha-1) k-magic-1) (7 0))
  (traces
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (send (enc a b group (exp (gen) (mul alpha x)) (privk a)))
      (recv
        (enc a b group (exp (gen) (mul y alpha-0))
          (exp (gen) (mul alpha x)) (privk b)))
      (send (enc n (exp (gen) (mul y x alpha-0)))) (recv n))
    ((send (enc "Group id" group (exp (gen) alpha) k-magic)))
    ((recv (enc "Group id" group (exp (gen) alpha-0) k-magic-0))
      (recv (enc a b group (exp (gen) (mul alpha x)) (privk a)))
      (send
        (enc a b group (exp (gen) (mul y alpha-0))
          (exp (gen) (mul alpha x)) (privk b))))
    ((send (enc "Group id" group (exp (gen) alpha-0) k-magic-0)))
    ((recv (exp (gen) (mul y x alpha-0)))
      (send (exp (gen) (mul y x alpha-0))))
    ((recv (cat (exp (gen) (mul y-0 alpha-0)) (mul y x (rec y-0))))
      (send (cat (exp (gen) (mul y-0 alpha-0)) (mul y x (rec y-0)))))
    ((recv (enc "Group id" group (exp (gen) alpha-0) k-magic-0))
      (recv
        (enc a-0 b-0 group (exp (gen) (mul x-0 alpha-0)) (privk a-0)))
      (send
        (enc a-0 b-0 group (exp (gen) (mul y-0 alpha-0))
          (exp (gen) (mul x-0 alpha-0)) (privk b-0))))
    ((recv (enc "Group id" group (exp (gen) alpha-0) k-magic-0))
      (send
        (enc a-1 b-1 group (exp (gen) (mul x-0 alpha-0)) (privk a-1)))))
  (label 154)
  (parent 78)
  (unrealized (4 0) (5 0))
  (aborted)
  (comment "aborted"))

(defskeleton dh_sig2
  (vars (k-magic k-magic-0 skey) (n group text)
    (a b a-0 b-0 a-1 b-1 name) (y x y-0 alpha x-0 alpha-0 rndx))
  (defstrand init 5 (k-magic k-magic) (n n) (group group) (a a) (b b)
    (g (exp (gen) alpha-0)) (x x) (y (mul y alpha (rec alpha-0))))
  (defstrand group-init 1 (k-magic k-magic) (group group)
    (alpha alpha-0))
  (defstrand resp 3 (k-magic k-magic-0) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (y y) (x (mul x (rec alpha) alpha-0)))
  (defstrand group-init 1 (k-magic k-magic-0) (group group)
    (alpha alpha))
  (deflistener (exp (gen) (mul y x alpha)))
  (deflistener (cat (exp (gen) (mul y-0 alpha)) (mul y x (rec y-0))))
  (defstrand resp 3 (k-magic k-magic-0) (group group) (a a-0) (b b-0)
    (g (exp (gen) alpha)) (y y-0) (x (mul (rec alpha) x-0 alpha-0)))
  (defstrand init 2 (k-magic k-magic) (group group) (a a-1) (b b-1)
    (g (exp (gen) alpha-0)) (x x-0))
  (precedes ((0 1) (2 0)) ((1 0) (0 0)) ((1 0) (7 0)) ((2 2) (0 2))
    ((2 2) (6 0)) ((3 0) (2 0)) ((3 0) (7 0)) ((4 1) (0 4))
    ((5 1) (4 0)) ((6 2) (5 0)) ((7 1) (6 1)))
  (non-orig k-magic k-magic-0 (privk a) (privk b))
  (uniq-gen n y x y-0 alpha x-0 alpha-0)
  (absent (y (mul x (rec alpha) alpha-0))
    (y-0 (mul (rec alpha) x-0 alpha-0)))
  (precur (5 0))
  (operation encryption-test (displaced 8 1 group-init 1)
    (enc "Group id" group-0 (exp (gen) alpha-1) k-magic-1) (7 0))
  (traces
    ((recv (enc "Group id" group (exp (gen) alpha-0) k-magic))
      (send (enc a b group (exp (gen) (mul x alpha-0)) (privk a)))
      (recv
        (enc a b group (exp (gen) (mul y alpha))
          (exp (gen) (mul x alpha-0)) (privk b)))
      (send (enc n (exp (gen) (mul y x alpha)))) (recv n))
    ((send (enc "Group id" group (exp (gen) alpha-0) k-magic)))
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic-0))
      (recv (enc a b group (exp (gen) (mul x alpha-0)) (privk a)))
      (send
        (enc a b group (exp (gen) (mul y alpha))
          (exp (gen) (mul x alpha-0)) (privk b))))
    ((send (enc "Group id" group (exp (gen) alpha) k-magic-0)))
    ((recv (exp (gen) (mul y x alpha)))
      (send (exp (gen) (mul y x alpha))))
    ((recv (cat (exp (gen) (mul y-0 alpha)) (mul y x (rec y-0))))
      (send (cat (exp (gen) (mul y-0 alpha)) (mul y x (rec y-0)))))
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic-0))
      (recv
        (enc a-0 b-0 group (exp (gen) (mul x-0 alpha-0)) (privk a-0)))
      (send
        (enc a-0 b-0 group (exp (gen) (mul y-0 alpha))
          (exp (gen) (mul x-0 alpha-0)) (privk b-0))))
    ((recv (enc "Group id" group (exp (gen) alpha-0) k-magic))
      (send
        (enc a-1 b-1 group (exp (gen) (mul x-0 alpha-0)) (privk a-1)))))
  (label 153)
  (parent 78)
  (unrealized (4 0) (5 0))
  (aborted)
  (comment "aborted"))

(defskeleton dh_sig2
  (vars (k-magic k-magic-0 skey) (n group text) (a b a-0 b-0 name)
    (y x y-0 alpha alpha-0 rndx) (w expt))
  (defstrand init 5 (k-magic k-magic) (n n) (group group) (a a) (b b)
    (g (exp (gen) alpha-0)) (x x) (y (mul y alpha (rec alpha-0))))
  (defstrand group-init 1 (k-magic k-magic) (group group)
    (alpha alpha-0))
  (defstrand resp 3 (k-magic k-magic-0) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (y y) (x (mul x (rec alpha) alpha-0)))
  (defstrand group-init 1 (k-magic k-magic-0) (group group)
    (alpha alpha))
  (deflistener (exp (gen) (mul y x alpha)))
  (deflistener (cat (exp (gen) (mul y-0 alpha)) (mul y x (rec y-0))))
  (defstrand resp 3 (k-magic k-magic-0) (group group) (a a-0) (b b-0)
    (g (exp (gen) alpha)) (y y-0) (x (mul (rec alpha) alpha-0)))
  (deflistener (cat (exp (gen) (mul alpha-0 (rec w))) w))
  (precedes ((0 1) (2 0)) ((1 0) (0 0)) ((1 0) (7 0)) ((2 2) (0 2))
    ((2 2) (6 0)) ((3 0) (2 0)) ((4 1) (0 4)) ((5 1) (4 0))
    ((6 2) (5 0)) ((7 1) (6 1)))
  (non-orig k-magic k-magic-0 (privk a) (privk b))
  (uniq-gen n y x y-0 alpha alpha-0)
  (absent (y (mul x (rec alpha) alpha-0))
    (y-0 (mul (rec alpha) alpha-0)))
  (precur (5 0) (7 0))
  (operation nonce-test
    (added-listener (cat (exp (gen) (mul alpha-0 (rec w))) w))
    (exp (gen) alpha-0) (6 1)
    (enc "Group id" group (exp (gen) alpha-0) k-magic))
  (traces
    ((recv (enc "Group id" group (exp (gen) alpha-0) k-magic))
      (send (enc a b group (exp (gen) (mul x alpha-0)) (privk a)))
      (recv
        (enc a b group (exp (gen) (mul y alpha))
          (exp (gen) (mul x alpha-0)) (privk b)))
      (send (enc n (exp (gen) (mul y x alpha)))) (recv n))
    ((send (enc "Group id" group (exp (gen) alpha-0) k-magic)))
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic-0))
      (recv (enc a b group (exp (gen) (mul x alpha-0)) (privk a)))
      (send
        (enc a b group (exp (gen) (mul y alpha))
          (exp (gen) (mul x alpha-0)) (privk b))))
    ((send (enc "Group id" group (exp (gen) alpha) k-magic-0)))
    ((recv (exp (gen) (mul y x alpha)))
      (send (exp (gen) (mul y x alpha))))
    ((recv (cat (exp (gen) (mul y-0 alpha)) (mul y x (rec y-0))))
      (send (cat (exp (gen) (mul y-0 alpha)) (mul y x (rec y-0)))))
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic-0))
      (recv (enc a-0 b-0 group (exp (gen) alpha-0) (privk a-0)))
      (send
        (enc a-0 b-0 group (exp (gen) (mul y-0 alpha))
          (exp (gen) alpha-0) (privk b-0))))
    ((recv (cat (exp (gen) (mul alpha-0 (rec w))) w))
      (send (cat (exp (gen) (mul alpha-0 (rec w))) w))))
  (label 152)
  (parent 77)
  (unrealized (4 0) (5 0) (7 0))
  (aborted)
  (comment "aborted"))

(defskeleton dh_sig2
  (vars (k-magic k-magic-0 k-magic-1 skey) (n group group-0 text)
    (a b a-0 b-0 a-1 b-1 name) (y x y-0 alpha alpha-0 y-1 rndx)
    (x-0 expt))
  (defstrand init 5 (k-magic k-magic) (n n) (group group) (a a) (b b)
    (g (exp (gen) alpha-0)) (x x) (y (mul y alpha (rec alpha-0))))
  (defstrand group-init 1 (k-magic k-magic) (group group)
    (alpha alpha-0))
  (defstrand resp 3 (k-magic k-magic-0) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (y y) (x (mul x (rec alpha) alpha-0)))
  (defstrand group-init 1 (k-magic k-magic-0) (group group)
    (alpha alpha))
  (deflistener (exp (gen) (mul y x alpha)))
  (deflistener (cat (exp (gen) (mul y-0 alpha)) (mul y x (rec y-0))))
  (defstrand resp 3 (k-magic k-magic-0) (group group) (a a-0) (b b-0)
    (g (exp (gen) alpha)) (y y-0) (x (mul (rec alpha) alpha-0)))
  (defstrand resp 3 (k-magic k-magic-1) (group group-0) (a a-1) (b b-1)
    (g (exp (gen) (mul alpha-0 (rec y-1)))) (y y-1) (x x-0))
  (precedes ((0 1) (2 0)) ((1 0) (0 0)) ((1 0) (7 0)) ((2 2) (0 2))
    ((2 2) (6 0)) ((3 0) (2 0)) ((4 1) (0 4)) ((5 1) (4 0))
    ((6 2) (5 0)) ((7 2) (6 1)))
  (non-orig k-magic k-magic-0 k-magic-1 (privk a) (privk b))
  (uniq-gen n y x y-0 alpha alpha-0 y-1)
  (absent (y (mul x (rec alpha) alpha-0))
    (y-0 (mul (rec alpha) alpha-0)) (y-1 x-0))
  (precur (5 0))
  (operation nonce-test (added-strand resp 3) (exp (gen) alpha-0) (6 1)
    (enc "Group id" group (exp (gen) alpha-0) k-magic))
  (traces
    ((recv (enc "Group id" group (exp (gen) alpha-0) k-magic))
      (send (enc a b group (exp (gen) (mul x alpha-0)) (privk a)))
      (recv
        (enc a b group (exp (gen) (mul y alpha))
          (exp (gen) (mul x alpha-0)) (privk b)))
      (send (enc n (exp (gen) (mul y x alpha)))) (recv n))
    ((send (enc "Group id" group (exp (gen) alpha-0) k-magic)))
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic-0))
      (recv (enc a b group (exp (gen) (mul x alpha-0)) (privk a)))
      (send
        (enc a b group (exp (gen) (mul y alpha))
          (exp (gen) (mul x alpha-0)) (privk b))))
    ((send (enc "Group id" group (exp (gen) alpha) k-magic-0)))
    ((recv (exp (gen) (mul y x alpha)))
      (send (exp (gen) (mul y x alpha))))
    ((recv (cat (exp (gen) (mul y-0 alpha)) (mul y x (rec y-0))))
      (send (cat (exp (gen) (mul y-0 alpha)) (mul y x (rec y-0)))))
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic-0))
      (recv (enc a-0 b-0 group (exp (gen) alpha-0) (privk a-0)))
      (send
        (enc a-0 b-0 group (exp (gen) (mul y-0 alpha))
          (exp (gen) alpha-0) (privk b-0))))
    ((recv
       (enc "Group id" group-0 (exp (gen) (mul alpha-0 (rec y-1)))
         k-magic-1))
      (recv
        (enc a-1 b-1 group-0 (exp (gen) (mul alpha-0 (rec y-1) x-0))
          (privk a-1)))
      (send
        (enc a-1 b-1 group-0 (exp (gen) alpha-0)
          (exp (gen) (mul alpha-0 (rec y-1) x-0)) (privk b-1)))))
  (label 151)
  (parent 77)
  (unrealized (4 0) (5 0) (7 0) (7 1))
  (aborted)
  (comment "aborted"))

(defskeleton dh_sig2
  (vars (k-magic k-magic-0 k-magic-1 skey) (n group group-0 text)
    (a b a-0 b-0 a-1 b-1 name) (y x y-0 alpha alpha-0 x-0 rndx))
  (defstrand init 5 (k-magic k-magic) (n n) (group group) (a a) (b b)
    (g (exp (gen) alpha-0)) (x x) (y (mul y alpha (rec alpha-0))))
  (defstrand group-init 1 (k-magic k-magic) (group group)
    (alpha alpha-0))
  (defstrand resp 3 (k-magic k-magic-0) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (y y) (x (mul x (rec alpha) alpha-0)))
  (defstrand group-init 1 (k-magic k-magic-0) (group group)
    (alpha alpha))
  (deflistener (exp (gen) (mul y x alpha)))
  (deflistener (cat (exp (gen) (mul y-0 alpha)) (mul y x (rec y-0))))
  (defstrand resp 3 (k-magic k-magic-0) (group group) (a a-0) (b b-0)
    (g (exp (gen) alpha)) (y y-0) (x (mul (rec alpha) alpha-0)))
  (defstrand init 2 (k-magic k-magic-1) (group group-0) (a a-1) (b b-1)
    (g (exp (gen) (mul alpha-0 (rec x-0)))) (x x-0))
  (precedes ((0 1) (2 0)) ((1 0) (0 0)) ((1 0) (7 0)) ((2 2) (0 2))
    ((2 2) (6 0)) ((3 0) (2 0)) ((4 1) (0 4)) ((5 1) (4 0))
    ((6 2) (5 0)) ((7 1) (6 1)))
  (non-orig k-magic k-magic-0 k-magic-1 (privk a) (privk b))
  (uniq-gen n y x y-0 alpha alpha-0 x-0)
  (absent (y (mul x (rec alpha) alpha-0))
    (y-0 (mul (rec alpha) alpha-0)))
  (precur (5 0))
  (operation nonce-test (added-strand init 2) (exp (gen) alpha-0) (6 1)
    (enc "Group id" group (exp (gen) alpha-0) k-magic))
  (traces
    ((recv (enc "Group id" group (exp (gen) alpha-0) k-magic))
      (send (enc a b group (exp (gen) (mul x alpha-0)) (privk a)))
      (recv
        (enc a b group (exp (gen) (mul y alpha))
          (exp (gen) (mul x alpha-0)) (privk b)))
      (send (enc n (exp (gen) (mul y x alpha)))) (recv n))
    ((send (enc "Group id" group (exp (gen) alpha-0) k-magic)))
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic-0))
      (recv (enc a b group (exp (gen) (mul x alpha-0)) (privk a)))
      (send
        (enc a b group (exp (gen) (mul y alpha))
          (exp (gen) (mul x alpha-0)) (privk b))))
    ((send (enc "Group id" group (exp (gen) alpha) k-magic-0)))
    ((recv (exp (gen) (mul y x alpha)))
      (send (exp (gen) (mul y x alpha))))
    ((recv (cat (exp (gen) (mul y-0 alpha)) (mul y x (rec y-0))))
      (send (cat (exp (gen) (mul y-0 alpha)) (mul y x (rec y-0)))))
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic-0))
      (recv (enc a-0 b-0 group (exp (gen) alpha-0) (privk a-0)))
      (send
        (enc a-0 b-0 group (exp (gen) (mul y-0 alpha))
          (exp (gen) alpha-0) (privk b-0))))
    ((recv
       (enc "Group id" group-0 (exp (gen) (mul alpha-0 (rec x-0)))
         k-magic-1))
      (send (enc a-1 b-1 group-0 (exp (gen) alpha-0) (privk a-1)))))
  (label 150)
  (parent 77)
  (unrealized (4 0) (5 0) (7 0))
  (aborted)
  (comment "aborted"))

(defskeleton dh_sig2
  (vars (k-magic k-magic-0 skey) (n group text) (a b a-0 b-0 name)
    (alpha y x y-0 alpha-0 rndx) (w expt))
  (defstrand init 5 (k-magic k-magic) (n n) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (x x) (y (mul (rec alpha) y alpha-0)))
  (defstrand group-init 1 (k-magic k-magic) (group group) (alpha alpha))
  (defstrand resp 3 (k-magic k-magic-0) (group group) (a a) (b b)
    (g (exp (gen) alpha-0)) (y y) (x (mul alpha x (rec alpha-0))))
  (defstrand group-init 1 (k-magic k-magic-0) (group group)
    (alpha alpha-0))
  (deflistener (exp (gen) (mul y x alpha-0)))
  (deflistener (cat (exp (gen) (mul y-0 alpha-0)) (mul y x (rec y-0))))
  (defstrand resp 3 (k-magic k-magic-0) (group group) (a a-0) (b b-0)
    (g (exp (gen) alpha-0)) (y y-0) (x (one)))
  (deflistener (cat (exp (gen) (mul alpha-0 (rec w))) w))
  (precedes ((0 1) (2 0)) ((1 0) (0 0)) ((2 2) (0 2)) ((2 2) (6 0))
    ((3 0) (2 0)) ((3 0) (7 0)) ((4 1) (0 4)) ((5 1) (4 0))
    ((6 2) (5 0)) ((7 1) (6 1)))
  (non-orig k-magic k-magic-0 (privk a) (privk b))
  (uniq-gen n alpha y x y-0 alpha-0)
  (absent (y (mul alpha x (rec alpha-0))) (y-0 (one)))
  (precur (5 0) (7 0))
  (operation nonce-test
    (added-listener (cat (exp (gen) (mul alpha-0 (rec w))) w))
    (exp (gen) alpha-0) (6 1)
    (enc "Group id" group (exp (gen) alpha-0) k-magic-0))
  (traces
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (send (enc a b group (exp (gen) (mul alpha x)) (privk a)))
      (recv
        (enc a b group (exp (gen) (mul y alpha-0))
          (exp (gen) (mul alpha x)) (privk b)))
      (send (enc n (exp (gen) (mul y x alpha-0)))) (recv n))
    ((send (enc "Group id" group (exp (gen) alpha) k-magic)))
    ((recv (enc "Group id" group (exp (gen) alpha-0) k-magic-0))
      (recv (enc a b group (exp (gen) (mul alpha x)) (privk a)))
      (send
        (enc a b group (exp (gen) (mul y alpha-0))
          (exp (gen) (mul alpha x)) (privk b))))
    ((send (enc "Group id" group (exp (gen) alpha-0) k-magic-0)))
    ((recv (exp (gen) (mul y x alpha-0)))
      (send (exp (gen) (mul y x alpha-0))))
    ((recv (cat (exp (gen) (mul y-0 alpha-0)) (mul y x (rec y-0))))
      (send (cat (exp (gen) (mul y-0 alpha-0)) (mul y x (rec y-0)))))
    ((recv (enc "Group id" group (exp (gen) alpha-0) k-magic-0))
      (recv (enc a-0 b-0 group (exp (gen) alpha-0) (privk a-0)))
      (send
        (enc a-0 b-0 group (exp (gen) (mul y-0 alpha-0))
          (exp (gen) alpha-0) (privk b-0))))
    ((recv (cat (exp (gen) (mul alpha-0 (rec w))) w))
      (send (cat (exp (gen) (mul alpha-0 (rec w))) w))))
  (label 149)
  (parent 75)
  (unrealized (4 0) (5 0) (7 0))
  (aborted)
  (comment "aborted"))

(defskeleton dh_sig2
  (vars (k-magic k-magic-0 k-magic-1 skey) (n group group-0 text)
    (a b a-0 b-0 a-1 b-1 name) (alpha y x y-0 alpha-0 y-1 rndx)
    (x-0 expt))
  (defstrand init 5 (k-magic k-magic) (n n) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (x x) (y (mul (rec alpha) y alpha-0)))
  (defstrand group-init 1 (k-magic k-magic) (group group) (alpha alpha))
  (defstrand resp 3 (k-magic k-magic-0) (group group) (a a) (b b)
    (g (exp (gen) alpha-0)) (y y) (x (mul alpha x (rec alpha-0))))
  (defstrand group-init 1 (k-magic k-magic-0) (group group)
    (alpha alpha-0))
  (deflistener (exp (gen) (mul y x alpha-0)))
  (deflistener (cat (exp (gen) (mul y-0 alpha-0)) (mul y x (rec y-0))))
  (defstrand resp 3 (k-magic k-magic-0) (group group) (a a-0) (b b-0)
    (g (exp (gen) alpha-0)) (y y-0) (x (one)))
  (defstrand resp 3 (k-magic k-magic-1) (group group-0) (a a-1) (b b-1)
    (g (exp (gen) (mul alpha-0 (rec y-1)))) (y y-1) (x x-0))
  (precedes ((0 1) (2 0)) ((1 0) (0 0)) ((2 2) (0 2)) ((2 2) (6 0))
    ((3 0) (2 0)) ((3 0) (7 0)) ((4 1) (0 4)) ((5 1) (4 0))
    ((6 2) (5 0)) ((7 2) (6 1)))
  (non-orig k-magic k-magic-0 k-magic-1 (privk a) (privk b))
  (uniq-gen n alpha y x y-0 alpha-0 y-1)
  (absent (y (mul alpha x (rec alpha-0))) (y-0 (one)) (y-1 x-0))
  (precur (5 0))
  (operation nonce-test (added-strand resp 3) (exp (gen) alpha-0) (6 1)
    (enc "Group id" group (exp (gen) alpha-0) k-magic-0))
  (traces
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (send (enc a b group (exp (gen) (mul alpha x)) (privk a)))
      (recv
        (enc a b group (exp (gen) (mul y alpha-0))
          (exp (gen) (mul alpha x)) (privk b)))
      (send (enc n (exp (gen) (mul y x alpha-0)))) (recv n))
    ((send (enc "Group id" group (exp (gen) alpha) k-magic)))
    ((recv (enc "Group id" group (exp (gen) alpha-0) k-magic-0))
      (recv (enc a b group (exp (gen) (mul alpha x)) (privk a)))
      (send
        (enc a b group (exp (gen) (mul y alpha-0))
          (exp (gen) (mul alpha x)) (privk b))))
    ((send (enc "Group id" group (exp (gen) alpha-0) k-magic-0)))
    ((recv (exp (gen) (mul y x alpha-0)))
      (send (exp (gen) (mul y x alpha-0))))
    ((recv (cat (exp (gen) (mul y-0 alpha-0)) (mul y x (rec y-0))))
      (send (cat (exp (gen) (mul y-0 alpha-0)) (mul y x (rec y-0)))))
    ((recv (enc "Group id" group (exp (gen) alpha-0) k-magic-0))
      (recv (enc a-0 b-0 group (exp (gen) alpha-0) (privk a-0)))
      (send
        (enc a-0 b-0 group (exp (gen) (mul y-0 alpha-0))
          (exp (gen) alpha-0) (privk b-0))))
    ((recv
       (enc "Group id" group-0 (exp (gen) (mul alpha-0 (rec y-1)))
         k-magic-1))
      (recv
        (enc a-1 b-1 group-0 (exp (gen) (mul alpha-0 (rec y-1) x-0))
          (privk a-1)))
      (send
        (enc a-1 b-1 group-0 (exp (gen) alpha-0)
          (exp (gen) (mul alpha-0 (rec y-1) x-0)) (privk b-1)))))
  (label 148)
  (parent 75)
  (unrealized (4 0) (5 0) (7 0) (7 1))
  (aborted)
  (comment "aborted"))

(defskeleton dh_sig2
  (vars (k-magic k-magic-0 k-magic-1 skey) (n group group-0 text)
    (a b a-0 b-0 a-1 b-1 name) (alpha y x y-0 alpha-0 x-0 rndx))
  (defstrand init 5 (k-magic k-magic) (n n) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (x x) (y (mul (rec alpha) y alpha-0)))
  (defstrand group-init 1 (k-magic k-magic) (group group) (alpha alpha))
  (defstrand resp 3 (k-magic k-magic-0) (group group) (a a) (b b)
    (g (exp (gen) alpha-0)) (y y) (x (mul alpha x (rec alpha-0))))
  (defstrand group-init 1 (k-magic k-magic-0) (group group)
    (alpha alpha-0))
  (deflistener (exp (gen) (mul y x alpha-0)))
  (deflistener (cat (exp (gen) (mul y-0 alpha-0)) (mul y x (rec y-0))))
  (defstrand resp 3 (k-magic k-magic-0) (group group) (a a-0) (b b-0)
    (g (exp (gen) alpha-0)) (y y-0) (x (one)))
  (defstrand init 2 (k-magic k-magic-1) (group group-0) (a a-1) (b b-1)
    (g (exp (gen) (mul alpha-0 (rec x-0)))) (x x-0))
  (precedes ((0 1) (2 0)) ((1 0) (0 0)) ((2 2) (0 2)) ((2 2) (6 0))
    ((3 0) (2 0)) ((3 0) (7 0)) ((4 1) (0 4)) ((5 1) (4 0))
    ((6 2) (5 0)) ((7 1) (6 1)))
  (non-orig k-magic k-magic-0 k-magic-1 (privk a) (privk b))
  (uniq-gen n alpha y x y-0 alpha-0 x-0)
  (absent (y (mul alpha x (rec alpha-0))) (y-0 (one)))
  (precur (5 0))
  (operation nonce-test (added-strand init 2) (exp (gen) alpha-0) (6 1)
    (enc "Group id" group (exp (gen) alpha-0) k-magic-0))
  (traces
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (send (enc a b group (exp (gen) (mul alpha x)) (privk a)))
      (recv
        (enc a b group (exp (gen) (mul y alpha-0))
          (exp (gen) (mul alpha x)) (privk b)))
      (send (enc n (exp (gen) (mul y x alpha-0)))) (recv n))
    ((send (enc "Group id" group (exp (gen) alpha) k-magic)))
    ((recv (enc "Group id" group (exp (gen) alpha-0) k-magic-0))
      (recv (enc a b group (exp (gen) (mul alpha x)) (privk a)))
      (send
        (enc a b group (exp (gen) (mul y alpha-0))
          (exp (gen) (mul alpha x)) (privk b))))
    ((send (enc "Group id" group (exp (gen) alpha-0) k-magic-0)))
    ((recv (exp (gen) (mul y x alpha-0)))
      (send (exp (gen) (mul y x alpha-0))))
    ((recv (cat (exp (gen) (mul y-0 alpha-0)) (mul y x (rec y-0))))
      (send (cat (exp (gen) (mul y-0 alpha-0)) (mul y x (rec y-0)))))
    ((recv (enc "Group id" group (exp (gen) alpha-0) k-magic-0))
      (recv (enc a-0 b-0 group (exp (gen) alpha-0) (privk a-0)))
      (send
        (enc a-0 b-0 group (exp (gen) (mul y-0 alpha-0))
          (exp (gen) alpha-0) (privk b-0))))
    ((recv
       (enc "Group id" group-0 (exp (gen) (mul alpha-0 (rec x-0)))
         k-magic-1))
      (send (enc a-1 b-1 group-0 (exp (gen) alpha-0) (privk a-1)))))
  (label 147)
  (parent 75)
  (unrealized (4 0) (5 0) (7 0))
  (aborted)
  (comment "aborted"))

(defskeleton dh_sig2
  (vars (k-magic k-magic-0 k-magic-1 skey) (n group group-0 text)
    (a b a-0 b-0 a-1 b-1 name) (x expt) (y x-0 alpha y-0 alpha-0 rndx)
    (w expt) (y-1 rndx) (x-1 expt))
  (defstrand init 5 (k-magic k-magic) (n n) (group group) (a a) (b b)
    (g (exp (gen) alpha-0)) (x x-0) (y (mul y alpha (rec alpha-0))))
  (defstrand group-init 1 (k-magic k-magic) (group group)
    (alpha alpha-0))
  (defstrand resp 3 (k-magic k-magic-0) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (y y) (x (mul x-0 (rec alpha) alpha-0)))
  (defstrand group-init 1 (k-magic k-magic-0) (group group)
    (alpha alpha))
  (deflistener (exp (gen) (mul y x-0 alpha)))
  (deflistener
    (cat (exp (gen) (mul y-0 alpha-0))
      (mul y x-0 alpha (rec y-0) (rec alpha-0))))
  (defstrand resp 3 (k-magic k-magic) (group group) (a a-0) (b b-0)
    (g (exp (gen) alpha-0)) (y y-0) (x x))
  (deflistener (cat (exp (gen) (mul x alpha-0 (rec w))) w))
  (defstrand resp 3 (k-magic k-magic-1) (group group-0) (a a-1) (b b-1)
    (g (exp (gen) (mul x alpha-0 (rec w) (rec y-1)))) (y y-1) (x x-1))
  (precedes ((0 1) (2 0)) ((1 0) (0 0)) ((1 0) (8 0)) ((2 2) (0 2))
    ((2 2) (6 0)) ((3 0) (2 0)) ((4 1) (0 4)) ((5 1) (4 0))
    ((6 2) (5 0)) ((7 1) (6 1)) ((8 2) (7 0)))
  (non-orig k-magic k-magic-0 k-magic-1 (privk a) (privk b))
  (uniq-gen n y x-0 alpha y-0 alpha-0 y-1)
  (absent (y (mul x-0 (rec alpha) alpha-0)) (y-0 x) (y-1 x-1))
  (precur (5 0) (7 0))
  (operation nonce-test (added-strand resp 3)
    (exp (gen) (mul x alpha-0 (rec w))) (7 0))
  (traces
    ((recv (enc "Group id" group (exp (gen) alpha-0) k-magic))
      (send (enc a b group (exp (gen) (mul x-0 alpha-0)) (privk a)))
      (recv
        (enc a b group (exp (gen) (mul y alpha))
          (exp (gen) (mul x-0 alpha-0)) (privk b)))
      (send (enc n (exp (gen) (mul y x-0 alpha)))) (recv n))
    ((send (enc "Group id" group (exp (gen) alpha-0) k-magic)))
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic-0))
      (recv (enc a b group (exp (gen) (mul x-0 alpha-0)) (privk a)))
      (send
        (enc a b group (exp (gen) (mul y alpha))
          (exp (gen) (mul x-0 alpha-0)) (privk b))))
    ((send (enc "Group id" group (exp (gen) alpha) k-magic-0)))
    ((recv (exp (gen) (mul y x-0 alpha)))
      (send (exp (gen) (mul y x-0 alpha))))
    ((recv
       (cat (exp (gen) (mul y-0 alpha-0))
         (mul y x-0 alpha (rec y-0) (rec alpha-0))))
      (send
        (cat (exp (gen) (mul y-0 alpha-0))
          (mul y x-0 alpha (rec y-0) (rec alpha-0)))))
    ((recv (enc "Group id" group (exp (gen) alpha-0) k-magic))
      (recv (enc a-0 b-0 group (exp (gen) (mul x alpha-0)) (privk a-0)))
      (send
        (enc a-0 b-0 group (exp (gen) (mul y-0 alpha-0))
          (exp (gen) (mul x alpha-0)) (privk b-0))))
    ((recv (cat (exp (gen) (mul x alpha-0 (rec w))) w))
      (send (cat (exp (gen) (mul x alpha-0 (rec w))) w)))
    ((recv
       (enc "Group id" group-0
         (exp (gen) (mul x alpha-0 (rec w) (rec y-1))) k-magic-1))
      (recv
        (enc a-1 b-1 group-0
          (exp (gen) (mul x alpha-0 (rec w) (rec y-1) x-1))
          (privk a-1)))
      (send
        (enc a-1 b-1 group-0 (exp (gen) (mul x alpha-0 (rec w)))
          (exp (gen) (mul x alpha-0 (rec w) (rec y-1) x-1))
          (privk b-1)))))
  (label 146)
  (parent 73)
  (unrealized (4 0) (5 0) (8 0) (8 1))
  (aborted)
  (comment "aborted"))

(defskeleton dh_sig2
  (vars (k-magic k-magic-0 skey) (n group text) (a b a-0 b-0 name)
    (y rndx) (w expt) (x alpha alpha-0 y-0 rndx))
  (defstrand init 5 (k-magic k-magic) (n n) (group group) (a a) (b b)
    (g (exp (gen) alpha-0)) (x x) (y (mul alpha (rec alpha-0) y-0)))
  (defstrand group-init 1 (k-magic k-magic) (group group)
    (alpha alpha-0))
  (defstrand resp 3 (k-magic k-magic-0) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (y y-0) (x (mul x (rec alpha) alpha-0)))
  (defstrand group-init 1 (k-magic k-magic-0) (group group)
    (alpha alpha))
  (deflistener (exp (gen) (mul x alpha y-0)))
  (deflistener
    (cat (exp (gen) (mul y alpha-0))
      (mul (rec y) x alpha (rec alpha-0) y-0)))
  (defstrand resp 3 (k-magic k-magic) (group group) (a a-0) (b b-0)
    (g (exp (gen) alpha-0)) (y y) (x (mul w alpha (rec alpha-0) y-0)))
  (deflistener (cat (exp (gen) (mul alpha y-0)) w))
  (precedes ((0 1) (2 0)) ((1 0) (0 0)) ((2 2) (0 2)) ((2 2) (6 0))
    ((2 2) (7 0)) ((3 0) (2 0)) ((4 1) (0 4)) ((5 1) (4 0))
    ((6 2) (5 0)) ((7 1) (6 1)))
  (non-orig k-magic k-magic-0 (privk a) (privk b))
  (uniq-gen n y x alpha alpha-0 y-0)
  (absent (y (mul w alpha (rec alpha-0) y-0))
    (y-0 (mul x (rec alpha) alpha-0)))
  (precur (5 0) (7 0))
  (operation nonce-test (displaced 8 2 resp 3)
    (exp (gen) (mul x-0 alpha-1 (rec w-0))) (7 0))
  (traces
    ((recv (enc "Group id" group (exp (gen) alpha-0) k-magic))
      (send (enc a b group (exp (gen) (mul x alpha-0)) (privk a)))
      (recv
        (enc a b group (exp (gen) (mul alpha y-0))
          (exp (gen) (mul x alpha-0)) (privk b)))
      (send (enc n (exp (gen) (mul x alpha y-0)))) (recv n))
    ((send (enc "Group id" group (exp (gen) alpha-0) k-magic)))
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic-0))
      (recv (enc a b group (exp (gen) (mul x alpha-0)) (privk a)))
      (send
        (enc a b group (exp (gen) (mul alpha y-0))
          (exp (gen) (mul x alpha-0)) (privk b))))
    ((send (enc "Group id" group (exp (gen) alpha) k-magic-0)))
    ((recv (exp (gen) (mul x alpha y-0)))
      (send (exp (gen) (mul x alpha y-0))))
    ((recv
       (cat (exp (gen) (mul y alpha-0))
         (mul (rec y) x alpha (rec alpha-0) y-0)))
      (send
        (cat (exp (gen) (mul y alpha-0))
          (mul (rec y) x alpha (rec alpha-0) y-0))))
    ((recv (enc "Group id" group (exp (gen) alpha-0) k-magic))
      (recv
        (enc a-0 b-0 group (exp (gen) (mul w alpha y-0)) (privk a-0)))
      (send
        (enc a-0 b-0 group (exp (gen) (mul y alpha-0))
          (exp (gen) (mul w alpha y-0)) (privk b-0))))
    ((recv (cat (exp (gen) (mul alpha y-0)) w))
      (send (cat (exp (gen) (mul alpha y-0)) w))))
  (label 145)
  (parent 73)
  (unrealized (4 0) (5 0))
  (aborted)
  (comment "aborted"))

(defskeleton dh_sig2
  (vars (k-magic k-magic-0 skey) (n group text) (a b a-0 b-0 name)
    (y alpha y-0 alpha-0 rndx) (w expt) (x rndx))
  (defstrand init 5 (k-magic k-magic) (n n) (group group) (a a) (b b)
    (g (exp (gen) alpha-0)) (x x) (y (mul y alpha (rec alpha-0))))
  (defstrand group-init 1 (k-magic k-magic) (group group)
    (alpha alpha-0))
  (defstrand resp 3 (k-magic k-magic-0) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (y y) (x (mul (rec alpha) alpha-0 x)))
  (defstrand group-init 1 (k-magic k-magic-0) (group group)
    (alpha alpha))
  (deflistener (exp (gen) (mul y alpha x)))
  (deflistener
    (cat (exp (gen) (mul y-0 alpha-0))
      (mul y alpha (rec y-0) (rec alpha-0) x)))
  (defstrand resp 3 (k-magic k-magic) (group group) (a a-0) (b b-0)
    (g (exp (gen) alpha-0)) (y y-0) (x (mul w x)))
  (deflistener (cat (exp (gen) (mul alpha-0 x)) w))
  (precedes ((0 1) (2 0)) ((0 1) (7 0)) ((1 0) (0 0)) ((2 2) (0 2))
    ((2 2) (6 0)) ((3 0) (2 0)) ((4 1) (0 4)) ((5 1) (4 0))
    ((6 2) (5 0)) ((7 1) (6 1)))
  (non-orig k-magic k-magic-0 (privk a) (privk b))
  (uniq-gen n y alpha y-0 alpha-0 x)
  (absent (y (mul (rec alpha) alpha-0 x)) (y-0 (mul w x)))
  (precur (5 0) (7 0))
  (operation nonce-test (displaced 8 0 init 2)
    (exp (gen) (mul x-0 alpha-0 (rec w-0))) (7 0))
  (traces
    ((recv (enc "Group id" group (exp (gen) alpha-0) k-magic))
      (send (enc a b group (exp (gen) (mul alpha-0 x)) (privk a)))
      (recv
        (enc a b group (exp (gen) (mul y alpha))
          (exp (gen) (mul alpha-0 x)) (privk b)))
      (send (enc n (exp (gen) (mul y alpha x)))) (recv n))
    ((send (enc "Group id" group (exp (gen) alpha-0) k-magic)))
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic-0))
      (recv (enc a b group (exp (gen) (mul alpha-0 x)) (privk a)))
      (send
        (enc a b group (exp (gen) (mul y alpha))
          (exp (gen) (mul alpha-0 x)) (privk b))))
    ((send (enc "Group id" group (exp (gen) alpha) k-magic-0)))
    ((recv (exp (gen) (mul y alpha x)))
      (send (exp (gen) (mul y alpha x))))
    ((recv
       (cat (exp (gen) (mul y-0 alpha-0))
         (mul y alpha (rec y-0) (rec alpha-0) x)))
      (send
        (cat (exp (gen) (mul y-0 alpha-0))
          (mul y alpha (rec y-0) (rec alpha-0) x))))
    ((recv (enc "Group id" group (exp (gen) alpha-0) k-magic))
      (recv
        (enc a-0 b-0 group (exp (gen) (mul alpha-0 w x)) (privk a-0)))
      (send
        (enc a-0 b-0 group (exp (gen) (mul y-0 alpha-0))
          (exp (gen) (mul alpha-0 w x)) (privk b-0))))
    ((recv (cat (exp (gen) (mul alpha-0 x)) w))
      (send (cat (exp (gen) (mul alpha-0 x)) w))))
  (label 144)
  (parent 73)
  (unrealized (4 0) (5 0))
  (aborted)
  (comment "aborted"))

(defskeleton dh_sig2
  (vars (k-magic k-magic-0 k-magic-1 skey) (n group group-0 text)
    (a b a-0 b-0 a-1 b-1 name) (x expt) (y x-0 alpha y-0 alpha-0 rndx)
    (w expt) (x-1 rndx))
  (defstrand init 5 (k-magic k-magic) (n n) (group group) (a a) (b b)
    (g (exp (gen) alpha-0)) (x x-0) (y (mul y alpha (rec alpha-0))))
  (defstrand group-init 1 (k-magic k-magic) (group group)
    (alpha alpha-0))
  (defstrand resp 3 (k-magic k-magic-0) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (y y) (x (mul x-0 (rec alpha) alpha-0)))
  (defstrand group-init 1 (k-magic k-magic-0) (group group)
    (alpha alpha))
  (deflistener (exp (gen) (mul y x-0 alpha)))
  (deflistener
    (cat (exp (gen) (mul y-0 alpha-0))
      (mul y x-0 alpha (rec y-0) (rec alpha-0))))
  (defstrand resp 3 (k-magic k-magic) (group group) (a a-0) (b b-0)
    (g (exp (gen) alpha-0)) (y y-0) (x x))
  (deflistener (cat (exp (gen) (mul x alpha-0 (rec w))) w))
  (defstrand init 2 (k-magic k-magic-1) (group group-0) (a a-1) (b b-1)
    (g (exp (gen) (mul x alpha-0 (rec w) (rec x-1)))) (x x-1))
  (precedes ((0 1) (2 0)) ((1 0) (0 0)) ((1 0) (8 0)) ((2 2) (0 2))
    ((2 2) (6 0)) ((3 0) (2 0)) ((4 1) (0 4)) ((5 1) (4 0))
    ((6 2) (5 0)) ((7 1) (6 1)) ((8 1) (7 0)))
  (non-orig k-magic k-magic-0 k-magic-1 (privk a) (privk b))
  (uniq-gen n y x-0 alpha y-0 alpha-0 x-1)
  (absent (y (mul x-0 (rec alpha) alpha-0)) (y-0 x))
  (precur (5 0) (7 0))
  (operation nonce-test (added-strand init 2)
    (exp (gen) (mul x alpha-0 (rec w))) (7 0))
  (traces
    ((recv (enc "Group id" group (exp (gen) alpha-0) k-magic))
      (send (enc a b group (exp (gen) (mul x-0 alpha-0)) (privk a)))
      (recv
        (enc a b group (exp (gen) (mul y alpha))
          (exp (gen) (mul x-0 alpha-0)) (privk b)))
      (send (enc n (exp (gen) (mul y x-0 alpha)))) (recv n))
    ((send (enc "Group id" group (exp (gen) alpha-0) k-magic)))
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic-0))
      (recv (enc a b group (exp (gen) (mul x-0 alpha-0)) (privk a)))
      (send
        (enc a b group (exp (gen) (mul y alpha))
          (exp (gen) (mul x-0 alpha-0)) (privk b))))
    ((send (enc "Group id" group (exp (gen) alpha) k-magic-0)))
    ((recv (exp (gen) (mul y x-0 alpha)))
      (send (exp (gen) (mul y x-0 alpha))))
    ((recv
       (cat (exp (gen) (mul y-0 alpha-0))
         (mul y x-0 alpha (rec y-0) (rec alpha-0))))
      (send
        (cat (exp (gen) (mul y-0 alpha-0))
          (mul y x-0 alpha (rec y-0) (rec alpha-0)))))
    ((recv (enc "Group id" group (exp (gen) alpha-0) k-magic))
      (recv (enc a-0 b-0 group (exp (gen) (mul x alpha-0)) (privk a-0)))
      (send
        (enc a-0 b-0 group (exp (gen) (mul y-0 alpha-0))
          (exp (gen) (mul x alpha-0)) (privk b-0))))
    ((recv (cat (exp (gen) (mul x alpha-0 (rec w))) w))
      (send (cat (exp (gen) (mul x alpha-0 (rec w))) w)))
    ((recv
       (enc "Group id" group-0
         (exp (gen) (mul x alpha-0 (rec w) (rec x-1))) k-magic-1))
      (send
        (enc a-1 b-1 group-0 (exp (gen) (mul x alpha-0 (rec w)))
          (privk a-1)))))
  (label 143)
  (parent 73)
  (unrealized (4 0) (5 0) (8 0))
  (aborted)
  (comment "aborted"))

(defskeleton dh_sig2
  (vars (k-magic k-magic-0 skey) (n group text) (a b a-0 b-0 name)
    (y x alpha y-0 rndx) (w expt) (alpha-0 rndx))
  (defstrand init 5 (k-magic k-magic) (n n) (group group) (a a) (b b)
    (g (exp (gen) alpha-0)) (x x) (y (mul y alpha (rec alpha-0))))
  (defstrand group-init 1 (k-magic k-magic) (group group)
    (alpha alpha-0))
  (defstrand resp 3 (k-magic k-magic-0) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (y y) (x (mul x (rec alpha) alpha-0)))
  (defstrand group-init 1 (k-magic k-magic-0) (group group)
    (alpha alpha))
  (deflistener (exp (gen) (mul y x alpha)))
  (deflistener
    (cat (exp (gen) (mul y-0 alpha-0))
      (mul y x alpha (rec y-0) (rec alpha-0))))
  (defstrand resp 3 (k-magic k-magic) (group group) (a a-0) (b b-0)
    (g (exp (gen) alpha-0)) (y y-0) (x w))
  (deflistener (cat (exp (gen) alpha-0) w))
  (precedes ((0 1) (2 0)) ((1 0) (0 0)) ((1 0) (7 0)) ((2 2) (0 2))
    ((2 2) (6 0)) ((3 0) (2 0)) ((4 1) (0 4)) ((5 1) (4 0))
    ((6 2) (5 0)) ((7 1) (6 1)))
  (non-orig k-magic k-magic-0 (privk a) (privk b))
  (uniq-gen n y x alpha y-0 alpha-0)
  (absent (y (mul x (rec alpha) alpha-0)) (y-0 w))
  (precur (5 0) (7 0))
  (operation nonce-test (displaced 8 1 group-init 1) (exp (gen) alpha-1)
    (7 0))
  (traces
    ((recv (enc "Group id" group (exp (gen) alpha-0) k-magic))
      (send (enc a b group (exp (gen) (mul x alpha-0)) (privk a)))
      (recv
        (enc a b group (exp (gen) (mul y alpha))
          (exp (gen) (mul x alpha-0)) (privk b)))
      (send (enc n (exp (gen) (mul y x alpha)))) (recv n))
    ((send (enc "Group id" group (exp (gen) alpha-0) k-magic)))
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic-0))
      (recv (enc a b group (exp (gen) (mul x alpha-0)) (privk a)))
      (send
        (enc a b group (exp (gen) (mul y alpha))
          (exp (gen) (mul x alpha-0)) (privk b))))
    ((send (enc "Group id" group (exp (gen) alpha) k-magic-0)))
    ((recv (exp (gen) (mul y x alpha)))
      (send (exp (gen) (mul y x alpha))))
    ((recv
       (cat (exp (gen) (mul y-0 alpha-0))
         (mul y x alpha (rec y-0) (rec alpha-0))))
      (send
        (cat (exp (gen) (mul y-0 alpha-0))
          (mul y x alpha (rec y-0) (rec alpha-0)))))
    ((recv (enc "Group id" group (exp (gen) alpha-0) k-magic))
      (recv (enc a-0 b-0 group (exp (gen) (mul w alpha-0)) (privk a-0)))
      (send
        (enc a-0 b-0 group (exp (gen) (mul y-0 alpha-0))
          (exp (gen) (mul w alpha-0)) (privk b-0))))
    ((recv (cat (exp (gen) alpha-0) w))
      (send (cat (exp (gen) alpha-0) w))))
  (label 142)
  (parent 73)
  (unrealized (4 0) (5 0) (7 0))
  (aborted)
  (comment "aborted"))

(defskeleton dh_sig2
  (vars (k-magic k-magic-0 skey) (n group text) (a b a-0 b-0 name)
    (y x alpha y-0 alpha-0 rndx) (w expt))
  (defstrand init 5 (k-magic k-magic) (n n) (group group) (a a) (b b)
    (g (exp (gen) alpha-0)) (x x) (y (mul y alpha (rec alpha-0))))
  (defstrand group-init 1 (k-magic k-magic) (group group)
    (alpha alpha-0))
  (defstrand resp 3 (k-magic k-magic-0) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (y y) (x (mul x (rec alpha) alpha-0)))
  (defstrand group-init 1 (k-magic k-magic-0) (group group)
    (alpha alpha))
  (deflistener (exp (gen) (mul y x alpha)))
  (deflistener
    (cat (exp (gen) (mul y-0 alpha-0))
      (mul y x alpha (rec y-0) (rec alpha-0))))
  (defstrand resp 3 (k-magic k-magic) (group group) (a a-0) (b b-0)
    (g (exp (gen) alpha-0)) (y y-0) (x (mul (rec alpha-0) w)))
  (deflistener (cat (gen) w))
  (precedes ((0 1) (2 0)) ((1 0) (0 0)) ((1 0) (7 0)) ((2 2) (0 2))
    ((2 2) (6 0)) ((3 0) (2 0)) ((4 1) (0 4)) ((5 1) (4 0))
    ((6 2) (5 0)) ((7 1) (6 1)))
  (non-orig k-magic k-magic-0 (privk a) (privk b))
  (uniq-gen n y x alpha y-0 alpha-0)
  (absent (y (mul x (rec alpha) alpha-0)) (y-0 (mul (rec alpha-0) w)))
  (precur (5 0) (7 0))
  (operation nonce-test
    (contracted (x-0 (mul (rec alpha-0) w)) (alpha-1 alpha-0) (w-0 w))
    (gen) (7 0))
  (traces
    ((recv (enc "Group id" group (exp (gen) alpha-0) k-magic))
      (send (enc a b group (exp (gen) (mul x alpha-0)) (privk a)))
      (recv
        (enc a b group (exp (gen) (mul y alpha))
          (exp (gen) (mul x alpha-0)) (privk b)))
      (send (enc n (exp (gen) (mul y x alpha)))) (recv n))
    ((send (enc "Group id" group (exp (gen) alpha-0) k-magic)))
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic-0))
      (recv (enc a b group (exp (gen) (mul x alpha-0)) (privk a)))
      (send
        (enc a b group (exp (gen) (mul y alpha))
          (exp (gen) (mul x alpha-0)) (privk b))))
    ((send (enc "Group id" group (exp (gen) alpha) k-magic-0)))
    ((recv (exp (gen) (mul y x alpha)))
      (send (exp (gen) (mul y x alpha))))
    ((recv
       (cat (exp (gen) (mul y-0 alpha-0))
         (mul y x alpha (rec y-0) (rec alpha-0))))
      (send
        (cat (exp (gen) (mul y-0 alpha-0))
          (mul y x alpha (rec y-0) (rec alpha-0)))))
    ((recv (enc "Group id" group (exp (gen) alpha-0) k-magic))
      (recv (enc a-0 b-0 group (exp (gen) w) (privk a-0)))
      (send
        (enc a-0 b-0 group (exp (gen) (mul y-0 alpha-0)) (exp (gen) w)
          (privk b-0)))) ((recv (cat (gen) w)) (send (cat (gen) w))))
  (label 141)
  (parent 73)
  (unrealized (4 0) (5 0))
  (aborted)
  (comment "aborted"))

(defskeleton dh_sig2
  (vars (k-magic k-magic-0 skey) (n group text) (a b a-0 b-0 name)
    (y x y-0 alpha rndx) (w expt) (alpha-0 rndx))
  (defstrand init 5 (k-magic k-magic) (n n) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (x x) (y (mul y (rec alpha) alpha-0)))
  (defstrand group-init 1 (k-magic k-magic) (group group) (alpha alpha))
  (defstrand resp 3 (k-magic k-magic-0) (group group) (a a) (b b)
    (g (exp (gen) alpha-0)) (y y) (x (mul x alpha (rec alpha-0))))
  (defstrand group-init 1 (k-magic k-magic-0) (group group)
    (alpha alpha-0))
  (deflistener (exp (gen) (mul y x alpha-0)))
  (deflistener
    (cat (exp (gen) (mul y-0 alpha))
      (mul y x (rec y-0) (rec alpha) alpha-0)))
  (defstrand resp 3 (k-magic k-magic) (group group) (a a-0) (b b-0)
    (g (exp (gen) alpha)) (y y-0) (x (mul (rec alpha) w alpha-0)))
  (deflistener (cat (exp (gen) alpha-0) w))
  (precedes ((0 1) (2 0)) ((1 0) (0 0)) ((1 0) (7 0)) ((2 2) (0 2))
    ((2 2) (6 0)) ((3 0) (2 0)) ((3 0) (7 0)) ((4 1) (0 4))
    ((5 1) (4 0)) ((6 2) (5 0)) ((7 1) (6 1)))
  (non-orig k-magic k-magic-0 (privk a) (privk b))
  (uniq-gen n y x y-0 alpha alpha-0)
  (absent (y (mul x alpha (rec alpha-0)))
    (y-0 (mul (rec alpha) w alpha-0)))
  (precur (5 0) (7 0))
  (operation nonce-test (displaced 8 3 group-init 1) (exp (gen) alpha-1)
    (7 0))
  (traces
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (send (enc a b group (exp (gen) (mul x alpha)) (privk a)))
      (recv
        (enc a b group (exp (gen) (mul y alpha-0))
          (exp (gen) (mul x alpha)) (privk b)))
      (send (enc n (exp (gen) (mul y x alpha-0)))) (recv n))
    ((send (enc "Group id" group (exp (gen) alpha) k-magic)))
    ((recv (enc "Group id" group (exp (gen) alpha-0) k-magic-0))
      (recv (enc a b group (exp (gen) (mul x alpha)) (privk a)))
      (send
        (enc a b group (exp (gen) (mul y alpha-0))
          (exp (gen) (mul x alpha)) (privk b))))
    ((send (enc "Group id" group (exp (gen) alpha-0) k-magic-0)))
    ((recv (exp (gen) (mul y x alpha-0)))
      (send (exp (gen) (mul y x alpha-0))))
    ((recv
       (cat (exp (gen) (mul y-0 alpha))
         (mul y x (rec y-0) (rec alpha) alpha-0)))
      (send
        (cat (exp (gen) (mul y-0 alpha))
          (mul y x (rec y-0) (rec alpha) alpha-0))))
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (recv (enc a-0 b-0 group (exp (gen) (mul w alpha-0)) (privk a-0)))
      (send
        (enc a-0 b-0 group (exp (gen) (mul y-0 alpha))
          (exp (gen) (mul w alpha-0)) (privk b-0))))
    ((recv (cat (exp (gen) alpha-0) w))
      (send (cat (exp (gen) alpha-0) w))))
  (label 140)
  (parent 73)
  (unrealized (4 0) (5 0) (7 0))
  (aborted)
  (comment "aborted"))

(defskeleton dh_sig2
  (vars (k-magic k-magic-0 k-magic-1 skey) (n group group-0 text)
    (a b a-0 b-0 name) (y x alpha y-0 alpha-0 rndx) (w expt)
    (alpha-1 rndx))
  (defstrand init 5 (k-magic k-magic) (n n) (group group) (a a) (b b)
    (g (exp (gen) alpha-0)) (x x) (y (mul y alpha (rec alpha-0))))
  (defstrand group-init 1 (k-magic k-magic) (group group)
    (alpha alpha-0))
  (defstrand resp 3 (k-magic k-magic-0) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (y y) (x (mul x (rec alpha) alpha-0)))
  (defstrand group-init 1 (k-magic k-magic-0) (group group)
    (alpha alpha))
  (deflistener (exp (gen) (mul y x alpha)))
  (deflistener
    (cat (exp (gen) (mul y-0 alpha-0))
      (mul y x alpha (rec y-0) (rec alpha-0))))
  (defstrand resp 3 (k-magic k-magic) (group group) (a a-0) (b b-0)
    (g (exp (gen) alpha-0)) (y y-0) (x (mul (rec alpha-0) w alpha-1)))
  (deflistener (cat (exp (gen) alpha-1) w))
  (defstrand group-init 1 (k-magic k-magic-1) (group group-0)
    (alpha alpha-1))
  (precedes ((0 1) (2 0)) ((1 0) (0 0)) ((1 0) (7 0)) ((2 2) (0 2))
    ((2 2) (6 0)) ((3 0) (2 0)) ((4 1) (0 4)) ((5 1) (4 0))
    ((6 2) (5 0)) ((7 1) (6 1)) ((8 0) (7 0)))
  (non-orig k-magic k-magic-0 (privk a) (privk b))
  (uniq-gen n y x alpha y-0 alpha-0 alpha-1)
  (absent (y (mul x (rec alpha) alpha-0))
    (y-0 (mul (rec alpha-0) w alpha-1)))
  (precur (5 0) (7 0))
  (operation nonce-test (added-strand group-init 1) (exp (gen) alpha-1)
    (7 0))
  (traces
    ((recv (enc "Group id" group (exp (gen) alpha-0) k-magic))
      (send (enc a b group (exp (gen) (mul x alpha-0)) (privk a)))
      (recv
        (enc a b group (exp (gen) (mul y alpha))
          (exp (gen) (mul x alpha-0)) (privk b)))
      (send (enc n (exp (gen) (mul y x alpha)))) (recv n))
    ((send (enc "Group id" group (exp (gen) alpha-0) k-magic)))
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic-0))
      (recv (enc a b group (exp (gen) (mul x alpha-0)) (privk a)))
      (send
        (enc a b group (exp (gen) (mul y alpha))
          (exp (gen) (mul x alpha-0)) (privk b))))
    ((send (enc "Group id" group (exp (gen) alpha) k-magic-0)))
    ((recv (exp (gen) (mul y x alpha)))
      (send (exp (gen) (mul y x alpha))))
    ((recv
       (cat (exp (gen) (mul y-0 alpha-0))
         (mul y x alpha (rec y-0) (rec alpha-0))))
      (send
        (cat (exp (gen) (mul y-0 alpha-0))
          (mul y x alpha (rec y-0) (rec alpha-0)))))
    ((recv (enc "Group id" group (exp (gen) alpha-0) k-magic))
      (recv (enc a-0 b-0 group (exp (gen) (mul w alpha-1)) (privk a-0)))
      (send
        (enc a-0 b-0 group (exp (gen) (mul y-0 alpha-0))
          (exp (gen) (mul w alpha-1)) (privk b-0))))
    ((recv (cat (exp (gen) alpha-1) w))
      (send (cat (exp (gen) alpha-1) w)))
    ((send (enc "Group id" group-0 (exp (gen) alpha-1) k-magic-1))))
  (label 139)
  (parent 73)
  (unrealized (4 0) (5 0))
  (aborted)
  (comment "aborted"))

(defskeleton dh_sig2
  (vars (k-magic k-magic-0 k-magic-1 skey) (n group group-0 text)
    (a b a-0 b-0 a-1 b-1 name) (y x alpha y-0 rndx) (x-0 expt)
    (alpha-0 y-1 alpha-1 rndx))
  (defstrand init 5 (k-magic k-magic) (n n) (group group) (a a) (b b)
    (g (exp (gen) alpha-0)) (x x) (y (mul y alpha (rec alpha-0))))
  (defstrand group-init 1 (k-magic k-magic) (group group)
    (alpha alpha-0))
  (defstrand resp 3 (k-magic k-magic-0) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (y y) (x (mul x (rec alpha) alpha-0)))
  (defstrand group-init 1 (k-magic k-magic-0) (group group)
    (alpha alpha))
  (deflistener (exp (gen) (mul y x alpha)))
  (deflistener
    (cat (exp (gen) (mul y-0 alpha-0))
      (mul y x alpha (rec y-0) (rec alpha-0))))
  (defstrand resp 3 (k-magic k-magic) (group group) (a a-0) (b b-0)
    (g (exp (gen) alpha-0)) (y y-0) (x (mul (rec alpha-0) y-1 alpha-1)))
  (defstrand resp 3 (k-magic k-magic-1) (group group-0) (a a-1) (b b-1)
    (g (exp (gen) alpha-1)) (y y-1) (x x-0))
  (defstrand group-init 1 (k-magic k-magic-1) (group group-0)
    (alpha alpha-1))
  (precedes ((0 1) (2 0)) ((1 0) (0 0)) ((1 0) (7 0)) ((2 2) (0 2))
    ((2 2) (6 0)) ((3 0) (2 0)) ((4 1) (0 4)) ((5 1) (4 0))
    ((6 2) (5 0)) ((7 2) (6 1)) ((8 0) (7 0)))
  (non-orig k-magic k-magic-0 k-magic-1 (privk a) (privk b))
  (uniq-gen n y x alpha y-0 alpha-0 y-1 alpha-1)
  (absent (y (mul x (rec alpha) alpha-0))
    (y-0 (mul (rec alpha-0) y-1 alpha-1)) (y-1 x-0))
  (precur (5 0))
  (operation encryption-test (added-strand group-init 1)
    (enc "Group id" group-0 (exp (gen) alpha-1) k-magic-1) (7 0))
  (traces
    ((recv (enc "Group id" group (exp (gen) alpha-0) k-magic))
      (send (enc a b group (exp (gen) (mul x alpha-0)) (privk a)))
      (recv
        (enc a b group (exp (gen) (mul y alpha))
          (exp (gen) (mul x alpha-0)) (privk b)))
      (send (enc n (exp (gen) (mul y x alpha)))) (recv n))
    ((send (enc "Group id" group (exp (gen) alpha-0) k-magic)))
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic-0))
      (recv (enc a b group (exp (gen) (mul x alpha-0)) (privk a)))
      (send
        (enc a b group (exp (gen) (mul y alpha))
          (exp (gen) (mul x alpha-0)) (privk b))))
    ((send (enc "Group id" group (exp (gen) alpha) k-magic-0)))
    ((recv (exp (gen) (mul y x alpha)))
      (send (exp (gen) (mul y x alpha))))
    ((recv
       (cat (exp (gen) (mul y-0 alpha-0))
         (mul y x alpha (rec y-0) (rec alpha-0))))
      (send
        (cat (exp (gen) (mul y-0 alpha-0))
          (mul y x alpha (rec y-0) (rec alpha-0)))))
    ((recv (enc "Group id" group (exp (gen) alpha-0) k-magic))
      (recv
        (enc a-0 b-0 group (exp (gen) (mul y-1 alpha-1)) (privk a-0)))
      (send
        (enc a-0 b-0 group (exp (gen) (mul y-0 alpha-0))
          (exp (gen) (mul y-1 alpha-1)) (privk b-0))))
    ((recv (enc "Group id" group-0 (exp (gen) alpha-1) k-magic-1))
      (recv
        (enc a-1 b-1 group-0 (exp (gen) (mul x-0 alpha-1)) (privk a-1)))
      (send
        (enc a-1 b-1 group-0 (exp (gen) (mul y-1 alpha-1))
          (exp (gen) (mul x-0 alpha-1)) (privk b-1))))
    ((send (enc "Group id" group-0 (exp (gen) alpha-1) k-magic-1))))
  (label 138)
  (parent 72)
  (unrealized (4 0) (5 0) (7 1))
  (aborted)
  (comment "aborted"))

(defskeleton dh_sig2
  (vars (k-magic k-magic-0 skey) (n group text)
    (a b a-0 b-0 a-1 b-1 name) (y x y-0 rndx) (x-0 expt)
    (alpha y-1 alpha-0 rndx))
  (defstrand init 5 (k-magic k-magic) (n n) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (x x) (y (mul y (rec alpha) alpha-0)))
  (defstrand group-init 1 (k-magic k-magic) (group group) (alpha alpha))
  (defstrand resp 3 (k-magic k-magic-0) (group group) (a a) (b b)
    (g (exp (gen) alpha-0)) (y y) (x (mul x alpha (rec alpha-0))))
  (defstrand group-init 1 (k-magic k-magic-0) (group group)
    (alpha alpha-0))
  (deflistener (exp (gen) (mul y x alpha-0)))
  (deflistener
    (cat (exp (gen) (mul y-0 alpha))
      (mul y x (rec y-0) (rec alpha) alpha-0)))
  (defstrand resp 3 (k-magic k-magic) (group group) (a a-0) (b b-0)
    (g (exp (gen) alpha)) (y y-0) (x (mul (rec alpha) y-1 alpha-0)))
  (defstrand resp 3 (k-magic k-magic-0) (group group) (a a-1) (b b-1)
    (g (exp (gen) alpha-0)) (y y-1) (x x-0))
  (precedes ((0 1) (2 0)) ((1 0) (0 0)) ((1 0) (7 0)) ((2 2) (0 2))
    ((2 2) (6 0)) ((3 0) (2 0)) ((3 0) (7 0)) ((4 1) (0 4))
    ((5 1) (4 0)) ((6 2) (5 0)) ((7 2) (6 1)))
  (non-orig k-magic k-magic-0 (privk a) (privk b))
  (uniq-gen n y x y-0 alpha y-1 alpha-0)
  (absent (y (mul x alpha (rec alpha-0)))
    (y-0 (mul (rec alpha) y-1 alpha-0)) (y-1 x-0))
  (precur (5 0))
  (operation encryption-test (displaced 8 3 group-init 1)
    (enc "Group id" group-0 (exp (gen) alpha-1) k-magic-1) (7 0))
  (traces
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (send (enc a b group (exp (gen) (mul x alpha)) (privk a)))
      (recv
        (enc a b group (exp (gen) (mul y alpha-0))
          (exp (gen) (mul x alpha)) (privk b)))
      (send (enc n (exp (gen) (mul y x alpha-0)))) (recv n))
    ((send (enc "Group id" group (exp (gen) alpha) k-magic)))
    ((recv (enc "Group id" group (exp (gen) alpha-0) k-magic-0))
      (recv (enc a b group (exp (gen) (mul x alpha)) (privk a)))
      (send
        (enc a b group (exp (gen) (mul y alpha-0))
          (exp (gen) (mul x alpha)) (privk b))))
    ((send (enc "Group id" group (exp (gen) alpha-0) k-magic-0)))
    ((recv (exp (gen) (mul y x alpha-0)))
      (send (exp (gen) (mul y x alpha-0))))
    ((recv
       (cat (exp (gen) (mul y-0 alpha))
         (mul y x (rec y-0) (rec alpha) alpha-0)))
      (send
        (cat (exp (gen) (mul y-0 alpha))
          (mul y x (rec y-0) (rec alpha) alpha-0))))
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (recv
        (enc a-0 b-0 group (exp (gen) (mul y-1 alpha-0)) (privk a-0)))
      (send
        (enc a-0 b-0 group (exp (gen) (mul y-0 alpha))
          (exp (gen) (mul y-1 alpha-0)) (privk b-0))))
    ((recv (enc "Group id" group (exp (gen) alpha-0) k-magic-0))
      (recv
        (enc a-1 b-1 group (exp (gen) (mul x-0 alpha-0)) (privk a-1)))
      (send
        (enc a-1 b-1 group (exp (gen) (mul y-1 alpha-0))
          (exp (gen) (mul x-0 alpha-0)) (privk b-1)))))
  (label 137)
  (parent 72)
  (unrealized (4 0) (5 0) (7 1))
  (aborted)
  (comment "aborted"))

(defskeleton dh_sig2
  (vars (k-magic k-magic-0 skey) (n group text)
    (a b a-0 b-0 a-1 b-1 name) (y x alpha y-0 rndx) (x-0 expt)
    (y-1 alpha-0 rndx))
  (defstrand init 5 (k-magic k-magic) (n n) (group group) (a a) (b b)
    (g (exp (gen) alpha-0)) (x x) (y (mul y alpha (rec alpha-0))))
  (defstrand group-init 1 (k-magic k-magic) (group group)
    (alpha alpha-0))
  (defstrand resp 3 (k-magic k-magic-0) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (y y) (x (mul x (rec alpha) alpha-0)))
  (defstrand group-init 1 (k-magic k-magic-0) (group group)
    (alpha alpha))
  (deflistener (exp (gen) (mul y x alpha)))
  (deflistener
    (cat (exp (gen) (mul y-0 alpha-0))
      (mul y x alpha (rec y-0) (rec alpha-0))))
  (defstrand resp 3 (k-magic k-magic) (group group) (a a-0) (b b-0)
    (g (exp (gen) alpha-0)) (y y-0) (x y-1))
  (defstrand resp 3 (k-magic k-magic) (group group) (a a-1) (b b-1)
    (g (exp (gen) alpha-0)) (y y-1) (x x-0))
  (precedes ((0 1) (2 0)) ((1 0) (0 0)) ((1 0) (7 0)) ((2 2) (0 2))
    ((2 2) (6 0)) ((3 0) (2 0)) ((4 1) (0 4)) ((5 1) (4 0))
    ((6 2) (5 0)) ((7 2) (6 1)))
  (non-orig k-magic k-magic-0 (privk a) (privk b))
  (uniq-gen n y x alpha y-0 y-1 alpha-0)
  (absent (y (mul x (rec alpha) alpha-0)) (y-0 y-1) (y-1 x-0))
  (precur (5 0))
  (operation encryption-test (displaced 8 1 group-init 1)
    (enc "Group id" group-0 (exp (gen) alpha-1) k-magic-1) (7 0))
  (traces
    ((recv (enc "Group id" group (exp (gen) alpha-0) k-magic))
      (send (enc a b group (exp (gen) (mul x alpha-0)) (privk a)))
      (recv
        (enc a b group (exp (gen) (mul y alpha))
          (exp (gen) (mul x alpha-0)) (privk b)))
      (send (enc n (exp (gen) (mul y x alpha)))) (recv n))
    ((send (enc "Group id" group (exp (gen) alpha-0) k-magic)))
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic-0))
      (recv (enc a b group (exp (gen) (mul x alpha-0)) (privk a)))
      (send
        (enc a b group (exp (gen) (mul y alpha))
          (exp (gen) (mul x alpha-0)) (privk b))))
    ((send (enc "Group id" group (exp (gen) alpha) k-magic-0)))
    ((recv (exp (gen) (mul y x alpha)))
      (send (exp (gen) (mul y x alpha))))
    ((recv
       (cat (exp (gen) (mul y-0 alpha-0))
         (mul y x alpha (rec y-0) (rec alpha-0))))
      (send
        (cat (exp (gen) (mul y-0 alpha-0))
          (mul y x alpha (rec y-0) (rec alpha-0)))))
    ((recv (enc "Group id" group (exp (gen) alpha-0) k-magic))
      (recv
        (enc a-0 b-0 group (exp (gen) (mul y-1 alpha-0)) (privk a-0)))
      (send
        (enc a-0 b-0 group (exp (gen) (mul y-0 alpha-0))
          (exp (gen) (mul y-1 alpha-0)) (privk b-0))))
    ((recv (enc "Group id" group (exp (gen) alpha-0) k-magic))
      (recv
        (enc a-1 b-1 group (exp (gen) (mul x-0 alpha-0)) (privk a-1)))
      (send
        (enc a-1 b-1 group (exp (gen) (mul y-1 alpha-0))
          (exp (gen) (mul x-0 alpha-0)) (privk b-1)))))
  (label 136)
  (parent 72)
  (unrealized (4 0) (5 0) (7 1))
  (aborted)
  (comment "aborted"))

(defskeleton dh_sig2
  (vars (k-magic k-magic-0 k-magic-1 skey) (n group group-0 text)
    (a b a-0 b-0 a-1 b-1 name) (y x alpha y-0 alpha-0 x-0 alpha-1 rndx))
  (defstrand init 5 (k-magic k-magic) (n n) (group group) (a a) (b b)
    (g (exp (gen) alpha-0)) (x x) (y (mul y alpha (rec alpha-0))))
  (defstrand group-init 1 (k-magic k-magic) (group group)
    (alpha alpha-0))
  (defstrand resp 3 (k-magic k-magic-0) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (y y) (x (mul x (rec alpha) alpha-0)))
  (defstrand group-init 1 (k-magic k-magic-0) (group group)
    (alpha alpha))
  (deflistener (exp (gen) (mul y x alpha)))
  (deflistener
    (cat (exp (gen) (mul y-0 alpha-0))
      (mul y x alpha (rec y-0) (rec alpha-0))))
  (defstrand resp 3 (k-magic k-magic) (group group) (a a-0) (b b-0)
    (g (exp (gen) alpha-0)) (y y-0) (x (mul (rec alpha-0) x-0 alpha-1)))
  (defstrand init 2 (k-magic k-magic-1) (group group-0) (a a-1) (b b-1)
    (g (exp (gen) alpha-1)) (x x-0))
  (defstrand group-init 1 (k-magic k-magic-1) (group group-0)
    (alpha alpha-1))
  (precedes ((0 1) (2 0)) ((1 0) (0 0)) ((1 0) (7 0)) ((2 2) (0 2))
    ((2 2) (6 0)) ((3 0) (2 0)) ((4 1) (0 4)) ((5 1) (4 0))
    ((6 2) (5 0)) ((7 1) (6 1)) ((8 0) (7 0)))
  (non-orig k-magic k-magic-0 k-magic-1 (privk a) (privk b))
  (uniq-gen n y x alpha y-0 alpha-0 x-0 alpha-1)
  (absent (y (mul x (rec alpha) alpha-0))
    (y-0 (mul (rec alpha-0) x-0 alpha-1)))
  (precur (5 0))
  (operation encryption-test (added-strand group-init 1)
    (enc "Group id" group-0 (exp (gen) alpha-1) k-magic-1) (7 0))
  (traces
    ((recv (enc "Group id" group (exp (gen) alpha-0) k-magic))
      (send (enc a b group (exp (gen) (mul x alpha-0)) (privk a)))
      (recv
        (enc a b group (exp (gen) (mul y alpha))
          (exp (gen) (mul x alpha-0)) (privk b)))
      (send (enc n (exp (gen) (mul y x alpha)))) (recv n))
    ((send (enc "Group id" group (exp (gen) alpha-0) k-magic)))
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic-0))
      (recv (enc a b group (exp (gen) (mul x alpha-0)) (privk a)))
      (send
        (enc a b group (exp (gen) (mul y alpha))
          (exp (gen) (mul x alpha-0)) (privk b))))
    ((send (enc "Group id" group (exp (gen) alpha) k-magic-0)))
    ((recv (exp (gen) (mul y x alpha)))
      (send (exp (gen) (mul y x alpha))))
    ((recv
       (cat (exp (gen) (mul y-0 alpha-0))
         (mul y x alpha (rec y-0) (rec alpha-0))))
      (send
        (cat (exp (gen) (mul y-0 alpha-0))
          (mul y x alpha (rec y-0) (rec alpha-0)))))
    ((recv (enc "Group id" group (exp (gen) alpha-0) k-magic))
      (recv
        (enc a-0 b-0 group (exp (gen) (mul x-0 alpha-1)) (privk a-0)))
      (send
        (enc a-0 b-0 group (exp (gen) (mul y-0 alpha-0))
          (exp (gen) (mul x-0 alpha-1)) (privk b-0))))
    ((recv (enc "Group id" group-0 (exp (gen) alpha-1) k-magic-1))
      (send
        (enc a-1 b-1 group-0 (exp (gen) (mul x-0 alpha-1))
          (privk a-1))))
    ((send (enc "Group id" group-0 (exp (gen) alpha-1) k-magic-1))))
  (label 135)
  (parent 69)
  (unrealized (4 0) (5 0))
  (aborted)
  (comment "aborted"))

(defskeleton dh_sig2
  (vars (k-magic k-magic-0 skey) (n group text)
    (a b a-0 b-0 a-1 b-1 name) (y x y-0 alpha x-0 alpha-0 rndx))
  (defstrand init 5 (k-magic k-magic) (n n) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (x x) (y (mul y (rec alpha) alpha-0)))
  (defstrand group-init 1 (k-magic k-magic) (group group) (alpha alpha))
  (defstrand resp 3 (k-magic k-magic-0) (group group) (a a) (b b)
    (g (exp (gen) alpha-0)) (y y) (x (mul x alpha (rec alpha-0))))
  (defstrand group-init 1 (k-magic k-magic-0) (group group)
    (alpha alpha-0))
  (deflistener (exp (gen) (mul y x alpha-0)))
  (deflistener
    (cat (exp (gen) (mul y-0 alpha))
      (mul y x (rec y-0) (rec alpha) alpha-0)))
  (defstrand resp 3 (k-magic k-magic) (group group) (a a-0) (b b-0)
    (g (exp (gen) alpha)) (y y-0) (x (mul (rec alpha) x-0 alpha-0)))
  (defstrand init 2 (k-magic k-magic-0) (group group) (a a-1) (b b-1)
    (g (exp (gen) alpha-0)) (x x-0))
  (precedes ((0 1) (2 0)) ((1 0) (0 0)) ((1 0) (7 0)) ((2 2) (0 2))
    ((2 2) (6 0)) ((3 0) (2 0)) ((3 0) (7 0)) ((4 1) (0 4))
    ((5 1) (4 0)) ((6 2) (5 0)) ((7 1) (6 1)))
  (non-orig k-magic k-magic-0 (privk a) (privk b))
  (uniq-gen n y x y-0 alpha x-0 alpha-0)
  (absent (y (mul x alpha (rec alpha-0)))
    (y-0 (mul (rec alpha) x-0 alpha-0)))
  (precur (5 0))
  (operation encryption-test (displaced 8 3 group-init 1)
    (enc "Group id" group-0 (exp (gen) alpha-1) k-magic-1) (7 0))
  (traces
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (send (enc a b group (exp (gen) (mul x alpha)) (privk a)))
      (recv
        (enc a b group (exp (gen) (mul y alpha-0))
          (exp (gen) (mul x alpha)) (privk b)))
      (send (enc n (exp (gen) (mul y x alpha-0)))) (recv n))
    ((send (enc "Group id" group (exp (gen) alpha) k-magic)))
    ((recv (enc "Group id" group (exp (gen) alpha-0) k-magic-0))
      (recv (enc a b group (exp (gen) (mul x alpha)) (privk a)))
      (send
        (enc a b group (exp (gen) (mul y alpha-0))
          (exp (gen) (mul x alpha)) (privk b))))
    ((send (enc "Group id" group (exp (gen) alpha-0) k-magic-0)))
    ((recv (exp (gen) (mul y x alpha-0)))
      (send (exp (gen) (mul y x alpha-0))))
    ((recv
       (cat (exp (gen) (mul y-0 alpha))
         (mul y x (rec y-0) (rec alpha) alpha-0)))
      (send
        (cat (exp (gen) (mul y-0 alpha))
          (mul y x (rec y-0) (rec alpha) alpha-0))))
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (recv
        (enc a-0 b-0 group (exp (gen) (mul x-0 alpha-0)) (privk a-0)))
      (send
        (enc a-0 b-0 group (exp (gen) (mul y-0 alpha))
          (exp (gen) (mul x-0 alpha-0)) (privk b-0))))
    ((recv (enc "Group id" group (exp (gen) alpha-0) k-magic-0))
      (send
        (enc a-1 b-1 group (exp (gen) (mul x-0 alpha-0)) (privk a-1)))))
  (label 134)
  (parent 69)
  (unrealized (4 0) (5 0))
  (aborted)
  (comment "aborted"))

(defskeleton dh_sig2
  (vars (k-magic k-magic-0 skey) (n group text)
    (a b a-0 b-0 a-1 b-1 name) (y x alpha y-0 x-0 alpha-0 rndx))
  (defstrand init 5 (k-magic k-magic) (n n) (group group) (a a) (b b)
    (g (exp (gen) alpha-0)) (x x) (y (mul y alpha (rec alpha-0))))
  (defstrand group-init 1 (k-magic k-magic) (group group)
    (alpha alpha-0))
  (defstrand resp 3 (k-magic k-magic-0) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (y y) (x (mul x (rec alpha) alpha-0)))
  (defstrand group-init 1 (k-magic k-magic-0) (group group)
    (alpha alpha))
  (deflistener (exp (gen) (mul y x alpha)))
  (deflistener
    (cat (exp (gen) (mul y-0 alpha-0))
      (mul y x alpha (rec y-0) (rec alpha-0))))
  (defstrand resp 3 (k-magic k-magic) (group group) (a a-0) (b b-0)
    (g (exp (gen) alpha-0)) (y y-0) (x x-0))
  (defstrand init 2 (k-magic k-magic) (group group) (a a-1) (b b-1)
    (g (exp (gen) alpha-0)) (x x-0))
  (precedes ((0 1) (2 0)) ((1 0) (0 0)) ((1 0) (7 0)) ((2 2) (0 2))
    ((2 2) (6 0)) ((3 0) (2 0)) ((4 1) (0 4)) ((5 1) (4 0))
    ((6 2) (5 0)) ((7 1) (6 1)))
  (non-orig k-magic k-magic-0 (privk a) (privk b))
  (uniq-gen n y x alpha y-0 x-0 alpha-0)
  (absent (y (mul x (rec alpha) alpha-0)) (y-0 x-0))
  (precur (5 0))
  (operation encryption-test (displaced 8 1 group-init 1)
    (enc "Group id" group-0 (exp (gen) alpha-1) k-magic-1) (7 0))
  (traces
    ((recv (enc "Group id" group (exp (gen) alpha-0) k-magic))
      (send (enc a b group (exp (gen) (mul x alpha-0)) (privk a)))
      (recv
        (enc a b group (exp (gen) (mul y alpha))
          (exp (gen) (mul x alpha-0)) (privk b)))
      (send (enc n (exp (gen) (mul y x alpha)))) (recv n))
    ((send (enc "Group id" group (exp (gen) alpha-0) k-magic)))
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic-0))
      (recv (enc a b group (exp (gen) (mul x alpha-0)) (privk a)))
      (send
        (enc a b group (exp (gen) (mul y alpha))
          (exp (gen) (mul x alpha-0)) (privk b))))
    ((send (enc "Group id" group (exp (gen) alpha) k-magic-0)))
    ((recv (exp (gen) (mul y x alpha)))
      (send (exp (gen) (mul y x alpha))))
    ((recv
       (cat (exp (gen) (mul y-0 alpha-0))
         (mul y x alpha (rec y-0) (rec alpha-0))))
      (send
        (cat (exp (gen) (mul y-0 alpha-0))
          (mul y x alpha (rec y-0) (rec alpha-0)))))
    ((recv (enc "Group id" group (exp (gen) alpha-0) k-magic))
      (recv
        (enc a-0 b-0 group (exp (gen) (mul x-0 alpha-0)) (privk a-0)))
      (send
        (enc a-0 b-0 group (exp (gen) (mul y-0 alpha-0))
          (exp (gen) (mul x-0 alpha-0)) (privk b-0))))
    ((recv (enc "Group id" group (exp (gen) alpha-0) k-magic))
      (send
        (enc a-1 b-1 group (exp (gen) (mul x-0 alpha-0)) (privk a-1)))))
  (label 133)
  (parent 69)
  (unrealized (4 0) (5 0))
  (aborted)
  (comment "aborted"))

(defskeleton dh_sig2
  (vars (k-magic k-magic-0 skey) (n group text) (a b a-0 b-0 name)
    (y x alpha y-0 alpha-0 rndx) (w expt))
  (defstrand init 5 (k-magic k-magic) (n n) (group group) (a a) (b b)
    (g (exp (gen) alpha-0)) (x x) (y (mul y alpha (rec alpha-0))))
  (defstrand group-init 1 (k-magic k-magic) (group group)
    (alpha alpha-0))
  (defstrand resp 3 (k-magic k-magic-0) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (y y) (x (mul x (rec alpha) alpha-0)))
  (defstrand group-init 1 (k-magic k-magic-0) (group group)
    (alpha alpha))
  (deflistener (exp (gen) (mul y x alpha)))
  (deflistener
    (cat (exp (gen) (mul y-0 alpha-0))
      (mul y x alpha (rec y-0) (rec alpha-0))))
  (defstrand resp 3 (k-magic k-magic) (group group) (a a-0) (b b-0)
    (g (exp (gen) alpha-0)) (y y-0) (x (one)))
  (deflistener (cat (exp (gen) (mul alpha-0 (rec w))) w))
  (precedes ((0 1) (2 0)) ((1 0) (0 0)) ((1 0) (7 0)) ((2 2) (0 2))
    ((2 2) (6 0)) ((3 0) (2 0)) ((4 1) (0 4)) ((5 1) (4 0))
    ((6 2) (5 0)) ((7 1) (6 1)))
  (non-orig k-magic k-magic-0 (privk a) (privk b))
  (uniq-gen n y x alpha y-0 alpha-0)
  (absent (y (mul x (rec alpha) alpha-0)) (y-0 (one)))
  (precur (5 0) (7 0))
  (operation nonce-test
    (added-listener (cat (exp (gen) (mul alpha-0 (rec w))) w))
    (exp (gen) alpha-0) (6 1)
    (enc "Group id" group (exp (gen) alpha-0) k-magic))
  (traces
    ((recv (enc "Group id" group (exp (gen) alpha-0) k-magic))
      (send (enc a b group (exp (gen) (mul x alpha-0)) (privk a)))
      (recv
        (enc a b group (exp (gen) (mul y alpha))
          (exp (gen) (mul x alpha-0)) (privk b)))
      (send (enc n (exp (gen) (mul y x alpha)))) (recv n))
    ((send (enc "Group id" group (exp (gen) alpha-0) k-magic)))
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic-0))
      (recv (enc a b group (exp (gen) (mul x alpha-0)) (privk a)))
      (send
        (enc a b group (exp (gen) (mul y alpha))
          (exp (gen) (mul x alpha-0)) (privk b))))
    ((send (enc "Group id" group (exp (gen) alpha) k-magic-0)))
    ((recv (exp (gen) (mul y x alpha)))
      (send (exp (gen) (mul y x alpha))))
    ((recv
       (cat (exp (gen) (mul y-0 alpha-0))
         (mul y x alpha (rec y-0) (rec alpha-0))))
      (send
        (cat (exp (gen) (mul y-0 alpha-0))
          (mul y x alpha (rec y-0) (rec alpha-0)))))
    ((recv (enc "Group id" group (exp (gen) alpha-0) k-magic))
      (recv (enc a-0 b-0 group (exp (gen) alpha-0) (privk a-0)))
      (send
        (enc a-0 b-0 group (exp (gen) (mul y-0 alpha-0))
          (exp (gen) alpha-0) (privk b-0))))
    ((recv (cat (exp (gen) (mul alpha-0 (rec w))) w))
      (send (cat (exp (gen) (mul alpha-0 (rec w))) w))))
  (label 132)
  (parent 68)
  (unrealized (4 0) (5 0) (7 0))
  (aborted)
  (comment "aborted"))

(defskeleton dh_sig2
  (vars (k-magic k-magic-0 k-magic-1 skey) (n group group-0 text)
    (a b a-0 b-0 a-1 b-1 name) (y x alpha y-0 alpha-0 y-1 rndx)
    (x-0 expt))
  (defstrand init 5 (k-magic k-magic) (n n) (group group) (a a) (b b)
    (g (exp (gen) alpha-0)) (x x) (y (mul y alpha (rec alpha-0))))
  (defstrand group-init 1 (k-magic k-magic) (group group)
    (alpha alpha-0))
  (defstrand resp 3 (k-magic k-magic-0) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (y y) (x (mul x (rec alpha) alpha-0)))
  (defstrand group-init 1 (k-magic k-magic-0) (group group)
    (alpha alpha))
  (deflistener (exp (gen) (mul y x alpha)))
  (deflistener
    (cat (exp (gen) (mul y-0 alpha-0))
      (mul y x alpha (rec y-0) (rec alpha-0))))
  (defstrand resp 3 (k-magic k-magic) (group group) (a a-0) (b b-0)
    (g (exp (gen) alpha-0)) (y y-0) (x (one)))
  (defstrand resp 3 (k-magic k-magic-1) (group group-0) (a a-1) (b b-1)
    (g (exp (gen) (mul alpha-0 (rec y-1)))) (y y-1) (x x-0))
  (precedes ((0 1) (2 0)) ((1 0) (0 0)) ((1 0) (7 0)) ((2 2) (0 2))
    ((2 2) (6 0)) ((3 0) (2 0)) ((4 1) (0 4)) ((5 1) (4 0))
    ((6 2) (5 0)) ((7 2) (6 1)))
  (non-orig k-magic k-magic-0 k-magic-1 (privk a) (privk b))
  (uniq-gen n y x alpha y-0 alpha-0 y-1)
  (absent (y (mul x (rec alpha) alpha-0)) (y-0 (one)) (y-1 x-0))
  (precur (5 0))
  (operation nonce-test (added-strand resp 3) (exp (gen) alpha-0) (6 1)
    (enc "Group id" group (exp (gen) alpha-0) k-magic))
  (traces
    ((recv (enc "Group id" group (exp (gen) alpha-0) k-magic))
      (send (enc a b group (exp (gen) (mul x alpha-0)) (privk a)))
      (recv
        (enc a b group (exp (gen) (mul y alpha))
          (exp (gen) (mul x alpha-0)) (privk b)))
      (send (enc n (exp (gen) (mul y x alpha)))) (recv n))
    ((send (enc "Group id" group (exp (gen) alpha-0) k-magic)))
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic-0))
      (recv (enc a b group (exp (gen) (mul x alpha-0)) (privk a)))
      (send
        (enc a b group (exp (gen) (mul y alpha))
          (exp (gen) (mul x alpha-0)) (privk b))))
    ((send (enc "Group id" group (exp (gen) alpha) k-magic-0)))
    ((recv (exp (gen) (mul y x alpha)))
      (send (exp (gen) (mul y x alpha))))
    ((recv
       (cat (exp (gen) (mul y-0 alpha-0))
         (mul y x alpha (rec y-0) (rec alpha-0))))
      (send
        (cat (exp (gen) (mul y-0 alpha-0))
          (mul y x alpha (rec y-0) (rec alpha-0)))))
    ((recv (enc "Group id" group (exp (gen) alpha-0) k-magic))
      (recv (enc a-0 b-0 group (exp (gen) alpha-0) (privk a-0)))
      (send
        (enc a-0 b-0 group (exp (gen) (mul y-0 alpha-0))
          (exp (gen) alpha-0) (privk b-0))))
    ((recv
       (enc "Group id" group-0 (exp (gen) (mul alpha-0 (rec y-1)))
         k-magic-1))
      (recv
        (enc a-1 b-1 group-0 (exp (gen) (mul alpha-0 (rec y-1) x-0))
          (privk a-1)))
      (send
        (enc a-1 b-1 group-0 (exp (gen) alpha-0)
          (exp (gen) (mul alpha-0 (rec y-1) x-0)) (privk b-1)))))
  (label 131)
  (parent 68)
  (unrealized (4 0) (5 0) (7 0) (7 1))
  (aborted)
  (comment "aborted"))

(defskeleton dh_sig2
  (vars (k-magic k-magic-0 k-magic-1 skey) (n group group-0 text)
    (a b a-0 b-0 a-1 b-1 name) (y x alpha y-0 alpha-0 x-0 rndx))
  (defstrand init 5 (k-magic k-magic) (n n) (group group) (a a) (b b)
    (g (exp (gen) alpha-0)) (x x) (y (mul y alpha (rec alpha-0))))
  (defstrand group-init 1 (k-magic k-magic) (group group)
    (alpha alpha-0))
  (defstrand resp 3 (k-magic k-magic-0) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (y y) (x (mul x (rec alpha) alpha-0)))
  (defstrand group-init 1 (k-magic k-magic-0) (group group)
    (alpha alpha))
  (deflistener (exp (gen) (mul y x alpha)))
  (deflistener
    (cat (exp (gen) (mul y-0 alpha-0))
      (mul y x alpha (rec y-0) (rec alpha-0))))
  (defstrand resp 3 (k-magic k-magic) (group group) (a a-0) (b b-0)
    (g (exp (gen) alpha-0)) (y y-0) (x (one)))
  (defstrand init 2 (k-magic k-magic-1) (group group-0) (a a-1) (b b-1)
    (g (exp (gen) (mul alpha-0 (rec x-0)))) (x x-0))
  (precedes ((0 1) (2 0)) ((1 0) (0 0)) ((1 0) (7 0)) ((2 2) (0 2))
    ((2 2) (6 0)) ((3 0) (2 0)) ((4 1) (0 4)) ((5 1) (4 0))
    ((6 2) (5 0)) ((7 1) (6 1)))
  (non-orig k-magic k-magic-0 k-magic-1 (privk a) (privk b))
  (uniq-gen n y x alpha y-0 alpha-0 x-0)
  (absent (y (mul x (rec alpha) alpha-0)) (y-0 (one)))
  (precur (5 0))
  (operation nonce-test (added-strand init 2) (exp (gen) alpha-0) (6 1)
    (enc "Group id" group (exp (gen) alpha-0) k-magic))
  (traces
    ((recv (enc "Group id" group (exp (gen) alpha-0) k-magic))
      (send (enc a b group (exp (gen) (mul x alpha-0)) (privk a)))
      (recv
        (enc a b group (exp (gen) (mul y alpha))
          (exp (gen) (mul x alpha-0)) (privk b)))
      (send (enc n (exp (gen) (mul y x alpha)))) (recv n))
    ((send (enc "Group id" group (exp (gen) alpha-0) k-magic)))
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic-0))
      (recv (enc a b group (exp (gen) (mul x alpha-0)) (privk a)))
      (send
        (enc a b group (exp (gen) (mul y alpha))
          (exp (gen) (mul x alpha-0)) (privk b))))
    ((send (enc "Group id" group (exp (gen) alpha) k-magic-0)))
    ((recv (exp (gen) (mul y x alpha)))
      (send (exp (gen) (mul y x alpha))))
    ((recv
       (cat (exp (gen) (mul y-0 alpha-0))
         (mul y x alpha (rec y-0) (rec alpha-0))))
      (send
        (cat (exp (gen) (mul y-0 alpha-0))
          (mul y x alpha (rec y-0) (rec alpha-0)))))
    ((recv (enc "Group id" group (exp (gen) alpha-0) k-magic))
      (recv (enc a-0 b-0 group (exp (gen) alpha-0) (privk a-0)))
      (send
        (enc a-0 b-0 group (exp (gen) (mul y-0 alpha-0))
          (exp (gen) alpha-0) (privk b-0))))
    ((recv
       (enc "Group id" group-0 (exp (gen) (mul alpha-0 (rec x-0)))
         k-magic-1))
      (send (enc a-1 b-1 group-0 (exp (gen) alpha-0) (privk a-1)))))
  (label 130)
  (parent 68)
  (unrealized (4 0) (5 0) (7 0))
  (aborted)
  (comment "aborted"))

(defskeleton dh_sig2
  (vars (k-magic k-magic-0 skey) (n group text) (a b a-0 b-0 name)
    (y x y-0 alpha alpha-0 rndx) (w expt))
  (defstrand init 5 (k-magic k-magic) (n n) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (x x) (y (mul y (rec alpha) alpha-0)))
  (defstrand group-init 1 (k-magic k-magic) (group group) (alpha alpha))
  (defstrand resp 3 (k-magic k-magic-0) (group group) (a a) (b b)
    (g (exp (gen) alpha-0)) (y y) (x (mul x alpha (rec alpha-0))))
  (defstrand group-init 1 (k-magic k-magic-0) (group group)
    (alpha alpha-0))
  (deflistener (exp (gen) (mul y x alpha-0)))
  (deflistener
    (cat (exp (gen) (mul y-0 alpha))
      (mul y x (rec y-0) (rec alpha) alpha-0)))
  (defstrand resp 3 (k-magic k-magic) (group group) (a a-0) (b b-0)
    (g (exp (gen) alpha)) (y y-0) (x (mul (rec alpha) alpha-0)))
  (deflistener (cat (exp (gen) (mul alpha-0 (rec w))) w))
  (precedes ((0 1) (2 0)) ((1 0) (0 0)) ((2 2) (0 2)) ((2 2) (6 0))
    ((3 0) (2 0)) ((3 0) (7 0)) ((4 1) (0 4)) ((5 1) (4 0))
    ((6 2) (5 0)) ((7 1) (6 1)))
  (non-orig k-magic k-magic-0 (privk a) (privk b))
  (uniq-gen n y x y-0 alpha alpha-0)
  (absent (y (mul x alpha (rec alpha-0)))
    (y-0 (mul (rec alpha) alpha-0)))
  (precur (5 0) (7 0))
  (operation nonce-test
    (added-listener (cat (exp (gen) (mul alpha-0 (rec w))) w))
    (exp (gen) alpha-0) (6 1)
    (enc "Group id" group (exp (gen) alpha-0) k-magic-0))
  (traces
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (send (enc a b group (exp (gen) (mul x alpha)) (privk a)))
      (recv
        (enc a b group (exp (gen) (mul y alpha-0))
          (exp (gen) (mul x alpha)) (privk b)))
      (send (enc n (exp (gen) (mul y x alpha-0)))) (recv n))
    ((send (enc "Group id" group (exp (gen) alpha) k-magic)))
    ((recv (enc "Group id" group (exp (gen) alpha-0) k-magic-0))
      (recv (enc a b group (exp (gen) (mul x alpha)) (privk a)))
      (send
        (enc a b group (exp (gen) (mul y alpha-0))
          (exp (gen) (mul x alpha)) (privk b))))
    ((send (enc "Group id" group (exp (gen) alpha-0) k-magic-0)))
    ((recv (exp (gen) (mul y x alpha-0)))
      (send (exp (gen) (mul y x alpha-0))))
    ((recv
       (cat (exp (gen) (mul y-0 alpha))
         (mul y x (rec y-0) (rec alpha) alpha-0)))
      (send
        (cat (exp (gen) (mul y-0 alpha))
          (mul y x (rec y-0) (rec alpha) alpha-0))))
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (recv (enc a-0 b-0 group (exp (gen) alpha-0) (privk a-0)))
      (send
        (enc a-0 b-0 group (exp (gen) (mul y-0 alpha))
          (exp (gen) alpha-0) (privk b-0))))
    ((recv (cat (exp (gen) (mul alpha-0 (rec w))) w))
      (send (cat (exp (gen) (mul alpha-0 (rec w))) w))))
  (label 129)
  (parent 66)
  (unrealized (4 0) (5 0) (7 0))
  (aborted)
  (comment "aborted"))

(defskeleton dh_sig2
  (vars (k-magic k-magic-0 k-magic-1 skey) (n group group-0 text)
    (a b a-0 b-0 a-1 b-1 name) (y x y-0 alpha alpha-0 y-1 rndx)
    (x-0 expt))
  (defstrand init 5 (k-magic k-magic) (n n) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (x x) (y (mul y (rec alpha) alpha-0)))
  (defstrand group-init 1 (k-magic k-magic) (group group) (alpha alpha))
  (defstrand resp 3 (k-magic k-magic-0) (group group) (a a) (b b)
    (g (exp (gen) alpha-0)) (y y) (x (mul x alpha (rec alpha-0))))
  (defstrand group-init 1 (k-magic k-magic-0) (group group)
    (alpha alpha-0))
  (deflistener (exp (gen) (mul y x alpha-0)))
  (deflistener
    (cat (exp (gen) (mul y-0 alpha))
      (mul y x (rec y-0) (rec alpha) alpha-0)))
  (defstrand resp 3 (k-magic k-magic) (group group) (a a-0) (b b-0)
    (g (exp (gen) alpha)) (y y-0) (x (mul (rec alpha) alpha-0)))
  (defstrand resp 3 (k-magic k-magic-1) (group group-0) (a a-1) (b b-1)
    (g (exp (gen) (mul alpha-0 (rec y-1)))) (y y-1) (x x-0))
  (precedes ((0 1) (2 0)) ((1 0) (0 0)) ((2 2) (0 2)) ((2 2) (6 0))
    ((3 0) (2 0)) ((3 0) (7 0)) ((4 1) (0 4)) ((5 1) (4 0))
    ((6 2) (5 0)) ((7 2) (6 1)))
  (non-orig k-magic k-magic-0 k-magic-1 (privk a) (privk b))
  (uniq-gen n y x y-0 alpha alpha-0 y-1)
  (absent (y (mul x alpha (rec alpha-0)))
    (y-0 (mul (rec alpha) alpha-0)) (y-1 x-0))
  (precur (5 0))
  (operation nonce-test (added-strand resp 3) (exp (gen) alpha-0) (6 1)
    (enc "Group id" group (exp (gen) alpha-0) k-magic-0))
  (traces
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (send (enc a b group (exp (gen) (mul x alpha)) (privk a)))
      (recv
        (enc a b group (exp (gen) (mul y alpha-0))
          (exp (gen) (mul x alpha)) (privk b)))
      (send (enc n (exp (gen) (mul y x alpha-0)))) (recv n))
    ((send (enc "Group id" group (exp (gen) alpha) k-magic)))
    ((recv (enc "Group id" group (exp (gen) alpha-0) k-magic-0))
      (recv (enc a b group (exp (gen) (mul x alpha)) (privk a)))
      (send
        (enc a b group (exp (gen) (mul y alpha-0))
          (exp (gen) (mul x alpha)) (privk b))))
    ((send (enc "Group id" group (exp (gen) alpha-0) k-magic-0)))
    ((recv (exp (gen) (mul y x alpha-0)))
      (send (exp (gen) (mul y x alpha-0))))
    ((recv
       (cat (exp (gen) (mul y-0 alpha))
         (mul y x (rec y-0) (rec alpha) alpha-0)))
      (send
        (cat (exp (gen) (mul y-0 alpha))
          (mul y x (rec y-0) (rec alpha) alpha-0))))
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (recv (enc a-0 b-0 group (exp (gen) alpha-0) (privk a-0)))
      (send
        (enc a-0 b-0 group (exp (gen) (mul y-0 alpha))
          (exp (gen) alpha-0) (privk b-0))))
    ((recv
       (enc "Group id" group-0 (exp (gen) (mul alpha-0 (rec y-1)))
         k-magic-1))
      (recv
        (enc a-1 b-1 group-0 (exp (gen) (mul alpha-0 (rec y-1) x-0))
          (privk a-1)))
      (send
        (enc a-1 b-1 group-0 (exp (gen) alpha-0)
          (exp (gen) (mul alpha-0 (rec y-1) x-0)) (privk b-1)))))
  (label 128)
  (parent 66)
  (unrealized (4 0) (5 0) (7 0) (7 1))
  (aborted)
  (comment "aborted"))

(defskeleton dh_sig2
  (vars (k-magic k-magic-0 k-magic-1 skey) (n group group-0 text)
    (a b a-0 b-0 a-1 b-1 name) (y x y-0 alpha alpha-0 x-0 rndx))
  (defstrand init 5 (k-magic k-magic) (n n) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (x x) (y (mul y (rec alpha) alpha-0)))
  (defstrand group-init 1 (k-magic k-magic) (group group) (alpha alpha))
  (defstrand resp 3 (k-magic k-magic-0) (group group) (a a) (b b)
    (g (exp (gen) alpha-0)) (y y) (x (mul x alpha (rec alpha-0))))
  (defstrand group-init 1 (k-magic k-magic-0) (group group)
    (alpha alpha-0))
  (deflistener (exp (gen) (mul y x alpha-0)))
  (deflistener
    (cat (exp (gen) (mul y-0 alpha))
      (mul y x (rec y-0) (rec alpha) alpha-0)))
  (defstrand resp 3 (k-magic k-magic) (group group) (a a-0) (b b-0)
    (g (exp (gen) alpha)) (y y-0) (x (mul (rec alpha) alpha-0)))
  (defstrand init 2 (k-magic k-magic-1) (group group-0) (a a-1) (b b-1)
    (g (exp (gen) (mul alpha-0 (rec x-0)))) (x x-0))
  (precedes ((0 1) (2 0)) ((1 0) (0 0)) ((2 2) (0 2)) ((2 2) (6 0))
    ((3 0) (2 0)) ((3 0) (7 0)) ((4 1) (0 4)) ((5 1) (4 0))
    ((6 2) (5 0)) ((7 1) (6 1)))
  (non-orig k-magic k-magic-0 k-magic-1 (privk a) (privk b))
  (uniq-gen n y x y-0 alpha alpha-0 x-0)
  (absent (y (mul x alpha (rec alpha-0)))
    (y-0 (mul (rec alpha) alpha-0)))
  (precur (5 0))
  (operation nonce-test (added-strand init 2) (exp (gen) alpha-0) (6 1)
    (enc "Group id" group (exp (gen) alpha-0) k-magic-0))
  (traces
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (send (enc a b group (exp (gen) (mul x alpha)) (privk a)))
      (recv
        (enc a b group (exp (gen) (mul y alpha-0))
          (exp (gen) (mul x alpha)) (privk b)))
      (send (enc n (exp (gen) (mul y x alpha-0)))) (recv n))
    ((send (enc "Group id" group (exp (gen) alpha) k-magic)))
    ((recv (enc "Group id" group (exp (gen) alpha-0) k-magic-0))
      (recv (enc a b group (exp (gen) (mul x alpha)) (privk a)))
      (send
        (enc a b group (exp (gen) (mul y alpha-0))
          (exp (gen) (mul x alpha)) (privk b))))
    ((send (enc "Group id" group (exp (gen) alpha-0) k-magic-0)))
    ((recv (exp (gen) (mul y x alpha-0)))
      (send (exp (gen) (mul y x alpha-0))))
    ((recv
       (cat (exp (gen) (mul y-0 alpha))
         (mul y x (rec y-0) (rec alpha) alpha-0)))
      (send
        (cat (exp (gen) (mul y-0 alpha))
          (mul y x (rec y-0) (rec alpha) alpha-0))))
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (recv (enc a-0 b-0 group (exp (gen) alpha-0) (privk a-0)))
      (send
        (enc a-0 b-0 group (exp (gen) (mul y-0 alpha))
          (exp (gen) alpha-0) (privk b-0))))
    ((recv
       (enc "Group id" group-0 (exp (gen) (mul alpha-0 (rec x-0)))
         k-magic-1))
      (send (enc a-1 b-1 group-0 (exp (gen) alpha-0) (privk a-1)))))
  (label 127)
  (parent 66)
  (unrealized (4 0) (5 0) (7 0))
  (aborted)
  (comment "aborted"))

(defskeleton dh_sig2
  (vars (k-magic k-magic-0 k-magic-1 skey)
    (n group group-0 group-1 text) (a b a-0 b-0 a-1 b-1 name) (x expt)
    (y x-0 alpha y-0 alpha-0 rndx) (w expt) (y-1 rndx) (x-1 expt))
  (defstrand init 5 (k-magic k-magic) (n n) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (x x-0) (y y))
  (defstrand group-init 1 (k-magic k-magic) (group group) (alpha alpha))
  (defstrand resp 3 (k-magic k-magic) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (y y) (x x-0))
  (deflistener (exp (gen) (mul y x-0 alpha)))
  (deflistener
    (cat (exp (gen) (mul y-0 alpha-0))
      (mul y x-0 alpha (rec y-0) (rec alpha-0))))
  (defstrand resp 3 (k-magic k-magic-0) (group group-0) (a a-0) (b b-0)
    (g (exp (gen) alpha-0)) (y y-0) (x x))
  (defstrand group-init 1 (k-magic k-magic-0) (group group-0)
    (alpha alpha-0))
  (deflistener (cat (exp (gen) (mul x alpha-0 (rec w))) w))
  (defstrand resp 3 (k-magic k-magic-1) (group group-1) (a a-1) (b b-1)
    (g (exp (gen) (mul x alpha-0 (rec w) (rec y-1)))) (y y-1) (x x-1))
  (precedes ((0 1) (2 0)) ((1 0) (0 0)) ((2 2) (0 2)) ((2 2) (5 0))
    ((3 1) (0 4)) ((4 1) (3 0)) ((5 2) (4 0)) ((6 0) (5 0))
    ((6 0) (8 0)) ((7 1) (5 1)) ((8 2) (7 0)))
  (non-orig k-magic k-magic-0 k-magic-1 (privk a) (privk b))
  (uniq-gen n y x-0 alpha y-0 alpha-0 y-1)
  (absent (y x-0) (y-0 x) (y-1 x-1))
  (precur (4 0) (7 0))
  (operation nonce-test (added-strand resp 3)
    (exp (gen) (mul x alpha-0 (rec w))) (7 0))
  (traces
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (send (enc a b group (exp (gen) (mul x-0 alpha)) (privk a)))
      (recv
        (enc a b group (exp (gen) (mul y alpha))
          (exp (gen) (mul x-0 alpha)) (privk b)))
      (send (enc n (exp (gen) (mul y x-0 alpha)))) (recv n))
    ((send (enc "Group id" group (exp (gen) alpha) k-magic)))
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (recv (enc a b group (exp (gen) (mul x-0 alpha)) (privk a)))
      (send
        (enc a b group (exp (gen) (mul y alpha))
          (exp (gen) (mul x-0 alpha)) (privk b))))
    ((recv (exp (gen) (mul y x-0 alpha)))
      (send (exp (gen) (mul y x-0 alpha))))
    ((recv
       (cat (exp (gen) (mul y-0 alpha-0))
         (mul y x-0 alpha (rec y-0) (rec alpha-0))))
      (send
        (cat (exp (gen) (mul y-0 alpha-0))
          (mul y x-0 alpha (rec y-0) (rec alpha-0)))))
    ((recv (enc "Group id" group-0 (exp (gen) alpha-0) k-magic-0))
      (recv
        (enc a-0 b-0 group-0 (exp (gen) (mul x alpha-0)) (privk a-0)))
      (send
        (enc a-0 b-0 group-0 (exp (gen) (mul y-0 alpha-0))
          (exp (gen) (mul x alpha-0)) (privk b-0))))
    ((send (enc "Group id" group-0 (exp (gen) alpha-0) k-magic-0)))
    ((recv (cat (exp (gen) (mul x alpha-0 (rec w))) w))
      (send (cat (exp (gen) (mul x alpha-0 (rec w))) w)))
    ((recv
       (enc "Group id" group-1
         (exp (gen) (mul x alpha-0 (rec w) (rec y-1))) k-magic-1))
      (recv
        (enc a-1 b-1 group-1
          (exp (gen) (mul x alpha-0 (rec w) (rec y-1) x-1))
          (privk a-1)))
      (send
        (enc a-1 b-1 group-1 (exp (gen) (mul x alpha-0 (rec w)))
          (exp (gen) (mul x alpha-0 (rec w) (rec y-1) x-1))
          (privk b-1)))))
  (label 126)
  (parent 64)
  (unrealized (3 0) (4 0) (8 0) (8 1))
  (aborted)
  (comment "aborted"))

(defskeleton dh_sig2
  (vars (k-magic k-magic-0 skey) (n group group-0 text)
    (a b a-0 b-0 name) (y alpha alpha-0 rndx) (w expt) (x y-0 rndx))
  (defstrand init 5 (k-magic k-magic) (n n) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (x x) (y y-0))
  (defstrand group-init 1 (k-magic k-magic) (group group) (alpha alpha))
  (defstrand resp 3 (k-magic k-magic) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (y y-0) (x x))
  (deflistener (exp (gen) (mul alpha x y-0)))
  (deflistener
    (cat (exp (gen) (mul y alpha-0))
      (mul (rec y) alpha (rec alpha-0) x y-0)))
  (defstrand resp 3 (k-magic k-magic-0) (group group-0) (a a-0) (b b-0)
    (g (exp (gen) alpha-0)) (y y) (x (mul alpha (rec alpha-0) w y-0)))
  (defstrand group-init 1 (k-magic k-magic-0) (group group-0)
    (alpha alpha-0))
  (deflistener (cat (exp (gen) (mul alpha y-0)) w))
  (precedes ((0 1) (2 0)) ((1 0) (0 0)) ((2 2) (0 2)) ((2 2) (5 0))
    ((2 2) (7 0)) ((3 1) (0 4)) ((4 1) (3 0)) ((5 2) (4 0))
    ((6 0) (5 0)) ((6 0) (7 0)) ((7 1) (5 1)))
  (non-orig k-magic k-magic-0 (privk a) (privk b))
  (uniq-gen n y alpha alpha-0 x y-0)
  (absent (y (mul alpha (rec alpha-0) w y-0)) (y-0 x))
  (precur (4 0) (7 0))
  (operation nonce-test (displaced 8 2 resp 3)
    (exp (gen) (mul x-0 alpha-1 (rec w-0))) (7 0))
  (traces
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (send (enc a b group (exp (gen) (mul alpha x)) (privk a)))
      (recv
        (enc a b group (exp (gen) (mul alpha y-0))
          (exp (gen) (mul alpha x)) (privk b)))
      (send (enc n (exp (gen) (mul alpha x y-0)))) (recv n))
    ((send (enc "Group id" group (exp (gen) alpha) k-magic)))
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (recv (enc a b group (exp (gen) (mul alpha x)) (privk a)))
      (send
        (enc a b group (exp (gen) (mul alpha y-0))
          (exp (gen) (mul alpha x)) (privk b))))
    ((recv (exp (gen) (mul alpha x y-0)))
      (send (exp (gen) (mul alpha x y-0))))
    ((recv
       (cat (exp (gen) (mul y alpha-0))
         (mul (rec y) alpha (rec alpha-0) x y-0)))
      (send
        (cat (exp (gen) (mul y alpha-0))
          (mul (rec y) alpha (rec alpha-0) x y-0))))
    ((recv (enc "Group id" group-0 (exp (gen) alpha-0) k-magic-0))
      (recv
        (enc a-0 b-0 group-0 (exp (gen) (mul alpha w y-0)) (privk a-0)))
      (send
        (enc a-0 b-0 group-0 (exp (gen) (mul y alpha-0))
          (exp (gen) (mul alpha w y-0)) (privk b-0))))
    ((send (enc "Group id" group-0 (exp (gen) alpha-0) k-magic-0)))
    ((recv (cat (exp (gen) (mul alpha y-0)) w))
      (send (cat (exp (gen) (mul alpha y-0)) w))))
  (label 125)
  (parent 64)
  (unrealized (3 0) (4 0))
  (aborted)
  (comment "aborted"))

(defskeleton dh_sig2
  (vars (k-magic k-magic-0 skey) (n group group-0 text)
    (a b a-0 b-0 name) (y y-0 alpha alpha-0 rndx) (w expt) (x rndx))
  (defstrand init 5 (k-magic k-magic) (n n) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (x x) (y y))
  (defstrand group-init 1 (k-magic k-magic) (group group) (alpha alpha))
  (defstrand resp 3 (k-magic k-magic) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (y y) (x x))
  (deflistener (exp (gen) (mul y alpha x)))
  (deflistener
    (cat (exp (gen) (mul y-0 alpha-0))
      (mul y (rec y-0) alpha (rec alpha-0) x)))
  (defstrand resp 3 (k-magic k-magic-0) (group group-0) (a a-0) (b b-0)
    (g (exp (gen) alpha-0)) (y y-0) (x (mul alpha (rec alpha-0) w x)))
  (defstrand group-init 1 (k-magic k-magic-0) (group group-0)
    (alpha alpha-0))
  (deflistener (cat (exp (gen) (mul alpha x)) w))
  (precedes ((0 1) (2 0)) ((0 1) (7 0)) ((1 0) (0 0)) ((2 2) (0 2))
    ((2 2) (5 0)) ((3 1) (0 4)) ((4 1) (3 0)) ((5 2) (4 0))
    ((6 0) (5 0)) ((6 0) (7 0)) ((7 1) (5 1)))
  (non-orig k-magic k-magic-0 (privk a) (privk b))
  (uniq-gen n y y-0 alpha alpha-0 x)
  (absent (y x) (y-0 (mul alpha (rec alpha-0) w x)))
  (precur (4 0) (7 0))
  (operation nonce-test (displaced 8 0 init 2)
    (exp (gen) (mul x-0 alpha-1 (rec w-0))) (7 0))
  (traces
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (send (enc a b group (exp (gen) (mul alpha x)) (privk a)))
      (recv
        (enc a b group (exp (gen) (mul y alpha))
          (exp (gen) (mul alpha x)) (privk b)))
      (send (enc n (exp (gen) (mul y alpha x)))) (recv n))
    ((send (enc "Group id" group (exp (gen) alpha) k-magic)))
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (recv (enc a b group (exp (gen) (mul alpha x)) (privk a)))
      (send
        (enc a b group (exp (gen) (mul y alpha))
          (exp (gen) (mul alpha x)) (privk b))))
    ((recv (exp (gen) (mul y alpha x)))
      (send (exp (gen) (mul y alpha x))))
    ((recv
       (cat (exp (gen) (mul y-0 alpha-0))
         (mul y (rec y-0) alpha (rec alpha-0) x)))
      (send
        (cat (exp (gen) (mul y-0 alpha-0))
          (mul y (rec y-0) alpha (rec alpha-0) x))))
    ((recv (enc "Group id" group-0 (exp (gen) alpha-0) k-magic-0))
      (recv
        (enc a-0 b-0 group-0 (exp (gen) (mul alpha w x)) (privk a-0)))
      (send
        (enc a-0 b-0 group-0 (exp (gen) (mul y-0 alpha-0))
          (exp (gen) (mul alpha w x)) (privk b-0))))
    ((send (enc "Group id" group-0 (exp (gen) alpha-0) k-magic-0)))
    ((recv (cat (exp (gen) (mul alpha x)) w))
      (send (cat (exp (gen) (mul alpha x)) w))))
  (label 124)
  (parent 64)
  (unrealized (3 0) (4 0))
  (aborted)
  (comment "aborted"))

(defskeleton dh_sig2
  (vars (k-magic k-magic-0 k-magic-1 skey)
    (n group group-0 group-1 text) (a b a-0 b-0 a-1 b-1 name) (x expt)
    (y x-0 alpha y-0 alpha-0 rndx) (w expt) (x-1 rndx))
  (defstrand init 5 (k-magic k-magic) (n n) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (x x-0) (y y))
  (defstrand group-init 1 (k-magic k-magic) (group group) (alpha alpha))
  (defstrand resp 3 (k-magic k-magic) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (y y) (x x-0))
  (deflistener (exp (gen) (mul y x-0 alpha)))
  (deflistener
    (cat (exp (gen) (mul y-0 alpha-0))
      (mul y x-0 alpha (rec y-0) (rec alpha-0))))
  (defstrand resp 3 (k-magic k-magic-0) (group group-0) (a a-0) (b b-0)
    (g (exp (gen) alpha-0)) (y y-0) (x x))
  (defstrand group-init 1 (k-magic k-magic-0) (group group-0)
    (alpha alpha-0))
  (deflistener (cat (exp (gen) (mul x alpha-0 (rec w))) w))
  (defstrand init 2 (k-magic k-magic-1) (group group-1) (a a-1) (b b-1)
    (g (exp (gen) (mul x alpha-0 (rec w) (rec x-1)))) (x x-1))
  (precedes ((0 1) (2 0)) ((1 0) (0 0)) ((2 2) (0 2)) ((2 2) (5 0))
    ((3 1) (0 4)) ((4 1) (3 0)) ((5 2) (4 0)) ((6 0) (5 0))
    ((6 0) (8 0)) ((7 1) (5 1)) ((8 1) (7 0)))
  (non-orig k-magic k-magic-0 k-magic-1 (privk a) (privk b))
  (uniq-gen n y x-0 alpha y-0 alpha-0 x-1)
  (absent (y x-0) (y-0 x))
  (precur (4 0) (7 0))
  (operation nonce-test (added-strand init 2)
    (exp (gen) (mul x alpha-0 (rec w))) (7 0))
  (traces
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (send (enc a b group (exp (gen) (mul x-0 alpha)) (privk a)))
      (recv
        (enc a b group (exp (gen) (mul y alpha))
          (exp (gen) (mul x-0 alpha)) (privk b)))
      (send (enc n (exp (gen) (mul y x-0 alpha)))) (recv n))
    ((send (enc "Group id" group (exp (gen) alpha) k-magic)))
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (recv (enc a b group (exp (gen) (mul x-0 alpha)) (privk a)))
      (send
        (enc a b group (exp (gen) (mul y alpha))
          (exp (gen) (mul x-0 alpha)) (privk b))))
    ((recv (exp (gen) (mul y x-0 alpha)))
      (send (exp (gen) (mul y x-0 alpha))))
    ((recv
       (cat (exp (gen) (mul y-0 alpha-0))
         (mul y x-0 alpha (rec y-0) (rec alpha-0))))
      (send
        (cat (exp (gen) (mul y-0 alpha-0))
          (mul y x-0 alpha (rec y-0) (rec alpha-0)))))
    ((recv (enc "Group id" group-0 (exp (gen) alpha-0) k-magic-0))
      (recv
        (enc a-0 b-0 group-0 (exp (gen) (mul x alpha-0)) (privk a-0)))
      (send
        (enc a-0 b-0 group-0 (exp (gen) (mul y-0 alpha-0))
          (exp (gen) (mul x alpha-0)) (privk b-0))))
    ((send (enc "Group id" group-0 (exp (gen) alpha-0) k-magic-0)))
    ((recv (cat (exp (gen) (mul x alpha-0 (rec w))) w))
      (send (cat (exp (gen) (mul x alpha-0 (rec w))) w)))
    ((recv
       (enc "Group id" group-1
         (exp (gen) (mul x alpha-0 (rec w) (rec x-1))) k-magic-1))
      (send
        (enc a-1 b-1 group-1 (exp (gen) (mul x alpha-0 (rec w)))
          (privk a-1)))))
  (label 123)
  (parent 64)
  (unrealized (3 0) (4 0) (8 0))
  (aborted)
  (comment "aborted"))

(defskeleton dh_sig2
  (vars (k-magic k-magic-0 skey) (n group group-0 text)
    (a b a-0 b-0 name) (y x y-0 alpha rndx) (w expt) (alpha-0 rndx))
  (defstrand init 5 (k-magic k-magic) (n n) (group group) (a a) (b b)
    (g (exp (gen) alpha-0)) (x x) (y y))
  (defstrand group-init 1 (k-magic k-magic) (group group)
    (alpha alpha-0))
  (defstrand resp 3 (k-magic k-magic) (group group) (a a) (b b)
    (g (exp (gen) alpha-0)) (y y) (x x))
  (deflistener (exp (gen) (mul y x alpha-0)))
  (deflistener
    (cat (exp (gen) (mul y-0 alpha))
      (mul y x (rec y-0) (rec alpha) alpha-0)))
  (defstrand resp 3 (k-magic k-magic-0) (group group-0) (a a-0) (b b-0)
    (g (exp (gen) alpha)) (y y-0) (x (mul (rec alpha) w alpha-0)))
  (defstrand group-init 1 (k-magic k-magic-0) (group group-0)
    (alpha alpha))
  (deflistener (cat (exp (gen) alpha-0) w))
  (precedes ((0 1) (2 0)) ((1 0) (0 0)) ((1 0) (7 0)) ((2 2) (0 2))
    ((2 2) (5 0)) ((3 1) (0 4)) ((4 1) (3 0)) ((5 2) (4 0))
    ((6 0) (5 0)) ((6 0) (7 0)) ((7 1) (5 1)))
  (non-orig k-magic k-magic-0 (privk a) (privk b))
  (uniq-gen n y x y-0 alpha alpha-0)
  (absent (y x) (y-0 (mul (rec alpha) w alpha-0)))
  (precur (4 0) (7 0))
  (operation nonce-test (displaced 8 1 group-init 1) (exp (gen) alpha-1)
    (7 0))
  (traces
    ((recv (enc "Group id" group (exp (gen) alpha-0) k-magic))
      (send (enc a b group (exp (gen) (mul x alpha-0)) (privk a)))
      (recv
        (enc a b group (exp (gen) (mul y alpha-0))
          (exp (gen) (mul x alpha-0)) (privk b)))
      (send (enc n (exp (gen) (mul y x alpha-0)))) (recv n))
    ((send (enc "Group id" group (exp (gen) alpha-0) k-magic)))
    ((recv (enc "Group id" group (exp (gen) alpha-0) k-magic))
      (recv (enc a b group (exp (gen) (mul x alpha-0)) (privk a)))
      (send
        (enc a b group (exp (gen) (mul y alpha-0))
          (exp (gen) (mul x alpha-0)) (privk b))))
    ((recv (exp (gen) (mul y x alpha-0)))
      (send (exp (gen) (mul y x alpha-0))))
    ((recv
       (cat (exp (gen) (mul y-0 alpha))
         (mul y x (rec y-0) (rec alpha) alpha-0)))
      (send
        (cat (exp (gen) (mul y-0 alpha))
          (mul y x (rec y-0) (rec alpha) alpha-0))))
    ((recv (enc "Group id" group-0 (exp (gen) alpha) k-magic-0))
      (recv
        (enc a-0 b-0 group-0 (exp (gen) (mul w alpha-0)) (privk a-0)))
      (send
        (enc a-0 b-0 group-0 (exp (gen) (mul y-0 alpha))
          (exp (gen) (mul w alpha-0)) (privk b-0))))
    ((send (enc "Group id" group-0 (exp (gen) alpha) k-magic-0)))
    ((recv (cat (exp (gen) alpha-0) w))
      (send (cat (exp (gen) alpha-0) w))))
  (label 122)
  (parent 64)
  (unrealized (3 0) (4 0) (7 0))
  (aborted)
  (comment "aborted"))

(defskeleton dh_sig2
  (vars (k-magic k-magic-0 skey) (n group group-0 text)
    (a b a-0 b-0 name) (y x alpha y-0 alpha-0 rndx) (w expt))
  (defstrand init 5 (k-magic k-magic) (n n) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (x x) (y y))
  (defstrand group-init 1 (k-magic k-magic) (group group) (alpha alpha))
  (defstrand resp 3 (k-magic k-magic) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (y y) (x x))
  (deflistener (exp (gen) (mul y x alpha)))
  (deflistener
    (cat (exp (gen) (mul y-0 alpha-0))
      (mul y x alpha (rec y-0) (rec alpha-0))))
  (defstrand resp 3 (k-magic k-magic-0) (group group-0) (a a-0) (b b-0)
    (g (exp (gen) alpha-0)) (y y-0) (x (mul (rec alpha-0) w)))
  (defstrand group-init 1 (k-magic k-magic-0) (group group-0)
    (alpha alpha-0))
  (deflistener (cat (gen) w))
  (precedes ((0 1) (2 0)) ((1 0) (0 0)) ((2 2) (0 2)) ((2 2) (5 0))
    ((3 1) (0 4)) ((4 1) (3 0)) ((5 2) (4 0)) ((6 0) (5 0))
    ((6 0) (7 0)) ((7 1) (5 1)))
  (non-orig k-magic k-magic-0 (privk a) (privk b))
  (uniq-gen n y x alpha y-0 alpha-0)
  (absent (y x) (y-0 (mul (rec alpha-0) w)))
  (precur (4 0) (7 0))
  (operation nonce-test
    (contracted (x-0 (mul (rec alpha-0) w)) (alpha-1 alpha-0) (w-0 w))
    (gen) (7 0))
  (traces
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (send (enc a b group (exp (gen) (mul x alpha)) (privk a)))
      (recv
        (enc a b group (exp (gen) (mul y alpha))
          (exp (gen) (mul x alpha)) (privk b)))
      (send (enc n (exp (gen) (mul y x alpha)))) (recv n))
    ((send (enc "Group id" group (exp (gen) alpha) k-magic)))
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (recv (enc a b group (exp (gen) (mul x alpha)) (privk a)))
      (send
        (enc a b group (exp (gen) (mul y alpha))
          (exp (gen) (mul x alpha)) (privk b))))
    ((recv (exp (gen) (mul y x alpha)))
      (send (exp (gen) (mul y x alpha))))
    ((recv
       (cat (exp (gen) (mul y-0 alpha-0))
         (mul y x alpha (rec y-0) (rec alpha-0))))
      (send
        (cat (exp (gen) (mul y-0 alpha-0))
          (mul y x alpha (rec y-0) (rec alpha-0)))))
    ((recv (enc "Group id" group-0 (exp (gen) alpha-0) k-magic-0))
      (recv (enc a-0 b-0 group-0 (exp (gen) w) (privk a-0)))
      (send
        (enc a-0 b-0 group-0 (exp (gen) (mul y-0 alpha-0)) (exp (gen) w)
          (privk b-0))))
    ((send (enc "Group id" group-0 (exp (gen) alpha-0) k-magic-0)))
    ((recv (cat (gen) w)) (send (cat (gen) w))))
  (label 121)
  (parent 64)
  (unrealized (3 0) (4 0))
  (aborted)
  (comment "aborted"))

(defskeleton dh_sig2
  (vars (k-magic k-magic-0 skey) (n group group-0 text)
    (a b a-0 b-0 name) (y x alpha y-0 rndx) (w expt) (alpha-0 rndx))
  (defstrand init 5 (k-magic k-magic) (n n) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (x x) (y y))
  (defstrand group-init 1 (k-magic k-magic) (group group) (alpha alpha))
  (defstrand resp 3 (k-magic k-magic) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (y y) (x x))
  (deflistener (exp (gen) (mul y x alpha)))
  (deflistener
    (cat (exp (gen) (mul y-0 alpha-0))
      (mul y x alpha (rec y-0) (rec alpha-0))))
  (defstrand resp 3 (k-magic k-magic-0) (group group-0) (a a-0) (b b-0)
    (g (exp (gen) alpha-0)) (y y-0) (x w))
  (defstrand group-init 1 (k-magic k-magic-0) (group group-0)
    (alpha alpha-0))
  (deflistener (cat (exp (gen) alpha-0) w))
  (precedes ((0 1) (2 0)) ((1 0) (0 0)) ((2 2) (0 2)) ((2 2) (5 0))
    ((3 1) (0 4)) ((4 1) (3 0)) ((5 2) (4 0)) ((6 0) (5 0))
    ((6 0) (7 0)) ((7 1) (5 1)))
  (non-orig k-magic k-magic-0 (privk a) (privk b))
  (uniq-gen n y x alpha y-0 alpha-0)
  (absent (y x) (y-0 w))
  (precur (4 0) (7 0))
  (operation nonce-test (displaced 8 6 group-init 1) (exp (gen) alpha-1)
    (7 0))
  (traces
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (send (enc a b group (exp (gen) (mul x alpha)) (privk a)))
      (recv
        (enc a b group (exp (gen) (mul y alpha))
          (exp (gen) (mul x alpha)) (privk b)))
      (send (enc n (exp (gen) (mul y x alpha)))) (recv n))
    ((send (enc "Group id" group (exp (gen) alpha) k-magic)))
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (recv (enc a b group (exp (gen) (mul x alpha)) (privk a)))
      (send
        (enc a b group (exp (gen) (mul y alpha))
          (exp (gen) (mul x alpha)) (privk b))))
    ((recv (exp (gen) (mul y x alpha)))
      (send (exp (gen) (mul y x alpha))))
    ((recv
       (cat (exp (gen) (mul y-0 alpha-0))
         (mul y x alpha (rec y-0) (rec alpha-0))))
      (send
        (cat (exp (gen) (mul y-0 alpha-0))
          (mul y x alpha (rec y-0) (rec alpha-0)))))
    ((recv (enc "Group id" group-0 (exp (gen) alpha-0) k-magic-0))
      (recv
        (enc a-0 b-0 group-0 (exp (gen) (mul w alpha-0)) (privk a-0)))
      (send
        (enc a-0 b-0 group-0 (exp (gen) (mul y-0 alpha-0))
          (exp (gen) (mul w alpha-0)) (privk b-0))))
    ((send (enc "Group id" group-0 (exp (gen) alpha-0) k-magic-0)))
    ((recv (cat (exp (gen) alpha-0) w))
      (send (cat (exp (gen) alpha-0) w))))
  (label 120)
  (parent 64)
  (unrealized (3 0) (4 0) (7 0))
  (aborted)
  (comment "aborted"))

(defskeleton dh_sig2
  (vars (k-magic k-magic-0 k-magic-1 skey)
    (n group group-0 group-1 text) (a b a-0 b-0 name)
    (y x alpha y-0 alpha-0 rndx) (w expt) (alpha-1 rndx))
  (defstrand init 5 (k-magic k-magic) (n n) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (x x) (y y))
  (defstrand group-init 1 (k-magic k-magic) (group group) (alpha alpha))
  (defstrand resp 3 (k-magic k-magic) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (y y) (x x))
  (deflistener (exp (gen) (mul y x alpha)))
  (deflistener
    (cat (exp (gen) (mul y-0 alpha-0))
      (mul y x alpha (rec y-0) (rec alpha-0))))
  (defstrand resp 3 (k-magic k-magic-0) (group group-0) (a a-0) (b b-0)
    (g (exp (gen) alpha-0)) (y y-0) (x (mul (rec alpha-0) w alpha-1)))
  (defstrand group-init 1 (k-magic k-magic-0) (group group-0)
    (alpha alpha-0))
  (deflistener (cat (exp (gen) alpha-1) w))
  (defstrand group-init 1 (k-magic k-magic-1) (group group-1)
    (alpha alpha-1))
  (precedes ((0 1) (2 0)) ((1 0) (0 0)) ((2 2) (0 2)) ((2 2) (5 0))
    ((3 1) (0 4)) ((4 1) (3 0)) ((5 2) (4 0)) ((6 0) (5 0))
    ((6 0) (7 0)) ((7 1) (5 1)) ((8 0) (7 0)))
  (non-orig k-magic k-magic-0 (privk a) (privk b))
  (uniq-gen n y x alpha y-0 alpha-0 alpha-1)
  (absent (y x) (y-0 (mul (rec alpha-0) w alpha-1)))
  (precur (4 0) (7 0))
  (operation nonce-test (added-strand group-init 1) (exp (gen) alpha-1)
    (7 0))
  (traces
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (send (enc a b group (exp (gen) (mul x alpha)) (privk a)))
      (recv
        (enc a b group (exp (gen) (mul y alpha))
          (exp (gen) (mul x alpha)) (privk b)))
      (send (enc n (exp (gen) (mul y x alpha)))) (recv n))
    ((send (enc "Group id" group (exp (gen) alpha) k-magic)))
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (recv (enc a b group (exp (gen) (mul x alpha)) (privk a)))
      (send
        (enc a b group (exp (gen) (mul y alpha))
          (exp (gen) (mul x alpha)) (privk b))))
    ((recv (exp (gen) (mul y x alpha)))
      (send (exp (gen) (mul y x alpha))))
    ((recv
       (cat (exp (gen) (mul y-0 alpha-0))
         (mul y x alpha (rec y-0) (rec alpha-0))))
      (send
        (cat (exp (gen) (mul y-0 alpha-0))
          (mul y x alpha (rec y-0) (rec alpha-0)))))
    ((recv (enc "Group id" group-0 (exp (gen) alpha-0) k-magic-0))
      (recv
        (enc a-0 b-0 group-0 (exp (gen) (mul w alpha-1)) (privk a-0)))
      (send
        (enc a-0 b-0 group-0 (exp (gen) (mul y-0 alpha-0))
          (exp (gen) (mul w alpha-1)) (privk b-0))))
    ((send (enc "Group id" group-0 (exp (gen) alpha-0) k-magic-0)))
    ((recv (cat (exp (gen) alpha-1) w))
      (send (cat (exp (gen) alpha-1) w)))
    ((send (enc "Group id" group-1 (exp (gen) alpha-1) k-magic-1))))
  (label 119)
  (parent 64)
  (unrealized (3 0) (4 0))
  (aborted)
  (comment "aborted"))

(defskeleton dh_sig2
  (vars (k-magic k-magic-0 k-magic-1 skey)
    (n group group-0 group-1 text) (a b a-0 b-0 a-1 b-1 name)
    (y x alpha y-0 rndx) (x-0 expt) (alpha-0 y-1 alpha-1 rndx))
  (defstrand init 5 (k-magic k-magic) (n n) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (x x) (y y))
  (defstrand group-init 1 (k-magic k-magic) (group group) (alpha alpha))
  (defstrand resp 3 (k-magic k-magic) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (y y) (x x))
  (deflistener (exp (gen) (mul y x alpha)))
  (deflistener
    (cat (exp (gen) (mul y-0 alpha-0))
      (mul y x alpha (rec y-0) (rec alpha-0))))
  (defstrand resp 3 (k-magic k-magic-0) (group group-0) (a a-0) (b b-0)
    (g (exp (gen) alpha-0)) (y y-0) (x (mul (rec alpha-0) y-1 alpha-1)))
  (defstrand group-init 1 (k-magic k-magic-0) (group group-0)
    (alpha alpha-0))
  (defstrand resp 3 (k-magic k-magic-1) (group group-1) (a a-1) (b b-1)
    (g (exp (gen) alpha-1)) (y y-1) (x x-0))
  (defstrand group-init 1 (k-magic k-magic-1) (group group-1)
    (alpha alpha-1))
  (precedes ((0 1) (2 0)) ((1 0) (0 0)) ((2 2) (0 2)) ((2 2) (5 0))
    ((3 1) (0 4)) ((4 1) (3 0)) ((5 2) (4 0)) ((6 0) (5 0))
    ((6 0) (7 0)) ((7 2) (5 1)) ((8 0) (7 0)))
  (non-orig k-magic k-magic-0 k-magic-1 (privk a) (privk b))
  (uniq-gen n y x alpha y-0 alpha-0 y-1 alpha-1)
  (absent (y x) (y-0 (mul (rec alpha-0) y-1 alpha-1)) (y-1 x-0))
  (precur (4 0))
  (operation encryption-test (added-strand group-init 1)
    (enc "Group id" group-1 (exp (gen) alpha-1) k-magic-1) (7 0))
  (traces
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (send (enc a b group (exp (gen) (mul x alpha)) (privk a)))
      (recv
        (enc a b group (exp (gen) (mul y alpha))
          (exp (gen) (mul x alpha)) (privk b)))
      (send (enc n (exp (gen) (mul y x alpha)))) (recv n))
    ((send (enc "Group id" group (exp (gen) alpha) k-magic)))
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (recv (enc a b group (exp (gen) (mul x alpha)) (privk a)))
      (send
        (enc a b group (exp (gen) (mul y alpha))
          (exp (gen) (mul x alpha)) (privk b))))
    ((recv (exp (gen) (mul y x alpha)))
      (send (exp (gen) (mul y x alpha))))
    ((recv
       (cat (exp (gen) (mul y-0 alpha-0))
         (mul y x alpha (rec y-0) (rec alpha-0))))
      (send
        (cat (exp (gen) (mul y-0 alpha-0))
          (mul y x alpha (rec y-0) (rec alpha-0)))))
    ((recv (enc "Group id" group-0 (exp (gen) alpha-0) k-magic-0))
      (recv
        (enc a-0 b-0 group-0 (exp (gen) (mul y-1 alpha-1)) (privk a-0)))
      (send
        (enc a-0 b-0 group-0 (exp (gen) (mul y-0 alpha-0))
          (exp (gen) (mul y-1 alpha-1)) (privk b-0))))
    ((send (enc "Group id" group-0 (exp (gen) alpha-0) k-magic-0)))
    ((recv (enc "Group id" group-1 (exp (gen) alpha-1) k-magic-1))
      (recv
        (enc a-1 b-1 group-1 (exp (gen) (mul x-0 alpha-1)) (privk a-1)))
      (send
        (enc a-1 b-1 group-1 (exp (gen) (mul y-1 alpha-1))
          (exp (gen) (mul x-0 alpha-1)) (privk b-1))))
    ((send (enc "Group id" group-1 (exp (gen) alpha-1) k-magic-1))))
  (label 118)
  (parent 63)
  (unrealized (3 0) (4 0) (7 1))
  (aborted)
  (comment "aborted"))

(defskeleton dh_sig2
  (vars (k-magic k-magic-0 skey) (n group group-0 text)
    (a b a-0 b-0 a-1 b-1 name) (y x alpha y-0 rndx) (x-0 expt)
    (y-1 alpha-0 rndx))
  (defstrand init 5 (k-magic k-magic) (n n) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (x x) (y y))
  (defstrand group-init 1 (k-magic k-magic) (group group) (alpha alpha))
  (defstrand resp 3 (k-magic k-magic) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (y y) (x x))
  (deflistener (exp (gen) (mul y x alpha)))
  (deflistener
    (cat (exp (gen) (mul y-0 alpha-0))
      (mul y x alpha (rec y-0) (rec alpha-0))))
  (defstrand resp 3 (k-magic k-magic-0) (group group-0) (a a-0) (b b-0)
    (g (exp (gen) alpha-0)) (y y-0) (x y-1))
  (defstrand group-init 1 (k-magic k-magic-0) (group group-0)
    (alpha alpha-0))
  (defstrand resp 3 (k-magic k-magic-0) (group group-0) (a a-1) (b b-1)
    (g (exp (gen) alpha-0)) (y y-1) (x x-0))
  (precedes ((0 1) (2 0)) ((1 0) (0 0)) ((2 2) (0 2)) ((2 2) (5 0))
    ((3 1) (0 4)) ((4 1) (3 0)) ((5 2) (4 0)) ((6 0) (5 0))
    ((6 0) (7 0)) ((7 2) (5 1)))
  (non-orig k-magic k-magic-0 (privk a) (privk b))
  (uniq-gen n y x alpha y-0 y-1 alpha-0)
  (absent (y x) (y-0 y-1) (y-1 x-0))
  (precur (4 0))
  (operation encryption-test (displaced 8 6 group-init 1)
    (enc "Group id" group-1 (exp (gen) alpha-1) k-magic-1) (7 0))
  (traces
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (send (enc a b group (exp (gen) (mul x alpha)) (privk a)))
      (recv
        (enc a b group (exp (gen) (mul y alpha))
          (exp (gen) (mul x alpha)) (privk b)))
      (send (enc n (exp (gen) (mul y x alpha)))) (recv n))
    ((send (enc "Group id" group (exp (gen) alpha) k-magic)))
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (recv (enc a b group (exp (gen) (mul x alpha)) (privk a)))
      (send
        (enc a b group (exp (gen) (mul y alpha))
          (exp (gen) (mul x alpha)) (privk b))))
    ((recv (exp (gen) (mul y x alpha)))
      (send (exp (gen) (mul y x alpha))))
    ((recv
       (cat (exp (gen) (mul y-0 alpha-0))
         (mul y x alpha (rec y-0) (rec alpha-0))))
      (send
        (cat (exp (gen) (mul y-0 alpha-0))
          (mul y x alpha (rec y-0) (rec alpha-0)))))
    ((recv (enc "Group id" group-0 (exp (gen) alpha-0) k-magic-0))
      (recv
        (enc a-0 b-0 group-0 (exp (gen) (mul y-1 alpha-0)) (privk a-0)))
      (send
        (enc a-0 b-0 group-0 (exp (gen) (mul y-0 alpha-0))
          (exp (gen) (mul y-1 alpha-0)) (privk b-0))))
    ((send (enc "Group id" group-0 (exp (gen) alpha-0) k-magic-0)))
    ((recv (enc "Group id" group-0 (exp (gen) alpha-0) k-magic-0))
      (recv
        (enc a-1 b-1 group-0 (exp (gen) (mul x-0 alpha-0)) (privk a-1)))
      (send
        (enc a-1 b-1 group-0 (exp (gen) (mul y-1 alpha-0))
          (exp (gen) (mul x-0 alpha-0)) (privk b-1)))))
  (label 117)
  (parent 63)
  (unrealized (3 0) (4 0) (7 1))
  (aborted)
  (comment "aborted"))

(defskeleton dh_sig2
  (vars (k-magic k-magic-0 skey) (n group group-0 text)
    (a b a-0 b-0 a-1 b-1 name) (y x y-0 rndx) (x-0 expt)
    (alpha y-1 alpha-0 rndx))
  (defstrand init 5 (k-magic k-magic) (n n) (group group) (a a) (b b)
    (g (exp (gen) alpha-0)) (x x) (y y))
  (defstrand group-init 1 (k-magic k-magic) (group group)
    (alpha alpha-0))
  (defstrand resp 3 (k-magic k-magic) (group group) (a a) (b b)
    (g (exp (gen) alpha-0)) (y y) (x x))
  (deflistener (exp (gen) (mul y x alpha-0)))
  (deflistener
    (cat (exp (gen) (mul y-0 alpha))
      (mul y x (rec y-0) (rec alpha) alpha-0)))
  (defstrand resp 3 (k-magic k-magic-0) (group group-0) (a a-0) (b b-0)
    (g (exp (gen) alpha)) (y y-0) (x (mul (rec alpha) y-1 alpha-0)))
  (defstrand group-init 1 (k-magic k-magic-0) (group group-0)
    (alpha alpha))
  (defstrand resp 3 (k-magic k-magic) (group group) (a a-1) (b b-1)
    (g (exp (gen) alpha-0)) (y y-1) (x x-0))
  (precedes ((0 1) (2 0)) ((1 0) (0 0)) ((1 0) (7 0)) ((2 2) (0 2))
    ((2 2) (5 0)) ((3 1) (0 4)) ((4 1) (3 0)) ((5 2) (4 0))
    ((6 0) (5 0)) ((6 0) (7 0)) ((7 2) (5 1)))
  (non-orig k-magic k-magic-0 (privk a) (privk b))
  (uniq-gen n y x y-0 alpha y-1 alpha-0)
  (absent (y x) (y-0 (mul (rec alpha) y-1 alpha-0)) (y-1 x-0))
  (precur (4 0))
  (operation encryption-test (displaced 8 1 group-init 1)
    (enc "Group id" group-1 (exp (gen) alpha-1) k-magic-1) (7 0))
  (traces
    ((recv (enc "Group id" group (exp (gen) alpha-0) k-magic))
      (send (enc a b group (exp (gen) (mul x alpha-0)) (privk a)))
      (recv
        (enc a b group (exp (gen) (mul y alpha-0))
          (exp (gen) (mul x alpha-0)) (privk b)))
      (send (enc n (exp (gen) (mul y x alpha-0)))) (recv n))
    ((send (enc "Group id" group (exp (gen) alpha-0) k-magic)))
    ((recv (enc "Group id" group (exp (gen) alpha-0) k-magic))
      (recv (enc a b group (exp (gen) (mul x alpha-0)) (privk a)))
      (send
        (enc a b group (exp (gen) (mul y alpha-0))
          (exp (gen) (mul x alpha-0)) (privk b))))
    ((recv (exp (gen) (mul y x alpha-0)))
      (send (exp (gen) (mul y x alpha-0))))
    ((recv
       (cat (exp (gen) (mul y-0 alpha))
         (mul y x (rec y-0) (rec alpha) alpha-0)))
      (send
        (cat (exp (gen) (mul y-0 alpha))
          (mul y x (rec y-0) (rec alpha) alpha-0))))
    ((recv (enc "Group id" group-0 (exp (gen) alpha) k-magic-0))
      (recv
        (enc a-0 b-0 group-0 (exp (gen) (mul y-1 alpha-0)) (privk a-0)))
      (send
        (enc a-0 b-0 group-0 (exp (gen) (mul y-0 alpha))
          (exp (gen) (mul y-1 alpha-0)) (privk b-0))))
    ((send (enc "Group id" group-0 (exp (gen) alpha) k-magic-0)))
    ((recv (enc "Group id" group (exp (gen) alpha-0) k-magic))
      (recv
        (enc a-1 b-1 group (exp (gen) (mul x-0 alpha-0)) (privk a-1)))
      (send
        (enc a-1 b-1 group (exp (gen) (mul y-1 alpha-0))
          (exp (gen) (mul x-0 alpha-0)) (privk b-1)))))
  (label 116)
  (parent 63)
  (unrealized (3 0) (4 0) (7 1))
  (aborted)
  (comment "aborted"))

(defskeleton dh_sig2
  (vars (k-magic k-magic-0 k-magic-1 skey)
    (n group group-0 group-1 text) (a b a-0 b-0 a-1 b-1 name)
    (y x alpha y-0 alpha-0 x-0 alpha-1 rndx))
  (defstrand init 5 (k-magic k-magic) (n n) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (x x) (y y))
  (defstrand group-init 1 (k-magic k-magic) (group group) (alpha alpha))
  (defstrand resp 3 (k-magic k-magic) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (y y) (x x))
  (deflistener (exp (gen) (mul y x alpha)))
  (deflistener
    (cat (exp (gen) (mul y-0 alpha-0))
      (mul y x alpha (rec y-0) (rec alpha-0))))
  (defstrand resp 3 (k-magic k-magic-0) (group group-0) (a a-0) (b b-0)
    (g (exp (gen) alpha-0)) (y y-0) (x (mul (rec alpha-0) x-0 alpha-1)))
  (defstrand group-init 1 (k-magic k-magic-0) (group group-0)
    (alpha alpha-0))
  (defstrand init 2 (k-magic k-magic-1) (group group-1) (a a-1) (b b-1)
    (g (exp (gen) alpha-1)) (x x-0))
  (defstrand group-init 1 (k-magic k-magic-1) (group group-1)
    (alpha alpha-1))
  (precedes ((0 1) (2 0)) ((1 0) (0 0)) ((2 2) (0 2)) ((2 2) (5 0))
    ((3 1) (0 4)) ((4 1) (3 0)) ((5 2) (4 0)) ((6 0) (5 0))
    ((6 0) (7 0)) ((7 1) (5 1)) ((8 0) (7 0)))
  (non-orig k-magic k-magic-0 k-magic-1 (privk a) (privk b))
  (uniq-gen n y x alpha y-0 alpha-0 x-0 alpha-1)
  (absent (y x) (y-0 (mul (rec alpha-0) x-0 alpha-1)))
  (precur (4 0))
  (operation encryption-test (added-strand group-init 1)
    (enc "Group id" group-1 (exp (gen) alpha-1) k-magic-1) (7 0))
  (traces
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (send (enc a b group (exp (gen) (mul x alpha)) (privk a)))
      (recv
        (enc a b group (exp (gen) (mul y alpha))
          (exp (gen) (mul x alpha)) (privk b)))
      (send (enc n (exp (gen) (mul y x alpha)))) (recv n))
    ((send (enc "Group id" group (exp (gen) alpha) k-magic)))
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (recv (enc a b group (exp (gen) (mul x alpha)) (privk a)))
      (send
        (enc a b group (exp (gen) (mul y alpha))
          (exp (gen) (mul x alpha)) (privk b))))
    ((recv (exp (gen) (mul y x alpha)))
      (send (exp (gen) (mul y x alpha))))
    ((recv
       (cat (exp (gen) (mul y-0 alpha-0))
         (mul y x alpha (rec y-0) (rec alpha-0))))
      (send
        (cat (exp (gen) (mul y-0 alpha-0))
          (mul y x alpha (rec y-0) (rec alpha-0)))))
    ((recv (enc "Group id" group-0 (exp (gen) alpha-0) k-magic-0))
      (recv
        (enc a-0 b-0 group-0 (exp (gen) (mul x-0 alpha-1)) (privk a-0)))
      (send
        (enc a-0 b-0 group-0 (exp (gen) (mul y-0 alpha-0))
          (exp (gen) (mul x-0 alpha-1)) (privk b-0))))
    ((send (enc "Group id" group-0 (exp (gen) alpha-0) k-magic-0)))
    ((recv (enc "Group id" group-1 (exp (gen) alpha-1) k-magic-1))
      (send
        (enc a-1 b-1 group-1 (exp (gen) (mul x-0 alpha-1))
          (privk a-1))))
    ((send (enc "Group id" group-1 (exp (gen) alpha-1) k-magic-1))))
  (label 115)
  (parent 60)
  (unrealized (3 0) (4 0))
  (aborted)
  (comment "aborted"))

(defskeleton dh_sig2
  (vars (k-magic k-magic-0 skey) (n group group-0 text)
    (a b a-0 b-0 a-1 b-1 name) (y x alpha y-0 x-0 alpha-0 rndx))
  (defstrand init 5 (k-magic k-magic) (n n) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (x x) (y y))
  (defstrand group-init 1 (k-magic k-magic) (group group) (alpha alpha))
  (defstrand resp 3 (k-magic k-magic) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (y y) (x x))
  (deflistener (exp (gen) (mul y x alpha)))
  (deflistener
    (cat (exp (gen) (mul y-0 alpha-0))
      (mul y x alpha (rec y-0) (rec alpha-0))))
  (defstrand resp 3 (k-magic k-magic-0) (group group-0) (a a-0) (b b-0)
    (g (exp (gen) alpha-0)) (y y-0) (x x-0))
  (defstrand group-init 1 (k-magic k-magic-0) (group group-0)
    (alpha alpha-0))
  (defstrand init 2 (k-magic k-magic-0) (group group-0) (a a-1) (b b-1)
    (g (exp (gen) alpha-0)) (x x-0))
  (precedes ((0 1) (2 0)) ((1 0) (0 0)) ((2 2) (0 2)) ((2 2) (5 0))
    ((3 1) (0 4)) ((4 1) (3 0)) ((5 2) (4 0)) ((6 0) (5 0))
    ((6 0) (7 0)) ((7 1) (5 1)))
  (non-orig k-magic k-magic-0 (privk a) (privk b))
  (uniq-gen n y x alpha y-0 x-0 alpha-0)
  (absent (y x) (y-0 x-0))
  (precur (4 0))
  (operation encryption-test (displaced 8 6 group-init 1)
    (enc "Group id" group-1 (exp (gen) alpha-1) k-magic-1) (7 0))
  (traces
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (send (enc a b group (exp (gen) (mul x alpha)) (privk a)))
      (recv
        (enc a b group (exp (gen) (mul y alpha))
          (exp (gen) (mul x alpha)) (privk b)))
      (send (enc n (exp (gen) (mul y x alpha)))) (recv n))
    ((send (enc "Group id" group (exp (gen) alpha) k-magic)))
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (recv (enc a b group (exp (gen) (mul x alpha)) (privk a)))
      (send
        (enc a b group (exp (gen) (mul y alpha))
          (exp (gen) (mul x alpha)) (privk b))))
    ((recv (exp (gen) (mul y x alpha)))
      (send (exp (gen) (mul y x alpha))))
    ((recv
       (cat (exp (gen) (mul y-0 alpha-0))
         (mul y x alpha (rec y-0) (rec alpha-0))))
      (send
        (cat (exp (gen) (mul y-0 alpha-0))
          (mul y x alpha (rec y-0) (rec alpha-0)))))
    ((recv (enc "Group id" group-0 (exp (gen) alpha-0) k-magic-0))
      (recv
        (enc a-0 b-0 group-0 (exp (gen) (mul x-0 alpha-0)) (privk a-0)))
      (send
        (enc a-0 b-0 group-0 (exp (gen) (mul y-0 alpha-0))
          (exp (gen) (mul x-0 alpha-0)) (privk b-0))))
    ((send (enc "Group id" group-0 (exp (gen) alpha-0) k-magic-0)))
    ((recv (enc "Group id" group-0 (exp (gen) alpha-0) k-magic-0))
      (send
        (enc a-1 b-1 group-0 (exp (gen) (mul x-0 alpha-0))
          (privk a-1)))))
  (label 114)
  (parent 60)
  (unrealized (3 0) (4 0))
  (aborted)
  (comment "aborted"))

(defskeleton dh_sig2
  (vars (k-magic k-magic-0 skey) (n group group-0 text)
    (a b a-0 b-0 a-1 b-1 name) (y x y-0 alpha x-0 alpha-0 rndx))
  (defstrand init 5 (k-magic k-magic) (n n) (group group) (a a) (b b)
    (g (exp (gen) alpha-0)) (x x) (y y))
  (defstrand group-init 1 (k-magic k-magic) (group group)
    (alpha alpha-0))
  (defstrand resp 3 (k-magic k-magic) (group group) (a a) (b b)
    (g (exp (gen) alpha-0)) (y y) (x x))
  (deflistener (exp (gen) (mul y x alpha-0)))
  (deflistener
    (cat (exp (gen) (mul y-0 alpha))
      (mul y x (rec y-0) (rec alpha) alpha-0)))
  (defstrand resp 3 (k-magic k-magic-0) (group group-0) (a a-0) (b b-0)
    (g (exp (gen) alpha)) (y y-0) (x (mul (rec alpha) x-0 alpha-0)))
  (defstrand group-init 1 (k-magic k-magic-0) (group group-0)
    (alpha alpha))
  (defstrand init 2 (k-magic k-magic) (group group) (a a-1) (b b-1)
    (g (exp (gen) alpha-0)) (x x-0))
  (precedes ((0 1) (2 0)) ((1 0) (0 0)) ((1 0) (7 0)) ((2 2) (0 2))
    ((2 2) (5 0)) ((3 1) (0 4)) ((4 1) (3 0)) ((5 2) (4 0))
    ((6 0) (5 0)) ((6 0) (7 0)) ((7 1) (5 1)))
  (non-orig k-magic k-magic-0 (privk a) (privk b))
  (uniq-gen n y x y-0 alpha x-0 alpha-0)
  (absent (y x) (y-0 (mul (rec alpha) x-0 alpha-0)))
  (precur (4 0))
  (operation encryption-test (displaced 8 1 group-init 1)
    (enc "Group id" group-1 (exp (gen) alpha-1) k-magic-1) (7 0))
  (traces
    ((recv (enc "Group id" group (exp (gen) alpha-0) k-magic))
      (send (enc a b group (exp (gen) (mul x alpha-0)) (privk a)))
      (recv
        (enc a b group (exp (gen) (mul y alpha-0))
          (exp (gen) (mul x alpha-0)) (privk b)))
      (send (enc n (exp (gen) (mul y x alpha-0)))) (recv n))
    ((send (enc "Group id" group (exp (gen) alpha-0) k-magic)))
    ((recv (enc "Group id" group (exp (gen) alpha-0) k-magic))
      (recv (enc a b group (exp (gen) (mul x alpha-0)) (privk a)))
      (send
        (enc a b group (exp (gen) (mul y alpha-0))
          (exp (gen) (mul x alpha-0)) (privk b))))
    ((recv (exp (gen) (mul y x alpha-0)))
      (send (exp (gen) (mul y x alpha-0))))
    ((recv
       (cat (exp (gen) (mul y-0 alpha))
         (mul y x (rec y-0) (rec alpha) alpha-0)))
      (send
        (cat (exp (gen) (mul y-0 alpha))
          (mul y x (rec y-0) (rec alpha) alpha-0))))
    ((recv (enc "Group id" group-0 (exp (gen) alpha) k-magic-0))
      (recv
        (enc a-0 b-0 group-0 (exp (gen) (mul x-0 alpha-0)) (privk a-0)))
      (send
        (enc a-0 b-0 group-0 (exp (gen) (mul y-0 alpha))
          (exp (gen) (mul x-0 alpha-0)) (privk b-0))))
    ((send (enc "Group id" group-0 (exp (gen) alpha) k-magic-0)))
    ((recv (enc "Group id" group (exp (gen) alpha-0) k-magic))
      (send
        (enc a-1 b-1 group (exp (gen) (mul x-0 alpha-0)) (privk a-1)))))
  (label 113)
  (parent 60)
  (unrealized (3 0) (4 0))
  (aborted)
  (comment "aborted"))

(defskeleton dh_sig2
  (vars (k-magic k-magic-0 skey) (n group group-0 text)
    (a b a-0 b-0 name) (y x y-0 alpha alpha-0 rndx) (w expt))
  (defstrand init 5 (k-magic k-magic) (n n) (group group) (a a) (b b)
    (g (exp (gen) alpha-0)) (x x) (y y))
  (defstrand group-init 1 (k-magic k-magic) (group group)
    (alpha alpha-0))
  (defstrand resp 3 (k-magic k-magic) (group group) (a a) (b b)
    (g (exp (gen) alpha-0)) (y y) (x x))
  (deflistener (exp (gen) (mul y x alpha-0)))
  (deflistener
    (cat (exp (gen) (mul y-0 alpha))
      (mul y x (rec y-0) (rec alpha) alpha-0)))
  (defstrand resp 3 (k-magic k-magic-0) (group group-0) (a a-0) (b b-0)
    (g (exp (gen) alpha)) (y y-0) (x (mul (rec alpha) alpha-0)))
  (defstrand group-init 1 (k-magic k-magic-0) (group group-0)
    (alpha alpha))
  (deflistener (cat (exp (gen) (mul alpha-0 (rec w))) w))
  (precedes ((0 1) (2 0)) ((1 0) (0 0)) ((1 0) (7 0)) ((2 2) (0 2))
    ((2 2) (5 0)) ((3 1) (0 4)) ((4 1) (3 0)) ((5 2) (4 0))
    ((6 0) (5 0)) ((7 1) (5 1)))
  (non-orig k-magic k-magic-0 (privk a) (privk b))
  (uniq-gen n y x y-0 alpha alpha-0)
  (absent (y x) (y-0 (mul (rec alpha) alpha-0)))
  (precur (4 0) (7 0))
  (operation nonce-test
    (added-listener (cat (exp (gen) (mul alpha-0 (rec w))) w))
    (exp (gen) alpha-0) (5 1)
    (enc "Group id" group (exp (gen) alpha-0) k-magic))
  (traces
    ((recv (enc "Group id" group (exp (gen) alpha-0) k-magic))
      (send (enc a b group (exp (gen) (mul x alpha-0)) (privk a)))
      (recv
        (enc a b group (exp (gen) (mul y alpha-0))
          (exp (gen) (mul x alpha-0)) (privk b)))
      (send (enc n (exp (gen) (mul y x alpha-0)))) (recv n))
    ((send (enc "Group id" group (exp (gen) alpha-0) k-magic)))
    ((recv (enc "Group id" group (exp (gen) alpha-0) k-magic))
      (recv (enc a b group (exp (gen) (mul x alpha-0)) (privk a)))
      (send
        (enc a b group (exp (gen) (mul y alpha-0))
          (exp (gen) (mul x alpha-0)) (privk b))))
    ((recv (exp (gen) (mul y x alpha-0)))
      (send (exp (gen) (mul y x alpha-0))))
    ((recv
       (cat (exp (gen) (mul y-0 alpha))
         (mul y x (rec y-0) (rec alpha) alpha-0)))
      (send
        (cat (exp (gen) (mul y-0 alpha))
          (mul y x (rec y-0) (rec alpha) alpha-0))))
    ((recv (enc "Group id" group-0 (exp (gen) alpha) k-magic-0))
      (recv (enc a-0 b-0 group-0 (exp (gen) alpha-0) (privk a-0)))
      (send
        (enc a-0 b-0 group-0 (exp (gen) (mul y-0 alpha))
          (exp (gen) alpha-0) (privk b-0))))
    ((send (enc "Group id" group-0 (exp (gen) alpha) k-magic-0)))
    ((recv (cat (exp (gen) (mul alpha-0 (rec w))) w))
      (send (cat (exp (gen) (mul alpha-0 (rec w))) w))))
  (label 112)
  (parent 59)
  (unrealized (3 0) (4 0) (7 0))
  (aborted)
  (comment "aborted"))

(defskeleton dh_sig2
  (vars (k-magic k-magic-0 k-magic-1 skey)
    (n group group-0 group-1 text) (a b a-0 b-0 a-1 b-1 name)
    (y x y-0 alpha alpha-0 y-1 rndx) (x-0 expt))
  (defstrand init 5 (k-magic k-magic) (n n) (group group) (a a) (b b)
    (g (exp (gen) alpha-0)) (x x) (y y))
  (defstrand group-init 1 (k-magic k-magic) (group group)
    (alpha alpha-0))
  (defstrand resp 3 (k-magic k-magic) (group group) (a a) (b b)
    (g (exp (gen) alpha-0)) (y y) (x x))
  (deflistener (exp (gen) (mul y x alpha-0)))
  (deflistener
    (cat (exp (gen) (mul y-0 alpha))
      (mul y x (rec y-0) (rec alpha) alpha-0)))
  (defstrand resp 3 (k-magic k-magic-0) (group group-0) (a a-0) (b b-0)
    (g (exp (gen) alpha)) (y y-0) (x (mul (rec alpha) alpha-0)))
  (defstrand group-init 1 (k-magic k-magic-0) (group group-0)
    (alpha alpha))
  (defstrand resp 3 (k-magic k-magic-1) (group group-1) (a a-1) (b b-1)
    (g (exp (gen) (mul alpha-0 (rec y-1)))) (y y-1) (x x-0))
  (precedes ((0 1) (2 0)) ((1 0) (0 0)) ((1 0) (7 0)) ((2 2) (0 2))
    ((2 2) (5 0)) ((3 1) (0 4)) ((4 1) (3 0)) ((5 2) (4 0))
    ((6 0) (5 0)) ((7 2) (5 1)))
  (non-orig k-magic k-magic-0 k-magic-1 (privk a) (privk b))
  (uniq-gen n y x y-0 alpha alpha-0 y-1)
  (absent (y x) (y-0 (mul (rec alpha) alpha-0)) (y-1 x-0))
  (precur (4 0))
  (operation nonce-test (added-strand resp 3) (exp (gen) alpha-0) (5 1)
    (enc "Group id" group (exp (gen) alpha-0) k-magic))
  (traces
    ((recv (enc "Group id" group (exp (gen) alpha-0) k-magic))
      (send (enc a b group (exp (gen) (mul x alpha-0)) (privk a)))
      (recv
        (enc a b group (exp (gen) (mul y alpha-0))
          (exp (gen) (mul x alpha-0)) (privk b)))
      (send (enc n (exp (gen) (mul y x alpha-0)))) (recv n))
    ((send (enc "Group id" group (exp (gen) alpha-0) k-magic)))
    ((recv (enc "Group id" group (exp (gen) alpha-0) k-magic))
      (recv (enc a b group (exp (gen) (mul x alpha-0)) (privk a)))
      (send
        (enc a b group (exp (gen) (mul y alpha-0))
          (exp (gen) (mul x alpha-0)) (privk b))))
    ((recv (exp (gen) (mul y x alpha-0)))
      (send (exp (gen) (mul y x alpha-0))))
    ((recv
       (cat (exp (gen) (mul y-0 alpha))
         (mul y x (rec y-0) (rec alpha) alpha-0)))
      (send
        (cat (exp (gen) (mul y-0 alpha))
          (mul y x (rec y-0) (rec alpha) alpha-0))))
    ((recv (enc "Group id" group-0 (exp (gen) alpha) k-magic-0))
      (recv (enc a-0 b-0 group-0 (exp (gen) alpha-0) (privk a-0)))
      (send
        (enc a-0 b-0 group-0 (exp (gen) (mul y-0 alpha))
          (exp (gen) alpha-0) (privk b-0))))
    ((send (enc "Group id" group-0 (exp (gen) alpha) k-magic-0)))
    ((recv
       (enc "Group id" group-1 (exp (gen) (mul alpha-0 (rec y-1)))
         k-magic-1))
      (recv
        (enc a-1 b-1 group-1 (exp (gen) (mul alpha-0 (rec y-1) x-0))
          (privk a-1)))
      (send
        (enc a-1 b-1 group-1 (exp (gen) alpha-0)
          (exp (gen) (mul alpha-0 (rec y-1) x-0)) (privk b-1)))))
  (label 111)
  (parent 59)
  (unrealized (3 0) (4 0) (7 0) (7 1))
  (aborted)
  (comment "aborted"))

(defskeleton dh_sig2
  (vars (k-magic k-magic-0 k-magic-1 skey)
    (n group group-0 group-1 text) (a b a-0 b-0 a-1 b-1 name)
    (y x y-0 alpha alpha-0 x-0 rndx))
  (defstrand init 5 (k-magic k-magic) (n n) (group group) (a a) (b b)
    (g (exp (gen) alpha-0)) (x x) (y y))
  (defstrand group-init 1 (k-magic k-magic) (group group)
    (alpha alpha-0))
  (defstrand resp 3 (k-magic k-magic) (group group) (a a) (b b)
    (g (exp (gen) alpha-0)) (y y) (x x))
  (deflistener (exp (gen) (mul y x alpha-0)))
  (deflistener
    (cat (exp (gen) (mul y-0 alpha))
      (mul y x (rec y-0) (rec alpha) alpha-0)))
  (defstrand resp 3 (k-magic k-magic-0) (group group-0) (a a-0) (b b-0)
    (g (exp (gen) alpha)) (y y-0) (x (mul (rec alpha) alpha-0)))
  (defstrand group-init 1 (k-magic k-magic-0) (group group-0)
    (alpha alpha))
  (defstrand init 2 (k-magic k-magic-1) (group group-1) (a a-1) (b b-1)
    (g (exp (gen) (mul alpha-0 (rec x-0)))) (x x-0))
  (precedes ((0 1) (2 0)) ((1 0) (0 0)) ((1 0) (7 0)) ((2 2) (0 2))
    ((2 2) (5 0)) ((3 1) (0 4)) ((4 1) (3 0)) ((5 2) (4 0))
    ((6 0) (5 0)) ((7 1) (5 1)))
  (non-orig k-magic k-magic-0 k-magic-1 (privk a) (privk b))
  (uniq-gen n y x y-0 alpha alpha-0 x-0)
  (absent (y x) (y-0 (mul (rec alpha) alpha-0)))
  (precur (4 0))
  (operation nonce-test (added-strand init 2) (exp (gen) alpha-0) (5 1)
    (enc "Group id" group (exp (gen) alpha-0) k-magic))
  (traces
    ((recv (enc "Group id" group (exp (gen) alpha-0) k-magic))
      (send (enc a b group (exp (gen) (mul x alpha-0)) (privk a)))
      (recv
        (enc a b group (exp (gen) (mul y alpha-0))
          (exp (gen) (mul x alpha-0)) (privk b)))
      (send (enc n (exp (gen) (mul y x alpha-0)))) (recv n))
    ((send (enc "Group id" group (exp (gen) alpha-0) k-magic)))
    ((recv (enc "Group id" group (exp (gen) alpha-0) k-magic))
      (recv (enc a b group (exp (gen) (mul x alpha-0)) (privk a)))
      (send
        (enc a b group (exp (gen) (mul y alpha-0))
          (exp (gen) (mul x alpha-0)) (privk b))))
    ((recv (exp (gen) (mul y x alpha-0)))
      (send (exp (gen) (mul y x alpha-0))))
    ((recv
       (cat (exp (gen) (mul y-0 alpha))
         (mul y x (rec y-0) (rec alpha) alpha-0)))
      (send
        (cat (exp (gen) (mul y-0 alpha))
          (mul y x (rec y-0) (rec alpha) alpha-0))))
    ((recv (enc "Group id" group-0 (exp (gen) alpha) k-magic-0))
      (recv (enc a-0 b-0 group-0 (exp (gen) alpha-0) (privk a-0)))
      (send
        (enc a-0 b-0 group-0 (exp (gen) (mul y-0 alpha))
          (exp (gen) alpha-0) (privk b-0))))
    ((send (enc "Group id" group-0 (exp (gen) alpha) k-magic-0)))
    ((recv
       (enc "Group id" group-1 (exp (gen) (mul alpha-0 (rec x-0)))
         k-magic-1))
      (send (enc a-1 b-1 group-1 (exp (gen) alpha-0) (privk a-1)))))
  (label 110)
  (parent 59)
  (unrealized (3 0) (4 0) (7 0))
  (aborted)
  (comment "aborted"))

(defskeleton dh_sig2
  (vars (k-magic k-magic-0 skey) (n group group-0 text)
    (a b a-0 b-0 name) (y x alpha y-0 alpha-0 rndx) (w expt))
  (defstrand init 5 (k-magic k-magic) (n n) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (x x) (y y))
  (defstrand group-init 1 (k-magic k-magic) (group group) (alpha alpha))
  (defstrand resp 3 (k-magic k-magic) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (y y) (x x))
  (deflistener (exp (gen) (mul y x alpha)))
  (deflistener
    (cat (exp (gen) (mul y-0 alpha-0))
      (mul y x alpha (rec y-0) (rec alpha-0))))
  (defstrand resp 3 (k-magic k-magic-0) (group group-0) (a a-0) (b b-0)
    (g (exp (gen) alpha-0)) (y y-0) (x (one)))
  (defstrand group-init 1 (k-magic k-magic-0) (group group-0)
    (alpha alpha-0))
  (deflistener (cat (exp (gen) (mul alpha-0 (rec w))) w))
  (precedes ((0 1) (2 0)) ((1 0) (0 0)) ((2 2) (0 2)) ((2 2) (5 0))
    ((3 1) (0 4)) ((4 1) (3 0)) ((5 2) (4 0)) ((6 0) (5 0))
    ((6 0) (7 0)) ((7 1) (5 1)))
  (non-orig k-magic k-magic-0 (privk a) (privk b))
  (uniq-gen n y x alpha y-0 alpha-0)
  (absent (y x) (y-0 (one)))
  (precur (4 0) (7 0))
  (operation nonce-test
    (added-listener (cat (exp (gen) (mul alpha-0 (rec w))) w))
    (exp (gen) alpha-0) (5 1)
    (enc "Group id" group-0 (exp (gen) alpha-0) k-magic-0))
  (traces
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (send (enc a b group (exp (gen) (mul x alpha)) (privk a)))
      (recv
        (enc a b group (exp (gen) (mul y alpha))
          (exp (gen) (mul x alpha)) (privk b)))
      (send (enc n (exp (gen) (mul y x alpha)))) (recv n))
    ((send (enc "Group id" group (exp (gen) alpha) k-magic)))
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (recv (enc a b group (exp (gen) (mul x alpha)) (privk a)))
      (send
        (enc a b group (exp (gen) (mul y alpha))
          (exp (gen) (mul x alpha)) (privk b))))
    ((recv (exp (gen) (mul y x alpha)))
      (send (exp (gen) (mul y x alpha))))
    ((recv
       (cat (exp (gen) (mul y-0 alpha-0))
         (mul y x alpha (rec y-0) (rec alpha-0))))
      (send
        (cat (exp (gen) (mul y-0 alpha-0))
          (mul y x alpha (rec y-0) (rec alpha-0)))))
    ((recv (enc "Group id" group-0 (exp (gen) alpha-0) k-magic-0))
      (recv (enc a-0 b-0 group-0 (exp (gen) alpha-0) (privk a-0)))
      (send
        (enc a-0 b-0 group-0 (exp (gen) (mul y-0 alpha-0))
          (exp (gen) alpha-0) (privk b-0))))
    ((send (enc "Group id" group-0 (exp (gen) alpha-0) k-magic-0)))
    ((recv (cat (exp (gen) (mul alpha-0 (rec w))) w))
      (send (cat (exp (gen) (mul alpha-0 (rec w))) w))))
  (label 109)
  (parent 57)
  (unrealized (3 0) (4 0) (7 0))
  (aborted)
  (comment "aborted"))

(defskeleton dh_sig2
  (vars (k-magic k-magic-0 k-magic-1 skey)
    (n group group-0 group-1 text) (a b a-0 b-0 a-1 b-1 name)
    (y x alpha y-0 alpha-0 y-1 rndx) (x-0 expt))
  (defstrand init 5 (k-magic k-magic) (n n) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (x x) (y y))
  (defstrand group-init 1 (k-magic k-magic) (group group) (alpha alpha))
  (defstrand resp 3 (k-magic k-magic) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (y y) (x x))
  (deflistener (exp (gen) (mul y x alpha)))
  (deflistener
    (cat (exp (gen) (mul y-0 alpha-0))
      (mul y x alpha (rec y-0) (rec alpha-0))))
  (defstrand resp 3 (k-magic k-magic-0) (group group-0) (a a-0) (b b-0)
    (g (exp (gen) alpha-0)) (y y-0) (x (one)))
  (defstrand group-init 1 (k-magic k-magic-0) (group group-0)
    (alpha alpha-0))
  (defstrand resp 3 (k-magic k-magic-1) (group group-1) (a a-1) (b b-1)
    (g (exp (gen) (mul alpha-0 (rec y-1)))) (y y-1) (x x-0))
  (precedes ((0 1) (2 0)) ((1 0) (0 0)) ((2 2) (0 2)) ((2 2) (5 0))
    ((3 1) (0 4)) ((4 1) (3 0)) ((5 2) (4 0)) ((6 0) (5 0))
    ((6 0) (7 0)) ((7 2) (5 1)))
  (non-orig k-magic k-magic-0 k-magic-1 (privk a) (privk b))
  (uniq-gen n y x alpha y-0 alpha-0 y-1)
  (absent (y x) (y-0 (one)) (y-1 x-0))
  (precur (4 0))
  (operation nonce-test (added-strand resp 3) (exp (gen) alpha-0) (5 1)
    (enc "Group id" group-0 (exp (gen) alpha-0) k-magic-0))
  (traces
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (send (enc a b group (exp (gen) (mul x alpha)) (privk a)))
      (recv
        (enc a b group (exp (gen) (mul y alpha))
          (exp (gen) (mul x alpha)) (privk b)))
      (send (enc n (exp (gen) (mul y x alpha)))) (recv n))
    ((send (enc "Group id" group (exp (gen) alpha) k-magic)))
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (recv (enc a b group (exp (gen) (mul x alpha)) (privk a)))
      (send
        (enc a b group (exp (gen) (mul y alpha))
          (exp (gen) (mul x alpha)) (privk b))))
    ((recv (exp (gen) (mul y x alpha)))
      (send (exp (gen) (mul y x alpha))))
    ((recv
       (cat (exp (gen) (mul y-0 alpha-0))
         (mul y x alpha (rec y-0) (rec alpha-0))))
      (send
        (cat (exp (gen) (mul y-0 alpha-0))
          (mul y x alpha (rec y-0) (rec alpha-0)))))
    ((recv (enc "Group id" group-0 (exp (gen) alpha-0) k-magic-0))
      (recv (enc a-0 b-0 group-0 (exp (gen) alpha-0) (privk a-0)))
      (send
        (enc a-0 b-0 group-0 (exp (gen) (mul y-0 alpha-0))
          (exp (gen) alpha-0) (privk b-0))))
    ((send (enc "Group id" group-0 (exp (gen) alpha-0) k-magic-0)))
    ((recv
       (enc "Group id" group-1 (exp (gen) (mul alpha-0 (rec y-1)))
         k-magic-1))
      (recv
        (enc a-1 b-1 group-1 (exp (gen) (mul alpha-0 (rec y-1) x-0))
          (privk a-1)))
      (send
        (enc a-1 b-1 group-1 (exp (gen) alpha-0)
          (exp (gen) (mul alpha-0 (rec y-1) x-0)) (privk b-1)))))
  (label 108)
  (parent 57)
  (unrealized (3 0) (4 0) (7 0) (7 1))
  (aborted)
  (comment "aborted"))

(defskeleton dh_sig2
  (vars (k-magic k-magic-0 k-magic-1 skey)
    (n group group-0 group-1 text) (a b a-0 b-0 a-1 b-1 name)
    (y x alpha y-0 alpha-0 x-0 rndx))
  (defstrand init 5 (k-magic k-magic) (n n) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (x x) (y y))
  (defstrand group-init 1 (k-magic k-magic) (group group) (alpha alpha))
  (defstrand resp 3 (k-magic k-magic) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (y y) (x x))
  (deflistener (exp (gen) (mul y x alpha)))
  (deflistener
    (cat (exp (gen) (mul y-0 alpha-0))
      (mul y x alpha (rec y-0) (rec alpha-0))))
  (defstrand resp 3 (k-magic k-magic-0) (group group-0) (a a-0) (b b-0)
    (g (exp (gen) alpha-0)) (y y-0) (x (one)))
  (defstrand group-init 1 (k-magic k-magic-0) (group group-0)
    (alpha alpha-0))
  (defstrand init 2 (k-magic k-magic-1) (group group-1) (a a-1) (b b-1)
    (g (exp (gen) (mul alpha-0 (rec x-0)))) (x x-0))
  (precedes ((0 1) (2 0)) ((1 0) (0 0)) ((2 2) (0 2)) ((2 2) (5 0))
    ((3 1) (0 4)) ((4 1) (3 0)) ((5 2) (4 0)) ((6 0) (5 0))
    ((6 0) (7 0)) ((7 1) (5 1)))
  (non-orig k-magic k-magic-0 k-magic-1 (privk a) (privk b))
  (uniq-gen n y x alpha y-0 alpha-0 x-0)
  (absent (y x) (y-0 (one)))
  (precur (4 0))
  (operation nonce-test (added-strand init 2) (exp (gen) alpha-0) (5 1)
    (enc "Group id" group-0 (exp (gen) alpha-0) k-magic-0))
  (traces
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (send (enc a b group (exp (gen) (mul x alpha)) (privk a)))
      (recv
        (enc a b group (exp (gen) (mul y alpha))
          (exp (gen) (mul x alpha)) (privk b)))
      (send (enc n (exp (gen) (mul y x alpha)))) (recv n))
    ((send (enc "Group id" group (exp (gen) alpha) k-magic)))
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (recv (enc a b group (exp (gen) (mul x alpha)) (privk a)))
      (send
        (enc a b group (exp (gen) (mul y alpha))
          (exp (gen) (mul x alpha)) (privk b))))
    ((recv (exp (gen) (mul y x alpha)))
      (send (exp (gen) (mul y x alpha))))
    ((recv
       (cat (exp (gen) (mul y-0 alpha-0))
         (mul y x alpha (rec y-0) (rec alpha-0))))
      (send
        (cat (exp (gen) (mul y-0 alpha-0))
          (mul y x alpha (rec y-0) (rec alpha-0)))))
    ((recv (enc "Group id" group-0 (exp (gen) alpha-0) k-magic-0))
      (recv (enc a-0 b-0 group-0 (exp (gen) alpha-0) (privk a-0)))
      (send
        (enc a-0 b-0 group-0 (exp (gen) (mul y-0 alpha-0))
          (exp (gen) alpha-0) (privk b-0))))
    ((send (enc "Group id" group-0 (exp (gen) alpha-0) k-magic-0)))
    ((recv
       (enc "Group id" group-1 (exp (gen) (mul alpha-0 (rec x-0)))
         k-magic-1))
      (send (enc a-1 b-1 group-1 (exp (gen) alpha-0) (privk a-1)))))
  (label 107)
  (parent 57)
  (unrealized (3 0) (4 0) (7 0))
  (aborted)
  (comment "aborted"))

(defskeleton dh_sig2
  (vars (k-magic k-magic-0 skey) (n group group-0 text)
    (a b a-0 b-0 a-1 b-1 name) (x expt) (y x-0 y-0 alpha rndx) (w expt)
    (y-1 rndx) (x-1 expt))
  (defstrand init 5 (k-magic k-magic) (n n) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (x x-0) (y y))
  (defstrand group-init 1 (k-magic k-magic) (group group) (alpha alpha))
  (defstrand resp 3 (k-magic k-magic) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (y y) (x x-0))
  (deflistener (exp (gen) (mul y x-0 alpha)))
  (deflistener (cat (exp (gen) (mul y-0 alpha)) (mul y x-0 (rec y-0))))
  (defstrand resp 3 (k-magic k-magic) (group group) (a a-0) (b b-0)
    (g (exp (gen) alpha)) (y y-0) (x x))
  (deflistener (cat (exp (gen) (mul x alpha (rec w))) w))
  (defstrand resp 3 (k-magic k-magic-0) (group group-0) (a a-1) (b b-1)
    (g (exp (gen) (mul x alpha (rec w) (rec y-1)))) (y y-1) (x x-1))
  (precedes ((0 1) (2 0)) ((1 0) (0 0)) ((1 0) (7 0)) ((2 2) (0 2))
    ((2 2) (5 0)) ((3 1) (0 4)) ((4 1) (3 0)) ((5 2) (4 0))
    ((6 1) (5 1)) ((7 2) (6 0)))
  (non-orig k-magic k-magic-0 (privk a) (privk b))
  (uniq-gen n y x-0 y-0 alpha y-1)
  (absent (y x-0) (y-0 x) (y-1 x-1))
  (precur (4 0) (6 0))
  (operation nonce-test (added-strand resp 3)
    (exp (gen) (mul x alpha (rec w))) (6 0))
  (traces
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (send (enc a b group (exp (gen) (mul x-0 alpha)) (privk a)))
      (recv
        (enc a b group (exp (gen) (mul y alpha))
          (exp (gen) (mul x-0 alpha)) (privk b)))
      (send (enc n (exp (gen) (mul y x-0 alpha)))) (recv n))
    ((send (enc "Group id" group (exp (gen) alpha) k-magic)))
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (recv (enc a b group (exp (gen) (mul x-0 alpha)) (privk a)))
      (send
        (enc a b group (exp (gen) (mul y alpha))
          (exp (gen) (mul x-0 alpha)) (privk b))))
    ((recv (exp (gen) (mul y x-0 alpha)))
      (send (exp (gen) (mul y x-0 alpha))))
    ((recv (cat (exp (gen) (mul y-0 alpha)) (mul y x-0 (rec y-0))))
      (send (cat (exp (gen) (mul y-0 alpha)) (mul y x-0 (rec y-0)))))
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (recv (enc a-0 b-0 group (exp (gen) (mul x alpha)) (privk a-0)))
      (send
        (enc a-0 b-0 group (exp (gen) (mul y-0 alpha))
          (exp (gen) (mul x alpha)) (privk b-0))))
    ((recv (cat (exp (gen) (mul x alpha (rec w))) w))
      (send (cat (exp (gen) (mul x alpha (rec w))) w)))
    ((recv
       (enc "Group id" group-0
         (exp (gen) (mul x alpha (rec w) (rec y-1))) k-magic-0))
      (recv
        (enc a-1 b-1 group-0
          (exp (gen) (mul x alpha (rec w) (rec y-1) x-1)) (privk a-1)))
      (send
        (enc a-1 b-1 group-0 (exp (gen) (mul x alpha (rec w)))
          (exp (gen) (mul x alpha (rec w) (rec y-1) x-1))
          (privk b-1)))))
  (label 106)
  (parent 55)
  (unrealized (3 0) (4 0) (7 0) (7 1))
  (aborted)
  (comment "aborted"))

(defskeleton dh_sig2
  (vars (k-magic skey) (n group text) (a b a-0 b-0 name) (y alpha rndx)
    (w expt) (x y-0 rndx))
  (defstrand init 5 (k-magic k-magic) (n n) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (x x) (y y-0))
  (defstrand group-init 1 (k-magic k-magic) (group group) (alpha alpha))
  (defstrand resp 3 (k-magic k-magic) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (y y-0) (x x))
  (deflistener (exp (gen) (mul alpha x y-0)))
  (deflistener (cat (exp (gen) (mul y alpha)) (mul (rec y) x y-0)))
  (defstrand resp 3 (k-magic k-magic) (group group) (a a-0) (b b-0)
    (g (exp (gen) alpha)) (y y) (x (mul w y-0)))
  (deflistener (cat (exp (gen) (mul alpha y-0)) w))
  (precedes ((0 1) (2 0)) ((1 0) (0 0)) ((2 2) (0 2)) ((2 2) (5 0))
    ((2 2) (6 0)) ((3 1) (0 4)) ((4 1) (3 0)) ((5 2) (4 0))
    ((6 1) (5 1)))
  (non-orig k-magic (privk a) (privk b))
  (uniq-gen n y alpha x y-0)
  (absent (y (mul w y-0)) (y-0 x))
  (precur (4 0) (6 0))
  (operation nonce-test (displaced 7 2 resp 3)
    (exp (gen) (mul x-0 alpha (rec w-0))) (6 0))
  (traces
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (send (enc a b group (exp (gen) (mul alpha x)) (privk a)))
      (recv
        (enc a b group (exp (gen) (mul alpha y-0))
          (exp (gen) (mul alpha x)) (privk b)))
      (send (enc n (exp (gen) (mul alpha x y-0)))) (recv n))
    ((send (enc "Group id" group (exp (gen) alpha) k-magic)))
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (recv (enc a b group (exp (gen) (mul alpha x)) (privk a)))
      (send
        (enc a b group (exp (gen) (mul alpha y-0))
          (exp (gen) (mul alpha x)) (privk b))))
    ((recv (exp (gen) (mul alpha x y-0)))
      (send (exp (gen) (mul alpha x y-0))))
    ((recv (cat (exp (gen) (mul y alpha)) (mul (rec y) x y-0)))
      (send (cat (exp (gen) (mul y alpha)) (mul (rec y) x y-0))))
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (recv
        (enc a-0 b-0 group (exp (gen) (mul alpha w y-0)) (privk a-0)))
      (send
        (enc a-0 b-0 group (exp (gen) (mul y alpha))
          (exp (gen) (mul alpha w y-0)) (privk b-0))))
    ((recv (cat (exp (gen) (mul alpha y-0)) w))
      (send (cat (exp (gen) (mul alpha y-0)) w))))
  (label 105)
  (parent 55)
  (unrealized (3 0) (4 0))
  (aborted)
  (comment "aborted"))

(defskeleton dh_sig2
  (vars (k-magic skey) (n group text) (a b a-0 b-0 name)
    (y y-0 alpha rndx) (w expt) (x rndx))
  (defstrand init 5 (k-magic k-magic) (n n) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (x x) (y y))
  (defstrand group-init 1 (k-magic k-magic) (group group) (alpha alpha))
  (defstrand resp 3 (k-magic k-magic) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (y y) (x x))
  (deflistener (exp (gen) (mul y alpha x)))
  (deflistener (cat (exp (gen) (mul y-0 alpha)) (mul y (rec y-0) x)))
  (defstrand resp 3 (k-magic k-magic) (group group) (a a-0) (b b-0)
    (g (exp (gen) alpha)) (y y-0) (x (mul w x)))
  (deflistener (cat (exp (gen) (mul alpha x)) w))
  (precedes ((0 1) (2 0)) ((0 1) (6 0)) ((1 0) (0 0)) ((2 2) (0 2))
    ((2 2) (5 0)) ((3 1) (0 4)) ((4 1) (3 0)) ((5 2) (4 0))
    ((6 1) (5 1)))
  (non-orig k-magic (privk a) (privk b))
  (uniq-gen n y y-0 alpha x)
  (absent (y x) (y-0 (mul w x)))
  (precur (4 0) (6 0))
  (operation nonce-test (displaced 7 0 init 2)
    (exp (gen) (mul x-0 alpha (rec w-0))) (6 0))
  (traces
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (send (enc a b group (exp (gen) (mul alpha x)) (privk a)))
      (recv
        (enc a b group (exp (gen) (mul y alpha))
          (exp (gen) (mul alpha x)) (privk b)))
      (send (enc n (exp (gen) (mul y alpha x)))) (recv n))
    ((send (enc "Group id" group (exp (gen) alpha) k-magic)))
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (recv (enc a b group (exp (gen) (mul alpha x)) (privk a)))
      (send
        (enc a b group (exp (gen) (mul y alpha))
          (exp (gen) (mul alpha x)) (privk b))))
    ((recv (exp (gen) (mul y alpha x)))
      (send (exp (gen) (mul y alpha x))))
    ((recv (cat (exp (gen) (mul y-0 alpha)) (mul y (rec y-0) x)))
      (send (cat (exp (gen) (mul y-0 alpha)) (mul y (rec y-0) x))))
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (recv (enc a-0 b-0 group (exp (gen) (mul alpha w x)) (privk a-0)))
      (send
        (enc a-0 b-0 group (exp (gen) (mul y-0 alpha))
          (exp (gen) (mul alpha w x)) (privk b-0))))
    ((recv (cat (exp (gen) (mul alpha x)) w))
      (send (cat (exp (gen) (mul alpha x)) w))))
  (label 104)
  (parent 55)
  (unrealized (3 0) (4 0))
  (aborted)
  (comment "aborted"))

(defskeleton dh_sig2
  (vars (k-magic k-magic-0 skey) (n group group-0 text)
    (a b a-0 b-0 a-1 b-1 name) (x expt) (y x-0 y-0 alpha rndx) (w expt)
    (x-1 rndx))
  (defstrand init 5 (k-magic k-magic) (n n) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (x x-0) (y y))
  (defstrand group-init 1 (k-magic k-magic) (group group) (alpha alpha))
  (defstrand resp 3 (k-magic k-magic) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (y y) (x x-0))
  (deflistener (exp (gen) (mul y x-0 alpha)))
  (deflistener (cat (exp (gen) (mul y-0 alpha)) (mul y x-0 (rec y-0))))
  (defstrand resp 3 (k-magic k-magic) (group group) (a a-0) (b b-0)
    (g (exp (gen) alpha)) (y y-0) (x x))
  (deflistener (cat (exp (gen) (mul x alpha (rec w))) w))
  (defstrand init 2 (k-magic k-magic-0) (group group-0) (a a-1) (b b-1)
    (g (exp (gen) (mul x alpha (rec w) (rec x-1)))) (x x-1))
  (precedes ((0 1) (2 0)) ((1 0) (0 0)) ((1 0) (7 0)) ((2 2) (0 2))
    ((2 2) (5 0)) ((3 1) (0 4)) ((4 1) (3 0)) ((5 2) (4 0))
    ((6 1) (5 1)) ((7 1) (6 0)))
  (non-orig k-magic k-magic-0 (privk a) (privk b))
  (uniq-gen n y x-0 y-0 alpha x-1)
  (absent (y x-0) (y-0 x))
  (precur (4 0) (6 0))
  (operation nonce-test (added-strand init 2)
    (exp (gen) (mul x alpha (rec w))) (6 0))
  (traces
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (send (enc a b group (exp (gen) (mul x-0 alpha)) (privk a)))
      (recv
        (enc a b group (exp (gen) (mul y alpha))
          (exp (gen) (mul x-0 alpha)) (privk b)))
      (send (enc n (exp (gen) (mul y x-0 alpha)))) (recv n))
    ((send (enc "Group id" group (exp (gen) alpha) k-magic)))
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (recv (enc a b group (exp (gen) (mul x-0 alpha)) (privk a)))
      (send
        (enc a b group (exp (gen) (mul y alpha))
          (exp (gen) (mul x-0 alpha)) (privk b))))
    ((recv (exp (gen) (mul y x-0 alpha)))
      (send (exp (gen) (mul y x-0 alpha))))
    ((recv (cat (exp (gen) (mul y-0 alpha)) (mul y x-0 (rec y-0))))
      (send (cat (exp (gen) (mul y-0 alpha)) (mul y x-0 (rec y-0)))))
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (recv (enc a-0 b-0 group (exp (gen) (mul x alpha)) (privk a-0)))
      (send
        (enc a-0 b-0 group (exp (gen) (mul y-0 alpha))
          (exp (gen) (mul x alpha)) (privk b-0))))
    ((recv (cat (exp (gen) (mul x alpha (rec w))) w))
      (send (cat (exp (gen) (mul x alpha (rec w))) w)))
    ((recv
       (enc "Group id" group-0
         (exp (gen) (mul x alpha (rec w) (rec x-1))) k-magic-0))
      (send
        (enc a-1 b-1 group-0 (exp (gen) (mul x alpha (rec w)))
          (privk a-1)))))
  (label 103)
  (parent 55)
  (unrealized (3 0) (4 0) (7 0))
  (aborted)
  (comment "aborted"))

(defskeleton dh_sig2
  (vars (k-magic skey) (n group text) (a b a-0 b-0 name)
    (y x y-0 alpha rndx) (w expt))
  (defstrand init 5 (k-magic k-magic) (n n) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (x x) (y y))
  (defstrand group-init 1 (k-magic k-magic) (group group) (alpha alpha))
  (defstrand resp 3 (k-magic k-magic) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (y y) (x x))
  (deflistener (exp (gen) (mul y x alpha)))
  (deflistener (cat (exp (gen) (mul y-0 alpha)) (mul y x (rec y-0))))
  (defstrand resp 3 (k-magic k-magic) (group group) (a a-0) (b b-0)
    (g (exp (gen) alpha)) (y y-0) (x (mul (rec alpha) w)))
  (deflistener (cat (gen) w))
  (precedes ((0 1) (2 0)) ((1 0) (0 0)) ((1 0) (6 0)) ((2 2) (0 2))
    ((2 2) (5 0)) ((3 1) (0 4)) ((4 1) (3 0)) ((5 2) (4 0))
    ((6 1) (5 1)))
  (non-orig k-magic (privk a) (privk b))
  (uniq-gen n y x y-0 alpha)
  (absent (y x) (y-0 (mul (rec alpha) w)))
  (precur (4 0) (6 0))
  (operation nonce-test
    (contracted (x-0 (mul (rec alpha) w)) (alpha-0 alpha) (w-0 w)) (gen)
    (6 0))
  (traces
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (send (enc a b group (exp (gen) (mul x alpha)) (privk a)))
      (recv
        (enc a b group (exp (gen) (mul y alpha))
          (exp (gen) (mul x alpha)) (privk b)))
      (send (enc n (exp (gen) (mul y x alpha)))) (recv n))
    ((send (enc "Group id" group (exp (gen) alpha) k-magic)))
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (recv (enc a b group (exp (gen) (mul x alpha)) (privk a)))
      (send
        (enc a b group (exp (gen) (mul y alpha))
          (exp (gen) (mul x alpha)) (privk b))))
    ((recv (exp (gen) (mul y x alpha)))
      (send (exp (gen) (mul y x alpha))))
    ((recv (cat (exp (gen) (mul y-0 alpha)) (mul y x (rec y-0))))
      (send (cat (exp (gen) (mul y-0 alpha)) (mul y x (rec y-0)))))
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (recv (enc a-0 b-0 group (exp (gen) w) (privk a-0)))
      (send
        (enc a-0 b-0 group (exp (gen) (mul y-0 alpha)) (exp (gen) w)
          (privk b-0)))) ((recv (cat (gen) w)) (send (cat (gen) w))))
  (label 102)
  (parent 55)
  (unrealized (3 0) (4 0))
  (aborted)
  (comment "aborted"))

(defskeleton dh_sig2
  (vars (k-magic skey) (n group text) (a b a-0 b-0 name) (y x y-0 rndx)
    (w expt) (alpha rndx))
  (defstrand init 5 (k-magic k-magic) (n n) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (x x) (y y))
  (defstrand group-init 1 (k-magic k-magic) (group group) (alpha alpha))
  (defstrand resp 3 (k-magic k-magic) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (y y) (x x))
  (deflistener (exp (gen) (mul y x alpha)))
  (deflistener (cat (exp (gen) (mul y-0 alpha)) (mul y x (rec y-0))))
  (defstrand resp 3 (k-magic k-magic) (group group) (a a-0) (b b-0)
    (g (exp (gen) alpha)) (y y-0) (x w))
  (deflistener (cat (exp (gen) alpha) w))
  (precedes ((0 1) (2 0)) ((1 0) (0 0)) ((1 0) (6 0)) ((2 2) (0 2))
    ((2 2) (5 0)) ((3 1) (0 4)) ((4 1) (3 0)) ((5 2) (4 0))
    ((6 1) (5 1)))
  (non-orig k-magic (privk a) (privk b))
  (uniq-gen n y x y-0 alpha)
  (absent (y x) (y-0 w))
  (precur (4 0) (6 0))
  (operation nonce-test (displaced 7 1 group-init 1) (exp (gen) alpha-0)
    (6 0))
  (traces
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (send (enc a b group (exp (gen) (mul x alpha)) (privk a)))
      (recv
        (enc a b group (exp (gen) (mul y alpha))
          (exp (gen) (mul x alpha)) (privk b)))
      (send (enc n (exp (gen) (mul y x alpha)))) (recv n))
    ((send (enc "Group id" group (exp (gen) alpha) k-magic)))
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (recv (enc a b group (exp (gen) (mul x alpha)) (privk a)))
      (send
        (enc a b group (exp (gen) (mul y alpha))
          (exp (gen) (mul x alpha)) (privk b))))
    ((recv (exp (gen) (mul y x alpha)))
      (send (exp (gen) (mul y x alpha))))
    ((recv (cat (exp (gen) (mul y-0 alpha)) (mul y x (rec y-0))))
      (send (cat (exp (gen) (mul y-0 alpha)) (mul y x (rec y-0)))))
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (recv (enc a-0 b-0 group (exp (gen) (mul w alpha)) (privk a-0)))
      (send
        (enc a-0 b-0 group (exp (gen) (mul y-0 alpha))
          (exp (gen) (mul w alpha)) (privk b-0))))
    ((recv (cat (exp (gen) alpha) w)) (send (cat (exp (gen) alpha) w))))
  (label 101)
  (parent 55)
  (unrealized (3 0) (4 0) (6 0))
  (aborted)
  (comment "aborted"))

(defskeleton dh_sig2
  (vars (k-magic k-magic-0 skey) (n group group-0 text)
    (a b a-0 b-0 name) (y x y-0 alpha rndx) (w expt) (alpha-0 rndx))
  (defstrand init 5 (k-magic k-magic) (n n) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (x x) (y y))
  (defstrand group-init 1 (k-magic k-magic) (group group) (alpha alpha))
  (defstrand resp 3 (k-magic k-magic) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (y y) (x x))
  (deflistener (exp (gen) (mul y x alpha)))
  (deflistener (cat (exp (gen) (mul y-0 alpha)) (mul y x (rec y-0))))
  (defstrand resp 3 (k-magic k-magic) (group group) (a a-0) (b b-0)
    (g (exp (gen) alpha)) (y y-0) (x (mul (rec alpha) w alpha-0)))
  (deflistener (cat (exp (gen) alpha-0) w))
  (defstrand group-init 1 (k-magic k-magic-0) (group group-0)
    (alpha alpha-0))
  (precedes ((0 1) (2 0)) ((1 0) (0 0)) ((1 0) (6 0)) ((2 2) (0 2))
    ((2 2) (5 0)) ((3 1) (0 4)) ((4 1) (3 0)) ((5 2) (4 0))
    ((6 1) (5 1)) ((7 0) (6 0)))
  (non-orig k-magic (privk a) (privk b))
  (uniq-gen n y x y-0 alpha alpha-0)
  (absent (y x) (y-0 (mul (rec alpha) w alpha-0)))
  (precur (4 0) (6 0))
  (operation nonce-test (added-strand group-init 1) (exp (gen) alpha-0)
    (6 0))
  (traces
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (send (enc a b group (exp (gen) (mul x alpha)) (privk a)))
      (recv
        (enc a b group (exp (gen) (mul y alpha))
          (exp (gen) (mul x alpha)) (privk b)))
      (send (enc n (exp (gen) (mul y x alpha)))) (recv n))
    ((send (enc "Group id" group (exp (gen) alpha) k-magic)))
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (recv (enc a b group (exp (gen) (mul x alpha)) (privk a)))
      (send
        (enc a b group (exp (gen) (mul y alpha))
          (exp (gen) (mul x alpha)) (privk b))))
    ((recv (exp (gen) (mul y x alpha)))
      (send (exp (gen) (mul y x alpha))))
    ((recv (cat (exp (gen) (mul y-0 alpha)) (mul y x (rec y-0))))
      (send (cat (exp (gen) (mul y-0 alpha)) (mul y x (rec y-0)))))
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (recv (enc a-0 b-0 group (exp (gen) (mul w alpha-0)) (privk a-0)))
      (send
        (enc a-0 b-0 group (exp (gen) (mul y-0 alpha))
          (exp (gen) (mul w alpha-0)) (privk b-0))))
    ((recv (cat (exp (gen) alpha-0) w))
      (send (cat (exp (gen) alpha-0) w)))
    ((send (enc "Group id" group-0 (exp (gen) alpha-0) k-magic-0))))
  (label 100)
  (parent 55)
  (unrealized (3 0) (4 0))
  (aborted)
  (comment "aborted"))

(defskeleton dh_sig2
  (vars (k-magic k-magic-0 skey) (n group group-0 text)
    (a b a-0 b-0 a-1 b-1 name) (y x y-0 rndx) (x-0 expt)
    (alpha y-1 alpha-0 rndx))
  (defstrand init 5 (k-magic k-magic) (n n) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (x x) (y y))
  (defstrand group-init 1 (k-magic k-magic) (group group) (alpha alpha))
  (defstrand resp 3 (k-magic k-magic) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (y y) (x x))
  (deflistener (exp (gen) (mul y x alpha)))
  (deflistener (cat (exp (gen) (mul y-0 alpha)) (mul y x (rec y-0))))
  (defstrand resp 3 (k-magic k-magic) (group group) (a a-0) (b b-0)
    (g (exp (gen) alpha)) (y y-0) (x (mul (rec alpha) y-1 alpha-0)))
  (defstrand resp 3 (k-magic k-magic-0) (group group-0) (a a-1) (b b-1)
    (g (exp (gen) alpha-0)) (y y-1) (x x-0))
  (defstrand group-init 1 (k-magic k-magic-0) (group group-0)
    (alpha alpha-0))
  (precedes ((0 1) (2 0)) ((1 0) (0 0)) ((1 0) (6 0)) ((2 2) (0 2))
    ((2 2) (5 0)) ((3 1) (0 4)) ((4 1) (3 0)) ((5 2) (4 0))
    ((6 2) (5 1)) ((7 0) (6 0)))
  (non-orig k-magic k-magic-0 (privk a) (privk b))
  (uniq-gen n y x y-0 alpha y-1 alpha-0)
  (absent (y x) (y-0 (mul (rec alpha) y-1 alpha-0)) (y-1 x-0))
  (precur (4 0))
  (operation encryption-test (added-strand group-init 1)
    (enc "Group id" group-0 (exp (gen) alpha-0) k-magic-0) (6 0))
  (traces
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (send (enc a b group (exp (gen) (mul x alpha)) (privk a)))
      (recv
        (enc a b group (exp (gen) (mul y alpha))
          (exp (gen) (mul x alpha)) (privk b)))
      (send (enc n (exp (gen) (mul y x alpha)))) (recv n))
    ((send (enc "Group id" group (exp (gen) alpha) k-magic)))
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (recv (enc a b group (exp (gen) (mul x alpha)) (privk a)))
      (send
        (enc a b group (exp (gen) (mul y alpha))
          (exp (gen) (mul x alpha)) (privk b))))
    ((recv (exp (gen) (mul y x alpha)))
      (send (exp (gen) (mul y x alpha))))
    ((recv (cat (exp (gen) (mul y-0 alpha)) (mul y x (rec y-0))))
      (send (cat (exp (gen) (mul y-0 alpha)) (mul y x (rec y-0)))))
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (recv
        (enc a-0 b-0 group (exp (gen) (mul y-1 alpha-0)) (privk a-0)))
      (send
        (enc a-0 b-0 group (exp (gen) (mul y-0 alpha))
          (exp (gen) (mul y-1 alpha-0)) (privk b-0))))
    ((recv (enc "Group id" group-0 (exp (gen) alpha-0) k-magic-0))
      (recv
        (enc a-1 b-1 group-0 (exp (gen) (mul x-0 alpha-0)) (privk a-1)))
      (send
        (enc a-1 b-1 group-0 (exp (gen) (mul y-1 alpha-0))
          (exp (gen) (mul x-0 alpha-0)) (privk b-1))))
    ((send (enc "Group id" group-0 (exp (gen) alpha-0) k-magic-0))))
  (label 99)
  (parent 54)
  (unrealized (3 0) (4 0) (6 1))
  (aborted)
  (comment "aborted"))

(defskeleton dh_sig2
  (vars (k-magic k-magic-0 skey) (n group group-0 text)
    (a b a-0 b-0 name) (y x y-0 alpha alpha-0 rndx))
  (defstrand init 5 (k-magic k-magic) (n n) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (x x) (y y))
  (defstrand group-init 1 (k-magic k-magic) (group group) (alpha alpha))
  (defstrand resp 3 (k-magic k-magic) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (y y) (x x))
  (deflistener (exp (gen) (mul y x alpha)))
  (deflistener (cat (exp (gen) (mul y-0 alpha)) (mul y x (rec y-0))))
  (defstrand resp 3 (k-magic k-magic) (group group) (a a-0) (b b-0)
    (g (exp (gen) alpha)) (y y-0) (x (one)))
  (deflistener (cat (exp (gen) alpha-0) (mul alpha (rec alpha-0))))
  (defstrand group-init 1 (k-magic k-magic-0) (group group-0)
    (alpha alpha-0))
  (precedes ((0 1) (2 0)) ((1 0) (0 0)) ((1 0) (6 0)) ((2 2) (0 2))
    ((2 2) (5 0)) ((3 1) (0 4)) ((4 1) (3 0)) ((5 2) (4 0))
    ((6 1) (5 1)) ((7 0) (6 0)))
  (non-orig k-magic (privk a) (privk b))
  (uniq-gen n y x y-0 alpha alpha-0)
  (absent (y x) (y-0 (one)))
  (precur (4 0) (6 0))
  (operation nonce-test (added-strand group-init 1) (exp (gen) alpha-0)
    (6 0))
  (traces
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (send (enc a b group (exp (gen) (mul x alpha)) (privk a)))
      (recv
        (enc a b group (exp (gen) (mul y alpha))
          (exp (gen) (mul x alpha)) (privk b)))
      (send (enc n (exp (gen) (mul y x alpha)))) (recv n))
    ((send (enc "Group id" group (exp (gen) alpha) k-magic)))
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (recv (enc a b group (exp (gen) (mul x alpha)) (privk a)))
      (send
        (enc a b group (exp (gen) (mul y alpha))
          (exp (gen) (mul x alpha)) (privk b))))
    ((recv (exp (gen) (mul y x alpha)))
      (send (exp (gen) (mul y x alpha))))
    ((recv (cat (exp (gen) (mul y-0 alpha)) (mul y x (rec y-0))))
      (send (cat (exp (gen) (mul y-0 alpha)) (mul y x (rec y-0)))))
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (recv (enc a-0 b-0 group (exp (gen) alpha) (privk a-0)))
      (send
        (enc a-0 b-0 group (exp (gen) (mul y-0 alpha)) (exp (gen) alpha)
          (privk b-0))))
    ((recv (cat (exp (gen) alpha-0) (mul alpha (rec alpha-0))))
      (send (cat (exp (gen) alpha-0) (mul alpha (rec alpha-0)))))
    ((send (enc "Group id" group-0 (exp (gen) alpha-0) k-magic-0))))
  (label 193)
  (parent 95)
  (unrealized (3 0) (4 0) (5 1) (6 0))
  (aborted)
  (comment "aborted"))

(defskeleton dh_sig2
  (vars (k-magic skey) (n group text) (a b a-0 b-0 name)
    (y x y-0 alpha rndx))
  (defstrand init 5 (k-magic k-magic) (n n) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (x x) (y y))
  (defstrand group-init 1 (k-magic k-magic) (group group) (alpha alpha))
  (defstrand resp 3 (k-magic k-magic) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (y y) (x x))
  (deflistener (exp (gen) (mul y x alpha)))
  (deflistener (cat (exp (gen) (mul y-0 alpha)) (mul y x (rec y-0))))
  (defstrand resp 3 (k-magic k-magic) (group group) (a a-0) (b b-0)
    (g (exp (gen) alpha)) (y y-0) (x (one)))
  (deflistener (cat (exp (gen) alpha) (one)))
  (precedes ((0 1) (2 0)) ((1 0) (0 0)) ((1 0) (6 0)) ((2 2) (0 2))
    ((2 2) (5 0)) ((3 1) (0 4)) ((4 1) (3 0)) ((5 2) (4 0))
    ((6 1) (5 1)))
  (non-orig k-magic (privk a) (privk b))
  (uniq-gen n y x y-0 alpha)
  (absent (y x) (y-0 (one)))
  (precur (4 0) (6 0))
  (operation nonce-test (displaced 7 1 group-init 1) (exp (gen) alpha-0)
    (6 0))
  (traces
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (send (enc a b group (exp (gen) (mul x alpha)) (privk a)))
      (recv
        (enc a b group (exp (gen) (mul y alpha))
          (exp (gen) (mul x alpha)) (privk b)))
      (send (enc n (exp (gen) (mul y x alpha)))) (recv n))
    ((send (enc "Group id" group (exp (gen) alpha) k-magic)))
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (recv (enc a b group (exp (gen) (mul x alpha)) (privk a)))
      (send
        (enc a b group (exp (gen) (mul y alpha))
          (exp (gen) (mul x alpha)) (privk b))))
    ((recv (exp (gen) (mul y x alpha)))
      (send (exp (gen) (mul y x alpha))))
    ((recv (cat (exp (gen) (mul y-0 alpha)) (mul y x (rec y-0))))
      (send (cat (exp (gen) (mul y-0 alpha)) (mul y x (rec y-0)))))
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (recv (enc a-0 b-0 group (exp (gen) alpha) (privk a-0)))
      (send
        (enc a-0 b-0 group (exp (gen) (mul y-0 alpha)) (exp (gen) alpha)
          (privk b-0))))
    ((recv (cat (exp (gen) alpha) (one)))
      (send (cat (exp (gen) alpha) (one)))))
  (label 194)
  (parent 95)
  (unrealized (3 0) (4 0) (6 0))
  (aborted)
  (comment "aborted"))

(defskeleton dh_sig2
  (vars (k-magic skey) (n group text) (a b a-0 b-0 name)
    (y x y-0 alpha rndx))
  (defstrand init 5 (k-magic k-magic) (n n) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (x x) (y y))
  (defstrand group-init 1 (k-magic k-magic) (group group) (alpha alpha))
  (defstrand resp 3 (k-magic k-magic) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (y y) (x x))
  (deflistener (exp (gen) (mul y x alpha)))
  (deflistener (cat (exp (gen) (mul y-0 alpha)) (mul y x (rec y-0))))
  (defstrand resp 3 (k-magic k-magic) (group group) (a a-0) (b b-0)
    (g (exp (gen) alpha)) (y y-0) (x (one)))
  (deflistener (cat (gen) alpha))
  (precedes ((0 1) (2 0)) ((1 0) (0 0)) ((1 0) (6 0)) ((2 2) (0 2))
    ((2 2) (5 0)) ((3 1) (0 4)) ((4 1) (3 0)) ((5 2) (4 0))
    ((6 1) (5 1)))
  (non-orig k-magic (privk a) (privk b))
  (uniq-gen n y x y-0 alpha)
  (absent (y x) (y-0 (one)))
  (precur (4 0) (6 0))
  (operation nonce-test (contracted (alpha-0 alpha) (w alpha)) (gen)
    (6 0))
  (traces
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (send (enc a b group (exp (gen) (mul x alpha)) (privk a)))
      (recv
        (enc a b group (exp (gen) (mul y alpha))
          (exp (gen) (mul x alpha)) (privk b)))
      (send (enc n (exp (gen) (mul y x alpha)))) (recv n))
    ((send (enc "Group id" group (exp (gen) alpha) k-magic)))
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (recv (enc a b group (exp (gen) (mul x alpha)) (privk a)))
      (send
        (enc a b group (exp (gen) (mul y alpha))
          (exp (gen) (mul x alpha)) (privk b))))
    ((recv (exp (gen) (mul y x alpha)))
      (send (exp (gen) (mul y x alpha))))
    ((recv (cat (exp (gen) (mul y-0 alpha)) (mul y x (rec y-0))))
      (send (cat (exp (gen) (mul y-0 alpha)) (mul y x (rec y-0)))))
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (recv (enc a-0 b-0 group (exp (gen) alpha) (privk a-0)))
      (send
        (enc a-0 b-0 group (exp (gen) (mul y-0 alpha)) (exp (gen) alpha)
          (privk b-0))))
    ((recv (cat (gen) alpha)) (send (cat (gen) alpha))))
  (label 195)
  (parent 95)
  (unrealized (3 0) (4 0) (6 0))
  (aborted)
  (comment "aborted"))

(defskeleton dh_sig2
  (vars (k-magic k-magic-0 skey) (n group group-0 text)
    (a b a-0 b-0 a-1 b-1 name) (y x y-0 alpha rndx) (w expt) (x-0 rndx))
  (defstrand init 5 (k-magic k-magic) (n n) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (x x) (y y))
  (defstrand group-init 1 (k-magic k-magic) (group group) (alpha alpha))
  (defstrand resp 3 (k-magic k-magic) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (y y) (x x))
  (deflistener (exp (gen) (mul y x alpha)))
  (deflistener (cat (exp (gen) (mul y-0 alpha)) (mul y x (rec y-0))))
  (defstrand resp 3 (k-magic k-magic) (group group) (a a-0) (b b-0)
    (g (exp (gen) alpha)) (y y-0) (x (one)))
  (deflistener (cat (exp (gen) (mul alpha (rec w))) w))
  (defstrand init 2 (k-magic k-magic-0) (group group-0) (a a-1) (b b-1)
    (g (exp (gen) (mul alpha (rec w) (rec x-0)))) (x x-0))
  (precedes ((0 1) (2 0)) ((1 0) (0 0)) ((1 0) (7 0)) ((2 2) (0 2))
    ((2 2) (5 0)) ((3 1) (0 4)) ((4 1) (3 0)) ((5 2) (4 0))
    ((6 1) (5 1)) ((7 1) (6 0)))
  (non-orig k-magic k-magic-0 (privk a) (privk b))
  (uniq-gen n y x y-0 alpha x-0)
  (absent (y x) (y-0 (one)))
  (precur (4 0) (6 0))
  (operation nonce-test (added-strand init 2)
    (exp (gen) (mul alpha (rec w))) (6 0))
  (traces
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (send (enc a b group (exp (gen) (mul x alpha)) (privk a)))
      (recv
        (enc a b group (exp (gen) (mul y alpha))
          (exp (gen) (mul x alpha)) (privk b)))
      (send (enc n (exp (gen) (mul y x alpha)))) (recv n))
    ((send (enc "Group id" group (exp (gen) alpha) k-magic)))
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (recv (enc a b group (exp (gen) (mul x alpha)) (privk a)))
      (send
        (enc a b group (exp (gen) (mul y alpha))
          (exp (gen) (mul x alpha)) (privk b))))
    ((recv (exp (gen) (mul y x alpha)))
      (send (exp (gen) (mul y x alpha))))
    ((recv (cat (exp (gen) (mul y-0 alpha)) (mul y x (rec y-0))))
      (send (cat (exp (gen) (mul y-0 alpha)) (mul y x (rec y-0)))))
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (recv (enc a-0 b-0 group (exp (gen) alpha) (privk a-0)))
      (send
        (enc a-0 b-0 group (exp (gen) (mul y-0 alpha)) (exp (gen) alpha)
          (privk b-0))))
    ((recv (cat (exp (gen) (mul alpha (rec w))) w))
      (send (cat (exp (gen) (mul alpha (rec w))) w)))
    ((recv
       (enc "Group id" group-0 (exp (gen) (mul alpha (rec w) (rec x-0)))
         k-magic-0))
      (send
        (enc a-1 b-1 group-0 (exp (gen) (mul alpha (rec w)))
          (privk a-1)))))
  (label 196)
  (parent 95)
  (unrealized (3 0) (4 0) (7 0))
  (aborted)
  (comment "aborted"))

(defskeleton dh_sig2
  (vars (k-magic skey) (n group text) (a b a-0 b-0 name)
    (y y-0 alpha x rndx))
  (defstrand init 5 (k-magic k-magic) (n n) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (x x) (y y))
  (defstrand group-init 1 (k-magic k-magic) (group group) (alpha alpha))
  (defstrand resp 3 (k-magic k-magic) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (y y) (x x))
  (deflistener (exp (gen) (mul y alpha x)))
  (deflistener (cat (exp (gen) (mul y-0 alpha)) (mul y (rec y-0) x)))
  (defstrand resp 3 (k-magic k-magic) (group group) (a a-0) (b b-0)
    (g (exp (gen) alpha)) (y y-0) (x (one)))
  (deflistener (cat (exp (gen) (mul alpha x)) (rec x)))
  (precedes ((0 1) (2 0)) ((0 1) (6 0)) ((1 0) (0 0)) ((2 2) (0 2))
    ((2 2) (5 0)) ((3 1) (0 4)) ((4 1) (3 0)) ((5 2) (4 0))
    ((6 1) (5 1)))
  (non-orig k-magic (privk a) (privk b))
  (uniq-gen n y y-0 alpha x)
  (absent (y x) (y-0 (one)))
  (precur (4 0) (6 0))
  (operation nonce-test (displaced 7 0 init 2)
    (exp (gen) (mul alpha (rec w))) (6 0))
  (traces
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (send (enc a b group (exp (gen) (mul alpha x)) (privk a)))
      (recv
        (enc a b group (exp (gen) (mul y alpha))
          (exp (gen) (mul alpha x)) (privk b)))
      (send (enc n (exp (gen) (mul y alpha x)))) (recv n))
    ((send (enc "Group id" group (exp (gen) alpha) k-magic)))
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (recv (enc a b group (exp (gen) (mul alpha x)) (privk a)))
      (send
        (enc a b group (exp (gen) (mul y alpha))
          (exp (gen) (mul alpha x)) (privk b))))
    ((recv (exp (gen) (mul y alpha x)))
      (send (exp (gen) (mul y alpha x))))
    ((recv (cat (exp (gen) (mul y-0 alpha)) (mul y (rec y-0) x)))
      (send (cat (exp (gen) (mul y-0 alpha)) (mul y (rec y-0) x))))
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (recv (enc a-0 b-0 group (exp (gen) alpha) (privk a-0)))
      (send
        (enc a-0 b-0 group (exp (gen) (mul y-0 alpha)) (exp (gen) alpha)
          (privk b-0))))
    ((recv (cat (exp (gen) (mul alpha x)) (rec x)))
      (send (cat (exp (gen) (mul alpha x)) (rec x)))))
  (label 197)
  (parent 95)
  (unrealized (3 0) (4 0) (5 1) (6 0))
  (aborted)
  (comment "aborted"))

(defskeleton dh_sig2
  (vars (k-magic skey) (n group text) (a b a-0 b-0 name)
    (y alpha x y-0 rndx))
  (defstrand init 5 (k-magic k-magic) (n n) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (x x) (y y-0))
  (defstrand group-init 1 (k-magic k-magic) (group group) (alpha alpha))
  (defstrand resp 3 (k-magic k-magic) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (y y-0) (x x))
  (deflistener (exp (gen) (mul alpha x y-0)))
  (deflistener (cat (exp (gen) (mul y alpha)) (mul (rec y) x y-0)))
  (defstrand resp 3 (k-magic k-magic) (group group) (a a-0) (b b-0)
    (g (exp (gen) alpha)) (y y) (x (one)))
  (deflistener (cat (exp (gen) (mul alpha y-0)) (rec y-0)))
  (precedes ((0 1) (2 0)) ((1 0) (0 0)) ((2 2) (0 2)) ((2 2) (5 0))
    ((2 2) (6 0)) ((3 1) (0 4)) ((4 1) (3 0)) ((5 2) (4 0))
    ((6 1) (5 1)))
  (non-orig k-magic (privk a) (privk b))
  (uniq-gen n y alpha x y-0)
  (absent (y (one)) (y-0 x))
  (precur (4 0) (6 0))
  (operation nonce-test (displaced 7 2 resp 3)
    (exp (gen) (mul alpha (rec w))) (6 0))
  (traces
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (send (enc a b group (exp (gen) (mul alpha x)) (privk a)))
      (recv
        (enc a b group (exp (gen) (mul alpha y-0))
          (exp (gen) (mul alpha x)) (privk b)))
      (send (enc n (exp (gen) (mul alpha x y-0)))) (recv n))
    ((send (enc "Group id" group (exp (gen) alpha) k-magic)))
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (recv (enc a b group (exp (gen) (mul alpha x)) (privk a)))
      (send
        (enc a b group (exp (gen) (mul alpha y-0))
          (exp (gen) (mul alpha x)) (privk b))))
    ((recv (exp (gen) (mul alpha x y-0)))
      (send (exp (gen) (mul alpha x y-0))))
    ((recv (cat (exp (gen) (mul y alpha)) (mul (rec y) x y-0)))
      (send (cat (exp (gen) (mul y alpha)) (mul (rec y) x y-0))))
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (recv (enc a-0 b-0 group (exp (gen) alpha) (privk a-0)))
      (send
        (enc a-0 b-0 group (exp (gen) (mul y alpha)) (exp (gen) alpha)
          (privk b-0))))
    ((recv (cat (exp (gen) (mul alpha y-0)) (rec y-0)))
      (send (cat (exp (gen) (mul alpha y-0)) (rec y-0)))))
  (label 198)
  (parent 95)
  (unrealized (3 0) (4 0) (5 1) (6 0))
  (aborted)
  (comment "aborted"))

(defskeleton dh_sig2
  (vars (k-magic k-magic-0 skey) (n group group-0 text)
    (a b a-0 b-0 a-1 b-1 name) (y x y-0 alpha rndx) (w expt) (y-1 rndx)
    (x-0 expt))
  (defstrand init 5 (k-magic k-magic) (n n) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (x x) (y y))
  (defstrand group-init 1 (k-magic k-magic) (group group) (alpha alpha))
  (defstrand resp 3 (k-magic k-magic) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (y y) (x x))
  (deflistener (exp (gen) (mul y x alpha)))
  (deflistener (cat (exp (gen) (mul y-0 alpha)) (mul y x (rec y-0))))
  (defstrand resp 3 (k-magic k-magic) (group group) (a a-0) (b b-0)
    (g (exp (gen) alpha)) (y y-0) (x (one)))
  (deflistener (cat (exp (gen) (mul alpha (rec w))) w))
  (defstrand resp 3 (k-magic k-magic-0) (group group-0) (a a-1) (b b-1)
    (g (exp (gen) (mul alpha (rec w) (rec y-1)))) (y y-1) (x x-0))
  (precedes ((0 1) (2 0)) ((1 0) (0 0)) ((1 0) (7 0)) ((2 2) (0 2))
    ((2 2) (5 0)) ((3 1) (0 4)) ((4 1) (3 0)) ((5 2) (4 0))
    ((6 1) (5 1)) ((7 2) (6 0)))
  (non-orig k-magic k-magic-0 (privk a) (privk b))
  (uniq-gen n y x y-0 alpha y-1)
  (absent (y x) (y-0 (one)) (y-1 x-0))
  (precur (4 0) (6 0))
  (operation nonce-test (added-strand resp 3)
    (exp (gen) (mul alpha (rec w))) (6 0))
  (traces
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (send (enc a b group (exp (gen) (mul x alpha)) (privk a)))
      (recv
        (enc a b group (exp (gen) (mul y alpha))
          (exp (gen) (mul x alpha)) (privk b)))
      (send (enc n (exp (gen) (mul y x alpha)))) (recv n))
    ((send (enc "Group id" group (exp (gen) alpha) k-magic)))
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (recv (enc a b group (exp (gen) (mul x alpha)) (privk a)))
      (send
        (enc a b group (exp (gen) (mul y alpha))
          (exp (gen) (mul x alpha)) (privk b))))
    ((recv (exp (gen) (mul y x alpha)))
      (send (exp (gen) (mul y x alpha))))
    ((recv (cat (exp (gen) (mul y-0 alpha)) (mul y x (rec y-0))))
      (send (cat (exp (gen) (mul y-0 alpha)) (mul y x (rec y-0)))))
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (recv (enc a-0 b-0 group (exp (gen) alpha) (privk a-0)))
      (send
        (enc a-0 b-0 group (exp (gen) (mul y-0 alpha)) (exp (gen) alpha)
          (privk b-0))))
    ((recv (cat (exp (gen) (mul alpha (rec w))) w))
      (send (cat (exp (gen) (mul alpha (rec w))) w)))
    ((recv
       (enc "Group id" group-0 (exp (gen) (mul alpha (rec w) (rec y-1)))
         k-magic-0))
      (recv
        (enc a-1 b-1 group-0
          (exp (gen) (mul alpha (rec w) (rec y-1) x-0)) (privk a-1)))
      (send
        (enc a-1 b-1 group-0 (exp (gen) (mul alpha (rec w)))
          (exp (gen) (mul alpha (rec w) (rec y-1) x-0)) (privk b-1)))))
  (label 199)
  (parent 95)
  (unrealized (3 0) (4 0) (7 0) (7 1))
  (aborted)
  (comment "aborted"))

(defskeleton dh_sig2
  (vars (k-magic skey) (n group text) (a b a-0 b-0 a-1 b-1 name)
    (y y-0 y-1 alpha x rndx))
  (defstrand init 5 (k-magic k-magic) (n n) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (x x) (y y))
  (defstrand group-init 1 (k-magic k-magic) (group group) (alpha alpha))
  (defstrand resp 3 (k-magic k-magic) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (y y) (x x))
  (deflistener (exp (gen) (mul y alpha x)))
  (deflistener (cat (exp (gen) (mul y-0 alpha)) (mul y (rec y-0) x)))
  (defstrand resp 3 (k-magic k-magic) (group group) (a a-0) (b b-0)
    (g (exp (gen) alpha)) (y y-0) (x y-1))
  (defstrand resp 3 (k-magic k-magic) (group group) (a a-1) (b b-1)
    (g (exp (gen) alpha)) (y y-1) (x x))
  (precedes ((0 1) (2 0)) ((0 1) (6 1)) ((1 0) (0 0)) ((1 0) (6 0))
    ((2 2) (0 2)) ((2 2) (5 0)) ((3 1) (0 4)) ((4 1) (3 0))
    ((5 2) (4 0)) ((6 2) (5 1)))
  (non-orig k-magic (privk a) (privk b))
  (uniq-gen n y y-0 y-1 alpha x)
  (absent (y x) (y-0 y-1) (y-1 x))
  (precur (4 0))
  (operation nonce-test (displaced 7 0 init 2)
    (exp (gen) (mul x-0 alpha)) (6 1))
  (traces
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (send (enc a b group (exp (gen) (mul alpha x)) (privk a)))
      (recv
        (enc a b group (exp (gen) (mul y alpha))
          (exp (gen) (mul alpha x)) (privk b)))
      (send (enc n (exp (gen) (mul y alpha x)))) (recv n))
    ((send (enc "Group id" group (exp (gen) alpha) k-magic)))
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (recv (enc a b group (exp (gen) (mul alpha x)) (privk a)))
      (send
        (enc a b group (exp (gen) (mul y alpha))
          (exp (gen) (mul alpha x)) (privk b))))
    ((recv (exp (gen) (mul y alpha x)))
      (send (exp (gen) (mul y alpha x))))
    ((recv (cat (exp (gen) (mul y-0 alpha)) (mul y (rec y-0) x)))
      (send (cat (exp (gen) (mul y-0 alpha)) (mul y (rec y-0) x))))
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (recv (enc a-0 b-0 group (exp (gen) (mul y-1 alpha)) (privk a-0)))
      (send
        (enc a-0 b-0 group (exp (gen) (mul y-0 alpha))
          (exp (gen) (mul y-1 alpha)) (privk b-0))))
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (recv (enc a-1 b-1 group (exp (gen) (mul alpha x)) (privk a-1)))
      (send
        (enc a-1 b-1 group (exp (gen) (mul y-1 alpha))
          (exp (gen) (mul alpha x)) (privk b-1)))))
  (label 200)
  (parent 98)
  (unrealized (3 0) (4 0))
  (aborted)
  (comment "aborted"))

(defskeleton dh_sig2
  (vars (k-magic k-magic-0 skey) (n group group-0 text)
    (a b a-0 b-0 a-1 b-1 name) (y x y-0 y-1 alpha alpha-0 rndx))
  (defstrand init 5 (k-magic k-magic) (n n) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (x x) (y y))
  (defstrand group-init 1 (k-magic k-magic) (group group) (alpha alpha))
  (defstrand resp 3 (k-magic k-magic) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (y y) (x x))
  (deflistener (exp (gen) (mul y x alpha)))
  (deflistener (cat (exp (gen) (mul y-0 alpha)) (mul y x (rec y-0))))
  (defstrand resp 3 (k-magic k-magic) (group group) (a a-0) (b b-0)
    (g (exp (gen) alpha)) (y y-0) (x y-1))
  (defstrand resp 3 (k-magic k-magic) (group group) (a a-1) (b b-1)
    (g (exp (gen) alpha)) (y y-1) (x (mul (rec alpha) alpha-0)))
  (defstrand group-init 1 (k-magic k-magic-0) (group group-0)
    (alpha alpha-0))
  (precedes ((0 1) (2 0)) ((1 0) (0 0)) ((1 0) (6 0)) ((2 2) (0 2))
    ((2 2) (5 0)) ((3 1) (0 4)) ((4 1) (3 0)) ((5 2) (4 0))
    ((6 2) (5 1)) ((7 0) (6 1)))
  (non-orig k-magic (privk a) (privk b))
  (uniq-gen n y x y-0 y-1 alpha alpha-0)
  (absent (y x) (y-0 y-1) (y-1 (mul (rec alpha) alpha-0)))
  (precur (4 0))
  (operation nonce-test (added-strand group-init 1) (exp (gen) alpha-0)
    (6 1))
  (traces
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (send (enc a b group (exp (gen) (mul x alpha)) (privk a)))
      (recv
        (enc a b group (exp (gen) (mul y alpha))
          (exp (gen) (mul x alpha)) (privk b)))
      (send (enc n (exp (gen) (mul y x alpha)))) (recv n))
    ((send (enc "Group id" group (exp (gen) alpha) k-magic)))
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (recv (enc a b group (exp (gen) (mul x alpha)) (privk a)))
      (send
        (enc a b group (exp (gen) (mul y alpha))
          (exp (gen) (mul x alpha)) (privk b))))
    ((recv (exp (gen) (mul y x alpha)))
      (send (exp (gen) (mul y x alpha))))
    ((recv (cat (exp (gen) (mul y-0 alpha)) (mul y x (rec y-0))))
      (send (cat (exp (gen) (mul y-0 alpha)) (mul y x (rec y-0)))))
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (recv (enc a-0 b-0 group (exp (gen) (mul y-1 alpha)) (privk a-0)))
      (send
        (enc a-0 b-0 group (exp (gen) (mul y-0 alpha))
          (exp (gen) (mul y-1 alpha)) (privk b-0))))
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (recv (enc a-1 b-1 group (exp (gen) alpha-0) (privk a-1)))
      (send
        (enc a-1 b-1 group (exp (gen) (mul y-1 alpha))
          (exp (gen) alpha-0) (privk b-1))))
    ((send (enc "Group id" group-0 (exp (gen) alpha-0) k-magic-0))))
  (label 201)
  (parent 98)
  (unrealized (3 0) (4 0))
  (aborted)
  (comment "aborted"))

(defskeleton dh_sig2
  (vars (k-magic skey) (n group text) (a b a-0 b-0 a-1 b-1 name)
    (y x y-0 y-1 alpha rndx))
  (defstrand init 5 (k-magic k-magic) (n n) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (x x) (y y))
  (defstrand group-init 1 (k-magic k-magic) (group group) (alpha alpha))
  (defstrand resp 3 (k-magic k-magic) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (y y) (x x))
  (deflistener (exp (gen) (mul y x alpha)))
  (deflistener (cat (exp (gen) (mul y-0 alpha)) (mul y x (rec y-0))))
  (defstrand resp 3 (k-magic k-magic) (group group) (a a-0) (b b-0)
    (g (exp (gen) alpha)) (y y-0) (x y-1))
  (defstrand resp 3 (k-magic k-magic) (group group) (a a-1) (b b-1)
    (g (exp (gen) alpha)) (y y-1) (x (rec alpha)))
  (precedes ((0 1) (2 0)) ((1 0) (0 0)) ((1 0) (6 0)) ((2 2) (0 2))
    ((2 2) (5 0)) ((3 1) (0 4)) ((4 1) (3 0)) ((5 2) (4 0))
    ((6 2) (5 1)))
  (non-orig k-magic (privk a) (privk b))
  (uniq-gen n y x y-0 y-1 alpha)
  (absent (y x) (y-0 y-1) (y-1 (rec alpha)))
  (precur (4 0))
  (operation nonce-test (contracted (x-0 (rec alpha)) (alpha-0 alpha))
    (gen) (6 1))
  (traces
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (send (enc a b group (exp (gen) (mul x alpha)) (privk a)))
      (recv
        (enc a b group (exp (gen) (mul y alpha))
          (exp (gen) (mul x alpha)) (privk b)))
      (send (enc n (exp (gen) (mul y x alpha)))) (recv n))
    ((send (enc "Group id" group (exp (gen) alpha) k-magic)))
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (recv (enc a b group (exp (gen) (mul x alpha)) (privk a)))
      (send
        (enc a b group (exp (gen) (mul y alpha))
          (exp (gen) (mul x alpha)) (privk b))))
    ((recv (exp (gen) (mul y x alpha)))
      (send (exp (gen) (mul y x alpha))))
    ((recv (cat (exp (gen) (mul y-0 alpha)) (mul y x (rec y-0))))
      (send (cat (exp (gen) (mul y-0 alpha)) (mul y x (rec y-0)))))
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (recv (enc a-0 b-0 group (exp (gen) (mul y-1 alpha)) (privk a-0)))
      (send
        (enc a-0 b-0 group (exp (gen) (mul y-0 alpha))
          (exp (gen) (mul y-1 alpha)) (privk b-0))))
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (recv (enc a-1 b-1 group (gen) (privk a-1)))
      (send
        (enc a-1 b-1 group (exp (gen) (mul y-1 alpha)) (gen)
          (privk b-1)))))
  (label 202)
  (parent 98)
  (unrealized (3 0) (4 0))
  (aborted)
  (comment "aborted"))

(defskeleton dh_sig2
  (vars (k-magic skey) (n group text) (a b a-0 b-0 a-1 b-1 name)
    (y x y-0 y-1 alpha rndx))
  (defstrand init 5 (k-magic k-magic) (n n) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (x x) (y y))
  (defstrand group-init 1 (k-magic k-magic) (group group) (alpha alpha))
  (defstrand resp 3 (k-magic k-magic) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (y y) (x x))
  (deflistener (exp (gen) (mul y x alpha)))
  (deflistener (cat (exp (gen) (mul y-0 alpha)) (mul y x (rec y-0))))
  (defstrand resp 3 (k-magic k-magic) (group group) (a a-0) (b b-0)
    (g (exp (gen) alpha)) (y y-0) (x y-1))
  (defstrand resp 3 (k-magic k-magic) (group group) (a a-1) (b b-1)
    (g (exp (gen) alpha)) (y y-1) (x (one)))
  (precedes ((0 1) (2 0)) ((1 0) (0 0)) ((1 0) (6 0)) ((2 2) (0 2))
    ((2 2) (5 0)) ((3 1) (0 4)) ((4 1) (3 0)) ((5 2) (4 0))
    ((6 2) (5 1)))
  (non-orig k-magic (privk a) (privk b))
  (uniq-gen n y x y-0 y-1 alpha)
  (absent (y x) (y-0 y-1) (y-1 (one)))
  (precur (4 0))
  (operation nonce-test (displaced 7 1 group-init 1) (exp (gen) alpha-0)
    (6 1))
  (traces
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (send (enc a b group (exp (gen) (mul x alpha)) (privk a)))
      (recv
        (enc a b group (exp (gen) (mul y alpha))
          (exp (gen) (mul x alpha)) (privk b)))
      (send (enc n (exp (gen) (mul y x alpha)))) (recv n))
    ((send (enc "Group id" group (exp (gen) alpha) k-magic)))
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (recv (enc a b group (exp (gen) (mul x alpha)) (privk a)))
      (send
        (enc a b group (exp (gen) (mul y alpha))
          (exp (gen) (mul x alpha)) (privk b))))
    ((recv (exp (gen) (mul y x alpha)))
      (send (exp (gen) (mul y x alpha))))
    ((recv (cat (exp (gen) (mul y-0 alpha)) (mul y x (rec y-0))))
      (send (cat (exp (gen) (mul y-0 alpha)) (mul y x (rec y-0)))))
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (recv (enc a-0 b-0 group (exp (gen) (mul y-1 alpha)) (privk a-0)))
      (send
        (enc a-0 b-0 group (exp (gen) (mul y-0 alpha))
          (exp (gen) (mul y-1 alpha)) (privk b-0))))
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (recv (enc a-1 b-1 group (exp (gen) alpha) (privk a-1)))
      (send
        (enc a-1 b-1 group (exp (gen) (mul y-1 alpha)) (exp (gen) alpha)
          (privk b-1)))))
  (label 203)
  (parent 98)
  (unrealized (3 0) (4 0) (6 1))
  (aborted)
  (comment "aborted"))

(defskeleton dh_sig2
  (vars (k-magic skey) (n group text) (a b a-0 b-0 a-1 b-1 name)
    (y y-0 alpha x y-1 rndx))
  (defstrand init 5 (k-magic k-magic) (n n) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (x x) (y y-1))
  (defstrand group-init 1 (k-magic k-magic) (group group) (alpha alpha))
  (defstrand resp 3 (k-magic k-magic) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (y y-1) (x x))
  (deflistener (exp (gen) (mul alpha x y-1)))
  (deflistener (cat (exp (gen) (mul y alpha)) (mul (rec y) x y-1)))
  (defstrand resp 3 (k-magic k-magic) (group group) (a a-0) (b b-0)
    (g (exp (gen) alpha)) (y y) (x y-0))
  (defstrand resp 3 (k-magic k-magic) (group group) (a a-1) (b b-1)
    (g (exp (gen) alpha)) (y y-0) (x y-1))
  (precedes ((0 1) (2 0)) ((1 0) (0 0)) ((1 0) (6 0)) ((2 2) (0 2))
    ((2 2) (5 0)) ((2 2) (6 1)) ((3 1) (0 4)) ((4 1) (3 0))
    ((5 2) (4 0)) ((6 2) (5 1)))
  (non-orig k-magic (privk a) (privk b))
  (uniq-gen n y y-0 alpha x y-1)
  (absent (y y-0) (y-0 y-1) (y-1 x))
  (precur (4 0))
  (operation nonce-test (displaced 7 2 resp 3)
    (exp (gen) (mul x-0 alpha)) (6 1))
  (traces
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (send (enc a b group (exp (gen) (mul alpha x)) (privk a)))
      (recv
        (enc a b group (exp (gen) (mul alpha y-1))
          (exp (gen) (mul alpha x)) (privk b)))
      (send (enc n (exp (gen) (mul alpha x y-1)))) (recv n))
    ((send (enc "Group id" group (exp (gen) alpha) k-magic)))
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (recv (enc a b group (exp (gen) (mul alpha x)) (privk a)))
      (send
        (enc a b group (exp (gen) (mul alpha y-1))
          (exp (gen) (mul alpha x)) (privk b))))
    ((recv (exp (gen) (mul alpha x y-1)))
      (send (exp (gen) (mul alpha x y-1))))
    ((recv (cat (exp (gen) (mul y alpha)) (mul (rec y) x y-1)))
      (send (cat (exp (gen) (mul y alpha)) (mul (rec y) x y-1))))
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (recv (enc a-0 b-0 group (exp (gen) (mul y-0 alpha)) (privk a-0)))
      (send
        (enc a-0 b-0 group (exp (gen) (mul y alpha))
          (exp (gen) (mul y-0 alpha)) (privk b-0))))
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (recv (enc a-1 b-1 group (exp (gen) (mul alpha y-1)) (privk a-1)))
      (send
        (enc a-1 b-1 group (exp (gen) (mul y-0 alpha))
          (exp (gen) (mul alpha y-1)) (privk b-1)))))
  (label 204)
  (parent 98)
  (unrealized (3 0) (4 0))
  (aborted)
  (comment "aborted"))

(defskeleton dh_sig2
  (vars (k-magic k-magic-0 skey) (n group group-0 text)
    (a b a-0 b-0 a-1 b-1 a-2 b-2 name) (y x y-0 rndx) (x-0 expt)
    (y-1 alpha x-1 rndx))
  (defstrand init 5 (k-magic k-magic) (n n) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (x x) (y y))
  (defstrand group-init 1 (k-magic k-magic) (group group) (alpha alpha))
  (defstrand resp 3 (k-magic k-magic) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (y y) (x x))
  (deflistener (exp (gen) (mul y x alpha)))
  (deflistener (cat (exp (gen) (mul y-0 alpha)) (mul y x (rec y-0))))
  (defstrand resp 3 (k-magic k-magic) (group group) (a a-0) (b b-0)
    (g (exp (gen) alpha)) (y y-0) (x y-1))
  (defstrand resp 3 (k-magic k-magic) (group group) (a a-1) (b b-1)
    (g (exp (gen) alpha)) (y y-1) (x x-0))
  (defstrand init 2 (k-magic k-magic-0) (group group-0) (a a-2) (b b-2)
    (g (exp (gen) (mul x-0 alpha (rec x-1)))) (x x-1))
  (precedes ((0 1) (2 0)) ((1 0) (0 0)) ((1 0) (6 0)) ((1 0) (7 0))
    ((2 2) (0 2)) ((2 2) (5 0)) ((3 1) (0 4)) ((4 1) (3 0))
    ((5 2) (4 0)) ((6 2) (5 1)) ((7 1) (6 1)))
  (non-orig k-magic k-magic-0 (privk a) (privk b))
  (uniq-gen n y x y-0 y-1 alpha x-1)
  (absent (y x) (y-0 y-1) (y-1 x-0))
  (precur (4 0))
  (operation nonce-test (added-strand init 2)
    (exp (gen) (mul x-0 alpha)) (6 1))
  (traces
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (send (enc a b group (exp (gen) (mul x alpha)) (privk a)))
      (recv
        (enc a b group (exp (gen) (mul y alpha))
          (exp (gen) (mul x alpha)) (privk b)))
      (send (enc n (exp (gen) (mul y x alpha)))) (recv n))
    ((send (enc "Group id" group (exp (gen) alpha) k-magic)))
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (recv (enc a b group (exp (gen) (mul x alpha)) (privk a)))
      (send
        (enc a b group (exp (gen) (mul y alpha))
          (exp (gen) (mul x alpha)) (privk b))))
    ((recv (exp (gen) (mul y x alpha)))
      (send (exp (gen) (mul y x alpha))))
    ((recv (cat (exp (gen) (mul y-0 alpha)) (mul y x (rec y-0))))
      (send (cat (exp (gen) (mul y-0 alpha)) (mul y x (rec y-0)))))
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (recv (enc a-0 b-0 group (exp (gen) (mul y-1 alpha)) (privk a-0)))
      (send
        (enc a-0 b-0 group (exp (gen) (mul y-0 alpha))
          (exp (gen) (mul y-1 alpha)) (privk b-0))))
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (recv (enc a-1 b-1 group (exp (gen) (mul x-0 alpha)) (privk a-1)))
      (send
        (enc a-1 b-1 group (exp (gen) (mul y-1 alpha))
          (exp (gen) (mul x-0 alpha)) (privk b-1))))
    ((recv
       (enc "Group id" group-0 (exp (gen) (mul x-0 alpha (rec x-1)))
         k-magic-0))
      (send
        (enc a-2 b-2 group-0 (exp (gen) (mul x-0 alpha)) (privk a-2)))))
  (label 205)
  (parent 98)
  (unrealized (3 0) (4 0) (7 0))
  (aborted)
  (comment "aborted"))

(defskeleton dh_sig2
  (vars (k-magic k-magic-0 skey) (n group group-0 text)
    (a b a-0 b-0 a-1 b-1 a-2 b-2 name) (y x y-0 rndx) (x-0 expt)
    (y-1 alpha y-2 rndx) (x-1 expt))
  (defstrand init 5 (k-magic k-magic) (n n) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (x x) (y y))
  (defstrand group-init 1 (k-magic k-magic) (group group) (alpha alpha))
  (defstrand resp 3 (k-magic k-magic) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (y y) (x x))
  (deflistener (exp (gen) (mul y x alpha)))
  (deflistener (cat (exp (gen) (mul y-0 alpha)) (mul y x (rec y-0))))
  (defstrand resp 3 (k-magic k-magic) (group group) (a a-0) (b b-0)
    (g (exp (gen) alpha)) (y y-0) (x y-1))
  (defstrand resp 3 (k-magic k-magic) (group group) (a a-1) (b b-1)
    (g (exp (gen) alpha)) (y y-1) (x x-0))
  (defstrand resp 3 (k-magic k-magic-0) (group group-0) (a a-2) (b b-2)
    (g (exp (gen) (mul x-0 alpha (rec y-2)))) (y y-2) (x x-1))
  (precedes ((0 1) (2 0)) ((1 0) (0 0)) ((1 0) (6 0)) ((1 0) (7 0))
    ((2 2) (0 2)) ((2 2) (5 0)) ((3 1) (0 4)) ((4 1) (3 0))
    ((5 2) (4 0)) ((6 2) (5 1)) ((7 2) (6 1)))
  (non-orig k-magic k-magic-0 (privk a) (privk b))
  (uniq-gen n y x y-0 y-1 alpha y-2)
  (absent (y x) (y-0 y-1) (y-1 x-0) (y-2 x-1))
  (precur (4 0))
  (operation nonce-test (added-strand resp 3)
    (exp (gen) (mul x-0 alpha)) (6 1))
  (traces
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (send (enc a b group (exp (gen) (mul x alpha)) (privk a)))
      (recv
        (enc a b group (exp (gen) (mul y alpha))
          (exp (gen) (mul x alpha)) (privk b)))
      (send (enc n (exp (gen) (mul y x alpha)))) (recv n))
    ((send (enc "Group id" group (exp (gen) alpha) k-magic)))
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (recv (enc a b group (exp (gen) (mul x alpha)) (privk a)))
      (send
        (enc a b group (exp (gen) (mul y alpha))
          (exp (gen) (mul x alpha)) (privk b))))
    ((recv (exp (gen) (mul y x alpha)))
      (send (exp (gen) (mul y x alpha))))
    ((recv (cat (exp (gen) (mul y-0 alpha)) (mul y x (rec y-0))))
      (send (cat (exp (gen) (mul y-0 alpha)) (mul y x (rec y-0)))))
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (recv (enc a-0 b-0 group (exp (gen) (mul y-1 alpha)) (privk a-0)))
      (send
        (enc a-0 b-0 group (exp (gen) (mul y-0 alpha))
          (exp (gen) (mul y-1 alpha)) (privk b-0))))
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (recv (enc a-1 b-1 group (exp (gen) (mul x-0 alpha)) (privk a-1)))
      (send
        (enc a-1 b-1 group (exp (gen) (mul y-1 alpha))
          (exp (gen) (mul x-0 alpha)) (privk b-1))))
    ((recv
       (enc "Group id" group-0 (exp (gen) (mul x-0 alpha (rec y-2)))
         k-magic-0))
      (recv
        (enc a-2 b-2 group-0 (exp (gen) (mul x-0 alpha (rec y-2) x-1))
          (privk a-2)))
      (send
        (enc a-2 b-2 group-0 (exp (gen) (mul x-0 alpha))
          (exp (gen) (mul x-0 alpha (rec y-2) x-1)) (privk b-2)))))
  (label 206)
  (parent 98)
  (unrealized (3 0) (4 0) (7 0) (7 1))
  (aborted)
  (comment "aborted"))

(defskeleton dh_sig2
  (vars (k-magic skey) (n group text) (a b a-0 b-0 a-1 b-1 name)
    (y x y-0 rndx) (x-0 expt) (y-1 alpha rndx) (w expt))
  (defstrand init 5 (k-magic k-magic) (n n) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (x x) (y y))
  (defstrand group-init 1 (k-magic k-magic) (group group) (alpha alpha))
  (defstrand resp 3 (k-magic k-magic) (group group) (a a) (b b)
    (g (exp (gen) alpha)) (y y) (x x))
  (deflistener (exp (gen) (mul y x alpha)))
  (deflistener (cat (exp (gen) (mul y-0 alpha)) (mul y x (rec y-0))))
  (defstrand resp 3 (k-magic k-magic) (group group) (a a-0) (b b-0)
    (g (exp (gen) alpha)) (y y-0) (x y-1))
  (defstrand resp 3 (k-magic k-magic) (group group) (a a-1) (b b-1)
    (g (exp (gen) alpha)) (y y-1) (x x-0))
  (deflistener (cat (exp (gen) (mul x-0 alpha (rec w))) w))
  (precedes ((0 1) (2 0)) ((1 0) (0 0)) ((1 0) (6 0)) ((1 0) (7 0))
    ((2 2) (0 2)) ((2 2) (5 0)) ((3 1) (0 4)) ((4 1) (3 0))
    ((5 2) (4 0)) ((6 2) (5 1)) ((7 1) (6 1)))
  (non-orig k-magic (privk a) (privk b))
  (uniq-gen n y x y-0 y-1 alpha)
  (absent (y x) (y-0 y-1) (y-1 x-0))
  (precur (4 0) (7 0))
  (operation nonce-test
    (added-listener (cat (exp (gen) (mul x-0 alpha (rec w))) w))
    (exp (gen) (mul x-0 alpha)) (6 1))
  (traces
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (send (enc a b group (exp (gen) (mul x alpha)) (privk a)))
      (recv
        (enc a b group (exp (gen) (mul y alpha))
          (exp (gen) (mul x alpha)) (privk b)))
      (send (enc n (exp (gen) (mul y x alpha)))) (recv n))
    ((send (enc "Group id" group (exp (gen) alpha) k-magic)))
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (recv (enc a b group (exp (gen) (mul x alpha)) (privk a)))
      (send
        (enc a b group (exp (gen) (mul y alpha))
          (exp (gen) (mul x alpha)) (privk b))))
    ((recv (exp (gen) (mul y x alpha)))
      (send (exp (gen) (mul y x alpha))))
    ((recv (cat (exp (gen) (mul y-0 alpha)) (mul y x (rec y-0))))
      (send (cat (exp (gen) (mul y-0 alpha)) (mul y x (rec y-0)))))
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (recv (enc a-0 b-0 group (exp (gen) (mul y-1 alpha)) (privk a-0)))
      (send
        (enc a-0 b-0 group (exp (gen) (mul y-0 alpha))
          (exp (gen) (mul y-1 alpha)) (privk b-0))))
    ((recv (enc "Group id" group (exp (gen) alpha) k-magic))
      (recv (enc a-1 b-1 group (exp (gen) (mul x-0 alpha)) (privk a-1)))
      (send
        (enc a-1 b-1 group (exp (gen) (mul y-1 alpha))
          (exp (gen) (mul x-0 alpha)) (privk b-1))))
    ((recv (cat (exp (gen) (mul x-0 alpha (rec w))) w))
      (send (cat (exp (gen) (mul x-0 alpha (rec w))) w))))
  (label 207)
  (parent 98)
  (unrealized (3 0) (4 0) (7 0))
  (aborted)
  (comment "aborted"))
