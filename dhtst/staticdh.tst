(herald "Static DH key exchange" (algebra diffie-hellman))

(comment "CPSA 4.3.0")
(comment "All input read from dhtst/staticdh.scm")

(defprotocol staticdh1 diffie-hellman
  (defrole init
    (vars (a b ca name) (h base) (x rndx) (n text))
    (trace (recv (enc "cert" (exp (gen) x) a (privk ca)))
      (recv (enc "cert" h b (privk ca))) (send (enc n (exp h x)))
      (recv n))
    (non-orig (privk ca))
    (uniq-orig n)
    (neq (a b)))
  (defrole resp
    (vars (a b ca name) (h base) (y rndx) (n text))
    (trace (recv (enc "cert" h a (privk ca)))
      (recv (enc "cert" (exp (gen) y) b (privk ca)))
      (recv (enc n (exp h y))) (send n))
    (non-orig (privk ca))
    (neq (a b)))
  (defrole ca
    (vars (p ca name) (x rndx))
    (trace (send (enc "cert" (exp (gen) x) p (privk ca))))
    (non-orig x)
    (fn-of (owner-of (p x))))
  (defrule init-neq
    (forall ((z strd) (a name))
      (implies (and (p "init" "a" z a) (p "init" "b" z a)) (false))))
  (defrule resp-neq
    (forall ((z strd) (a name))
      (implies (and (p "resp" "a" z a) (p "resp" "b" z a)) (false))))
  (defrule owner-of
    (forall ((z1 z2 strd) (p1 p2 name) (x rndx))
      (implies
        (and (p "ca" "x" z1 x) (p "ca" "x" z2 x) (p "ca" "p" z1 p1)
          (p "ca" "p" z2 p2))
        (= p1 p2))))
  (defgenrule neqRl_indx
    (forall ((x indx)) (implies (fact neq x x) (false))))
  (defgenrule neqRl_strd
    (forall ((x strd)) (implies (fact neq x x) (false))))
  (defgenrule neqRl_mesg
    (forall ((x mesg)) (implies (fact neq x x) (false))))
  (defgenrule no-interruption
    (forall ((z0 z1 z2 strd) (i0 i1 i2 indx))
      (implies
        (and (leads-to z0 i0 z2 i2) (trans z1 i1)
          (same-locn z0 i0 z1 i1) (prec z0 i0 z1 i1) (prec z1 i1 z2 i2))
        (false))))
  (defgenrule cakeRule
    (forall ((z0 z1 z2 strd) (i0 i1 i2 indx))
      (implies
        (and (trans z0 i0) (trans z1 i1) (leads-to z0 i0 z1 i1)
          (leads-to z0 i0 z2 i2) (prec z1 i1 z2 i2)) (false))))
  (defgenrule scissorsRule
    (forall ((z0 z1 z2 strd) (i0 i1 i2 indx))
      (implies
        (and (trans z0 i0) (trans z1 i1) (trans z2 i2)
          (leads-to z0 i0 z1 i1) (leads-to z0 i0 z2 i2))
        (and (= z1 z2) (= i1 i2)))))
  (defgenrule invShearsRule
    (forall ((z0 z1 z2 strd) (i0 i1 i2 indx))
      (implies
        (and (trans z0 i0) (trans z1 i1) (same-locn z0 i0 z1 i1)
          (leads-to z1 i1 z2 i2) (prec z0 i0 z2 i2))
        (or (and (= z0 z1) (= i0 i1)) (prec z0 i0 z1 i1)))))
  (defgenrule shearsRule
    (forall ((z0 z1 z2 strd) (i0 i1 i2 indx))
      (implies
        (and (trans z0 i0) (trans z1 i1) (trans z2 i2)
          (leads-to z0 i0 z1 i1) (same-locn z0 i0 z2 i2)
          (prec z0 i0 z2 i2))
        (or (and (= z1 z2) (= i1 i2)) (prec z1 i1 z2 i2))))))

(defskeleton staticdh1
  (vars (n text) (a b ca name) (h base) (x rndx))
  (defstrand init 4 (n n) (a a) (b b) (ca ca) (h h) (x x))
  (non-orig (privk ca))
  (uniq-orig n)
  (traces
    ((recv (enc "cert" (exp (gen) x) a (privk ca)))
      (recv (enc "cert" h b (privk ca))) (send (enc n (exp h x)))
      (recv n)))
  (label 0)
  (unrealized (0 0) (0 1))
  (origs (n (0 2)))
  (comment "1 in cohort - 1 not yet seen"))

(defskeleton staticdh1
  (vars (n text) (a b ca name) (h base) (x rndx))
  (defstrand init 4 (n n) (a a) (b b) (ca ca) (h h) (x x))
  (defstrand ca 1 (p a) (ca ca) (x x))
  (precedes ((1 0) (0 0)))
  (non-orig (privk ca) x)
  (uniq-orig n)
  (operation encryption-test (added-strand ca 1)
    (enc "cert" (exp (gen) x) a (privk ca)) (0 0))
  (traces
    ((recv (enc "cert" (exp (gen) x) a (privk ca)))
      (recv (enc "cert" h b (privk ca))) (send (enc n (exp h x)))
      (recv n)) ((send (enc "cert" (exp (gen) x) a (privk ca)))))
  (label 1)
  (parent 0)
  (unrealized (0 1) (0 3))
  (comment "1 in cohort - 1 not yet seen"))

(defskeleton staticdh1
  (vars (n text) (a b ca name) (x x-0 rndx))
  (defstrand init 4 (n n) (a a) (b b) (ca ca) (h (exp (gen) x-0)) (x x))
  (defstrand ca 1 (p a) (ca ca) (x x))
  (defstrand ca 1 (p b) (ca ca) (x x-0))
  (precedes ((1 0) (0 0)) ((2 0) (0 1)))
  (non-orig (privk ca) x x-0)
  (uniq-orig n)
  (operation encryption-test (added-strand ca 1)
    (enc "cert" (exp (gen) x-0) b (privk ca)) (0 1))
  (traces
    ((recv (enc "cert" (exp (gen) x) a (privk ca)))
      (recv (enc "cert" (exp (gen) x-0) b (privk ca)))
      (send (enc n (exp (gen) (mul x x-0)))) (recv n))
    ((send (enc "cert" (exp (gen) x) a (privk ca))))
    ((send (enc "cert" (exp (gen) x-0) b (privk ca)))))
  (label 2)
  (parent 1)
  (unrealized (0 3))
  (comment "2 in cohort - 2 not yet seen"))

(defskeleton staticdh1
  (vars (n text) (a b ca a-0 b-0 ca-0 name) (x x-0 y rndx))
  (defstrand init 4 (n n) (a a) (b b) (ca ca) (h (exp (gen) x-0)) (x x))
  (defstrand ca 1 (p a) (ca ca) (x x))
  (defstrand ca 1 (p b) (ca ca) (x x-0))
  (defstrand resp 4 (n n) (a a-0) (b b-0) (ca ca-0)
    (h (exp (gen) (mul x x-0 (rec y)))) (y y))
  (precedes ((0 2) (3 2)) ((1 0) (0 0)) ((2 0) (0 1)) ((3 3) (0 3)))
  (non-orig (privk ca) (privk ca-0) x x-0)
  (uniq-orig n)
  (operation nonce-test (added-strand resp 4) n (0 3)
    (enc n (exp (gen) (mul x x-0))))
  (traces
    ((recv (enc "cert" (exp (gen) x) a (privk ca)))
      (recv (enc "cert" (exp (gen) x-0) b (privk ca)))
      (send (enc n (exp (gen) (mul x x-0)))) (recv n))
    ((send (enc "cert" (exp (gen) x) a (privk ca))))
    ((send (enc "cert" (exp (gen) x-0) b (privk ca))))
    ((recv
       (enc "cert" (exp (gen) (mul x x-0 (rec y))) a-0 (privk ca-0)))
      (recv (enc "cert" (exp (gen) y) b-0 (privk ca-0)))
      (recv (enc n (exp (gen) (mul x x-0)))) (send n)))
  (label 3)
  (parent 2)
  (unrealized (3 0) (3 1))
  (comment "4 in cohort - 4 not yet seen"))

(defskeleton staticdh1
  (vars (n text) (a b ca name) (x x-0 rndx))
  (defstrand init 4 (n n) (a a) (b b) (ca ca) (h (exp (gen) x-0)) (x x))
  (defstrand ca 1 (p a) (ca ca) (x x))
  (defstrand ca 1 (p b) (ca ca) (x x-0))
  (deflistener (exp (gen) (mul x x-0)))
  (precedes ((1 0) (0 0)) ((2 0) (0 1)) ((3 1) (0 3)))
  (non-orig (privk ca) x x-0)
  (uniq-orig n)
  (operation nonce-test (added-listener (exp (gen) (mul x x-0))) n (0 3)
    (enc n (exp (gen) (mul x x-0))))
  (traces
    ((recv (enc "cert" (exp (gen) x) a (privk ca)))
      (recv (enc "cert" (exp (gen) x-0) b (privk ca)))
      (send (enc n (exp (gen) (mul x x-0)))) (recv n))
    ((send (enc "cert" (exp (gen) x) a (privk ca))))
    ((send (enc "cert" (exp (gen) x-0) b (privk ca))))
    ((recv (exp (gen) (mul x x-0))) (send (exp (gen) (mul x x-0)))))
  (label 4)
  (parent 2)
  (unrealized (3 0))
  (dead)
  (comment "empty cohort"))

(defskeleton staticdh1
  (vars (n text) (a b ca b-0 ca-0 name) (y x rndx))
  (defstrand init 4 (n n) (a a) (b b) (ca ca) (h (exp (gen) x)) (x y))
  (defstrand ca 1 (p a) (ca ca) (x y))
  (defstrand ca 1 (p b) (ca ca) (x x))
  (defstrand resp 4 (n n) (a b) (b b-0) (ca ca-0) (h (exp (gen) x))
    (y y))
  (defstrand ca 1 (p b) (ca ca-0) (x x))
  (precedes ((0 2) (3 2)) ((1 0) (0 0)) ((2 0) (0 1)) ((3 3) (0 3))
    ((4 0) (3 0)))
  (non-orig (privk ca) (privk ca-0) y x)
  (uniq-orig n)
  (rule owner-of)
  (operation encryption-test (added-strand ca 1)
    (enc "cert" (exp (gen) x) b (privk ca-0)) (3 0))
  (traces
    ((recv (enc "cert" (exp (gen) y) a (privk ca)))
      (recv (enc "cert" (exp (gen) x) b (privk ca)))
      (send (enc n (exp (gen) (mul y x)))) (recv n))
    ((send (enc "cert" (exp (gen) y) a (privk ca))))
    ((send (enc "cert" (exp (gen) x) b (privk ca))))
    ((recv (enc "cert" (exp (gen) x) b (privk ca-0)))
      (recv (enc "cert" (exp (gen) y) b-0 (privk ca-0)))
      (recv (enc n (exp (gen) (mul y x)))) (send n))
    ((send (enc "cert" (exp (gen) x) b (privk ca-0)))))
  (label 5)
  (parent 3)
  (unrealized (3 1))
  (comment "2 in cohort - 2 not yet seen"))

(defskeleton staticdh1
  (vars (n text) (a b ca b-0 name) (y x rndx))
  (defstrand init 4 (n n) (a a) (b b) (ca ca) (h (exp (gen) x)) (x y))
  (defstrand ca 1 (p a) (ca ca) (x y))
  (defstrand ca 1 (p b) (ca ca) (x x))
  (defstrand resp 4 (n n) (a b) (b b-0) (ca ca) (h (exp (gen) x)) (y y))
  (precedes ((0 2) (3 2)) ((1 0) (0 0)) ((2 0) (0 1)) ((2 0) (3 0))
    ((3 3) (0 3)))
  (non-orig (privk ca) y x)
  (uniq-orig n)
  (operation encryption-test (displaced 4 2 ca 1)
    (enc "cert" (exp (gen) x) a-0 (privk ca-0)) (3 0))
  (traces
    ((recv (enc "cert" (exp (gen) y) a (privk ca)))
      (recv (enc "cert" (exp (gen) x) b (privk ca)))
      (send (enc n (exp (gen) (mul y x)))) (recv n))
    ((send (enc "cert" (exp (gen) y) a (privk ca))))
    ((send (enc "cert" (exp (gen) x) b (privk ca))))
    ((recv (enc "cert" (exp (gen) x) b (privk ca)))
      (recv (enc "cert" (exp (gen) y) b-0 (privk ca)))
      (recv (enc n (exp (gen) (mul y x)))) (send n)))
  (label 6)
  (parent 3)
  (unrealized (3 1))
  (comment "2 in cohort - 2 not yet seen"))

(defskeleton staticdh1
  (vars (n text) (a b ca b-0 name) (y x rndx))
  (defstrand init 4 (n n) (a a) (b b) (ca ca) (h (exp (gen) y)) (x x))
  (defstrand ca 1 (p a) (ca ca) (x x))
  (defstrand ca 1 (p b) (ca ca) (x y))
  (defstrand resp 4 (n n) (a a) (b b-0) (ca ca) (h (exp (gen) x)) (y y))
  (precedes ((0 2) (3 2)) ((1 0) (0 0)) ((1 0) (3 0)) ((2 0) (0 1))
    ((3 3) (0 3)))
  (non-orig (privk ca) y x)
  (uniq-orig n)
  (operation encryption-test (displaced 4 1 ca 1)
    (enc "cert" (exp (gen) x) a-0 (privk ca-0)) (3 0))
  (traces
    ((recv (enc "cert" (exp (gen) x) a (privk ca)))
      (recv (enc "cert" (exp (gen) y) b (privk ca)))
      (send (enc n (exp (gen) (mul y x)))) (recv n))
    ((send (enc "cert" (exp (gen) x) a (privk ca))))
    ((send (enc "cert" (exp (gen) y) b (privk ca))))
    ((recv (enc "cert" (exp (gen) x) a (privk ca)))
      (recv (enc "cert" (exp (gen) y) b-0 (privk ca)))
      (recv (enc n (exp (gen) (mul y x)))) (send n)))
  (label 7)
  (parent 3)
  (unrealized (3 1))
  (comment "2 in cohort - 2 not yet seen"))

(defskeleton staticdh1
  (vars (n text) (a b ca b-0 ca-0 name) (y x rndx))
  (defstrand init 4 (n n) (a a) (b b) (ca ca) (h (exp (gen) y)) (x x))
  (defstrand ca 1 (p a) (ca ca) (x x))
  (defstrand ca 1 (p b) (ca ca) (x y))
  (defstrand resp 4 (n n) (a a) (b b-0) (ca ca-0) (h (exp (gen) x))
    (y y))
  (defstrand ca 1 (p a) (ca ca-0) (x x))
  (precedes ((0 2) (3 2)) ((1 0) (0 0)) ((2 0) (0 1)) ((3 3) (0 3))
    ((4 0) (3 0)))
  (non-orig (privk ca) (privk ca-0) y x)
  (uniq-orig n)
  (rule owner-of)
  (operation encryption-test (added-strand ca 1)
    (enc "cert" (exp (gen) x) a (privk ca-0)) (3 0))
  (traces
    ((recv (enc "cert" (exp (gen) x) a (privk ca)))
      (recv (enc "cert" (exp (gen) y) b (privk ca)))
      (send (enc n (exp (gen) (mul y x)))) (recv n))
    ((send (enc "cert" (exp (gen) x) a (privk ca))))
    ((send (enc "cert" (exp (gen) y) b (privk ca))))
    ((recv (enc "cert" (exp (gen) x) a (privk ca-0)))
      (recv (enc "cert" (exp (gen) y) b-0 (privk ca-0)))
      (recv (enc n (exp (gen) (mul y x)))) (send n))
    ((send (enc "cert" (exp (gen) x) a (privk ca-0)))))
  (label 8)
  (parent 3)
  (unrealized (3 1))
  (comment "2 in cohort - 2 not yet seen"))

(defskeleton staticdh1
  (vars (n text) (a b ca name) (x x-0 rndx))
  (defstrand init 4 (n n) (a a) (b b) (ca ca) (h (exp (gen) x)) (x x-0))
  (defstrand ca 1 (p a) (ca ca) (x x-0))
  (defstrand ca 1 (p b) (ca ca) (x x))
  (defstrand resp 4 (n n) (a b) (b a) (ca ca) (h (exp (gen) x)) (y x-0))
  (defstrand ca 1 (p b) (ca ca) (x x))
  (precedes ((0 2) (3 2)) ((1 0) (0 0)) ((1 0) (3 1)) ((2 0) (0 1))
    ((3 3) (0 3)) ((4 0) (3 0)))
  (non-orig (privk ca) x x-0)
  (uniq-orig n)
  (operation encryption-test (displaced 5 1 ca 1)
    (enc "cert" (exp (gen) x-0) b-0 (privk ca-0)) (3 1))
  (traces
    ((recv (enc "cert" (exp (gen) x-0) a (privk ca)))
      (recv (enc "cert" (exp (gen) x) b (privk ca)))
      (send (enc n (exp (gen) (mul x x-0)))) (recv n))
    ((send (enc "cert" (exp (gen) x-0) a (privk ca))))
    ((send (enc "cert" (exp (gen) x) b (privk ca))))
    ((recv (enc "cert" (exp (gen) x) b (privk ca)))
      (recv (enc "cert" (exp (gen) x-0) a (privk ca)))
      (recv (enc n (exp (gen) (mul x x-0)))) (send n))
    ((send (enc "cert" (exp (gen) x) b (privk ca)))))
  (label 9)
  (parent 5)
  (unrealized)
  (shape)
  (maps ((0) ((a a) (b b) (ca ca) (h (exp (gen) x)) (x x-0) (n n))))
  (origs (n (0 2))))

(defskeleton staticdh1
  (vars (n text) (a b ca ca-0 name) (x x-0 rndx))
  (defstrand init 4 (n n) (a a) (b b) (ca ca) (h (exp (gen) x)) (x x-0))
  (defstrand ca 1 (p a) (ca ca) (x x-0))
  (defstrand ca 1 (p b) (ca ca) (x x))
  (defstrand resp 4 (n n) (a b) (b a) (ca ca-0) (h (exp (gen) x))
    (y x-0))
  (defstrand ca 1 (p b) (ca ca-0) (x x))
  (defstrand ca 1 (p a) (ca ca-0) (x x-0))
  (precedes ((0 2) (3 2)) ((1 0) (0 0)) ((2 0) (0 1)) ((3 3) (0 3))
    ((4 0) (3 0)) ((5 0) (3 1)))
  (non-orig (privk ca) (privk ca-0) x x-0)
  (uniq-orig n)
  (rule owner-of)
  (operation encryption-test (added-strand ca 1)
    (enc "cert" (exp (gen) x-0) a (privk ca-0)) (3 1))
  (traces
    ((recv (enc "cert" (exp (gen) x-0) a (privk ca)))
      (recv (enc "cert" (exp (gen) x) b (privk ca)))
      (send (enc n (exp (gen) (mul x x-0)))) (recv n))
    ((send (enc "cert" (exp (gen) x-0) a (privk ca))))
    ((send (enc "cert" (exp (gen) x) b (privk ca))))
    ((recv (enc "cert" (exp (gen) x) b (privk ca-0)))
      (recv (enc "cert" (exp (gen) x-0) a (privk ca-0)))
      (recv (enc n (exp (gen) (mul x x-0)))) (send n))
    ((send (enc "cert" (exp (gen) x) b (privk ca-0))))
    ((send (enc "cert" (exp (gen) x-0) a (privk ca-0)))))
  (label 10)
  (parent 5)
  (unrealized)
  (shape)
  (maps ((0) ((a a) (b b) (ca ca) (h (exp (gen) x)) (x x-0) (n n))))
  (origs (n (0 2))))

(defskeleton staticdh1
  (vars (n text) (a b ca name) (x x-0 rndx))
  (defstrand init 4 (n n) (a a) (b b) (ca ca) (h (exp (gen) x)) (x x-0))
  (defstrand ca 1 (p a) (ca ca) (x x-0))
  (defstrand ca 1 (p b) (ca ca) (x x))
  (defstrand resp 4 (n n) (a b) (b a) (ca ca) (h (exp (gen) x)) (y x-0))
  (precedes ((0 2) (3 2)) ((1 0) (0 0)) ((1 0) (3 1)) ((2 0) (0 1))
    ((2 0) (3 0)) ((3 3) (0 3)))
  (non-orig (privk ca) x x-0)
  (uniq-orig n)
  (operation encryption-test (displaced 4 1 ca 1)
    (enc "cert" (exp (gen) x-0) b-0 (privk ca)) (3 1))
  (traces
    ((recv (enc "cert" (exp (gen) x-0) a (privk ca)))
      (recv (enc "cert" (exp (gen) x) b (privk ca)))
      (send (enc n (exp (gen) (mul x x-0)))) (recv n))
    ((send (enc "cert" (exp (gen) x-0) a (privk ca))))
    ((send (enc "cert" (exp (gen) x) b (privk ca))))
    ((recv (enc "cert" (exp (gen) x) b (privk ca)))
      (recv (enc "cert" (exp (gen) x-0) a (privk ca)))
      (recv (enc n (exp (gen) (mul x x-0)))) (send n)))
  (label 11)
  (parent 6)
  (unrealized)
  (shape)
  (maps ((0) ((a a) (b b) (ca ca) (h (exp (gen) x)) (x x-0) (n n))))
  (origs (n (0 2))))

(defskeleton staticdh1
  (vars (n text) (a b ca name) (x x-0 rndx))
  (defstrand init 4 (n n) (a a) (b b) (ca ca) (h (exp (gen) x)) (x x-0))
  (defstrand ca 1 (p a) (ca ca) (x x-0))
  (defstrand ca 1 (p b) (ca ca) (x x))
  (defstrand resp 4 (n n) (a b) (b a) (ca ca) (h (exp (gen) x)) (y x-0))
  (defstrand ca 1 (p a) (ca ca) (x x-0))
  (precedes ((0 2) (3 2)) ((1 0) (0 0)) ((2 0) (0 1)) ((2 0) (3 0))
    ((3 3) (0 3)) ((4 0) (3 1)))
  (non-orig (privk ca) x x-0)
  (uniq-orig n)
  (rule owner-of)
  (operation encryption-test (added-strand ca 1)
    (enc "cert" (exp (gen) x-0) a (privk ca)) (3 1))
  (traces
    ((recv (enc "cert" (exp (gen) x-0) a (privk ca)))
      (recv (enc "cert" (exp (gen) x) b (privk ca)))
      (send (enc n (exp (gen) (mul x x-0)))) (recv n))
    ((send (enc "cert" (exp (gen) x-0) a (privk ca))))
    ((send (enc "cert" (exp (gen) x) b (privk ca))))
    ((recv (enc "cert" (exp (gen) x) b (privk ca)))
      (recv (enc "cert" (exp (gen) x-0) a (privk ca)))
      (recv (enc n (exp (gen) (mul x x-0)))) (send n))
    ((send (enc "cert" (exp (gen) x-0) a (privk ca)))))
  (label 12)
  (parent 6)
  (unrealized)
  (shape)
  (maps ((0) ((a a) (b b) (ca ca) (h (exp (gen) x)) (x x-0) (n n))))
  (origs (n (0 2))))

(defskeleton staticdh1
  (vars (n text) (a b ca name) (x x-0 rndx))
  (defstrand init 4 (n n) (a a) (b b) (ca ca) (h (exp (gen) x-0)) (x x))
  (defstrand ca 1 (p a) (ca ca) (x x))
  (defstrand ca 1 (p b) (ca ca) (x x-0))
  (defstrand resp 4 (n n) (a a) (b b) (ca ca) (h (exp (gen) x)) (y x-0))
  (precedes ((0 2) (3 2)) ((1 0) (0 0)) ((1 0) (3 0)) ((2 0) (0 1))
    ((2 0) (3 1)) ((3 3) (0 3)))
  (non-orig (privk ca) x x-0)
  (uniq-orig n)
  (operation encryption-test (displaced 4 2 ca 1)
    (enc "cert" (exp (gen) x-0) b-0 (privk ca)) (3 1))
  (traces
    ((recv (enc "cert" (exp (gen) x) a (privk ca)))
      (recv (enc "cert" (exp (gen) x-0) b (privk ca)))
      (send (enc n (exp (gen) (mul x x-0)))) (recv n))
    ((send (enc "cert" (exp (gen) x) a (privk ca))))
    ((send (enc "cert" (exp (gen) x-0) b (privk ca))))
    ((recv (enc "cert" (exp (gen) x) a (privk ca)))
      (recv (enc "cert" (exp (gen) x-0) b (privk ca)))
      (recv (enc n (exp (gen) (mul x x-0)))) (send n)))
  (label 13)
  (parent 7)
  (unrealized)
  (shape)
  (maps ((0) ((a a) (b b) (ca ca) (h (exp (gen) x-0)) (x x) (n n))))
  (origs (n (0 2))))

(defskeleton staticdh1
  (vars (n text) (a b ca name) (x x-0 rndx))
  (defstrand init 4 (n n) (a a) (b b) (ca ca) (h (exp (gen) x-0)) (x x))
  (defstrand ca 1 (p a) (ca ca) (x x))
  (defstrand ca 1 (p b) (ca ca) (x x-0))
  (defstrand resp 4 (n n) (a a) (b b) (ca ca) (h (exp (gen) x)) (y x-0))
  (defstrand ca 1 (p b) (ca ca) (x x-0))
  (precedes ((0 2) (3 2)) ((1 0) (0 0)) ((1 0) (3 0)) ((2 0) (0 1))
    ((3 3) (0 3)) ((4 0) (3 1)))
  (non-orig (privk ca) x x-0)
  (uniq-orig n)
  (rule owner-of)
  (operation encryption-test (added-strand ca 1)
    (enc "cert" (exp (gen) x-0) b (privk ca)) (3 1))
  (traces
    ((recv (enc "cert" (exp (gen) x) a (privk ca)))
      (recv (enc "cert" (exp (gen) x-0) b (privk ca)))
      (send (enc n (exp (gen) (mul x x-0)))) (recv n))
    ((send (enc "cert" (exp (gen) x) a (privk ca))))
    ((send (enc "cert" (exp (gen) x-0) b (privk ca))))
    ((recv (enc "cert" (exp (gen) x) a (privk ca)))
      (recv (enc "cert" (exp (gen) x-0) b (privk ca)))
      (recv (enc n (exp (gen) (mul x x-0)))) (send n))
    ((send (enc "cert" (exp (gen) x-0) b (privk ca)))))
  (label 14)
  (parent 7)
  (unrealized)
  (shape)
  (maps ((0) ((a a) (b b) (ca ca) (h (exp (gen) x-0)) (x x) (n n))))
  (origs (n (0 2))))

(defskeleton staticdh1
  (vars (n text) (a b ca name) (x x-0 rndx))
  (defstrand init 4 (n n) (a a) (b b) (ca ca) (h (exp (gen) x-0)) (x x))
  (defstrand ca 1 (p a) (ca ca) (x x))
  (defstrand ca 1 (p b) (ca ca) (x x-0))
  (defstrand resp 4 (n n) (a a) (b b) (ca ca) (h (exp (gen) x)) (y x-0))
  (defstrand ca 1 (p a) (ca ca) (x x))
  (precedes ((0 2) (3 2)) ((1 0) (0 0)) ((2 0) (0 1)) ((2 0) (3 1))
    ((3 3) (0 3)) ((4 0) (3 0)))
  (non-orig (privk ca) x x-0)
  (uniq-orig n)
  (operation encryption-test (displaced 5 2 ca 1)
    (enc "cert" (exp (gen) x-0) b-0 (privk ca-0)) (3 1))
  (traces
    ((recv (enc "cert" (exp (gen) x) a (privk ca)))
      (recv (enc "cert" (exp (gen) x-0) b (privk ca)))
      (send (enc n (exp (gen) (mul x x-0)))) (recv n))
    ((send (enc "cert" (exp (gen) x) a (privk ca))))
    ((send (enc "cert" (exp (gen) x-0) b (privk ca))))
    ((recv (enc "cert" (exp (gen) x) a (privk ca)))
      (recv (enc "cert" (exp (gen) x-0) b (privk ca)))
      (recv (enc n (exp (gen) (mul x x-0)))) (send n))
    ((send (enc "cert" (exp (gen) x) a (privk ca)))))
  (label 15)
  (parent 8)
  (unrealized)
  (shape)
  (maps ((0) ((a a) (b b) (ca ca) (h (exp (gen) x-0)) (x x) (n n))))
  (origs (n (0 2))))

(defskeleton staticdh1
  (vars (n text) (a b ca ca-0 name) (x x-0 rndx))
  (defstrand init 4 (n n) (a a) (b b) (ca ca) (h (exp (gen) x-0)) (x x))
  (defstrand ca 1 (p a) (ca ca) (x x))
  (defstrand ca 1 (p b) (ca ca) (x x-0))
  (defstrand resp 4 (n n) (a a) (b b) (ca ca-0) (h (exp (gen) x))
    (y x-0))
  (defstrand ca 1 (p a) (ca ca-0) (x x))
  (defstrand ca 1 (p b) (ca ca-0) (x x-0))
  (precedes ((0 2) (3 2)) ((1 0) (0 0)) ((2 0) (0 1)) ((3 3) (0 3))
    ((4 0) (3 0)) ((5 0) (3 1)))
  (non-orig (privk ca) (privk ca-0) x x-0)
  (uniq-orig n)
  (rule owner-of)
  (operation encryption-test (added-strand ca 1)
    (enc "cert" (exp (gen) x-0) b (privk ca-0)) (3 1))
  (traces
    ((recv (enc "cert" (exp (gen) x) a (privk ca)))
      (recv (enc "cert" (exp (gen) x-0) b (privk ca)))
      (send (enc n (exp (gen) (mul x x-0)))) (recv n))
    ((send (enc "cert" (exp (gen) x) a (privk ca))))
    ((send (enc "cert" (exp (gen) x-0) b (privk ca))))
    ((recv (enc "cert" (exp (gen) x) a (privk ca-0)))
      (recv (enc "cert" (exp (gen) x-0) b (privk ca-0)))
      (recv (enc n (exp (gen) (mul x x-0)))) (send n))
    ((send (enc "cert" (exp (gen) x) a (privk ca-0))))
    ((send (enc "cert" (exp (gen) x-0) b (privk ca-0)))))
  (label 16)
  (parent 8)
  (unrealized)
  (shape)
  (maps ((0) ((a a) (b b) (ca ca) (h (exp (gen) x-0)) (x x) (n n))))
  (origs (n (0 2))))

(comment "Nothing left to do")
